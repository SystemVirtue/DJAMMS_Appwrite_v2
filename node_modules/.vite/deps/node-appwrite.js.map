{
  "version": 3,
  "sources": ["../../node-fetch-native-with-agent/dist/native.mjs", "../../node-fetch-native-with-agent/dist/agent-stub.mjs", "../../node-appwrite/src/query.ts", "../../node-appwrite/src/client.ts", "../../node-appwrite/src/services/account.ts", "../../node-appwrite/src/services/avatars.ts", "../../node-appwrite/src/services/databases.ts", "../../node-appwrite/src/services/functions.ts", "../../node-appwrite/src/services/graphql.ts", "../../node-appwrite/src/services/health.ts", "../../node-appwrite/src/services/locale.ts", "../../node-appwrite/src/services/messaging.ts", "../../node-appwrite/src/services/sites.ts", "../../node-appwrite/src/services/storage.ts", "../../node-appwrite/src/services/tables-db.ts", "../../node-appwrite/src/services/teams.ts", "../../node-appwrite/src/services/tokens.ts", "../../node-appwrite/src/services/users.ts", "../../node-appwrite/src/permission.ts", "../../node-appwrite/src/role.ts", "../../node-appwrite/src/id.ts", "../../node-appwrite/src/enums/authenticator-type.ts", "../../node-appwrite/src/enums/authentication-factor.ts", "../../node-appwrite/src/enums/o-auth-provider.ts", "../../node-appwrite/src/enums/browser.ts", "../../node-appwrite/src/enums/credit-card.ts", "../../node-appwrite/src/enums/flag.ts", "../../node-appwrite/src/enums/relationship-type.ts", "../../node-appwrite/src/enums/relation-mutate.ts", "../../node-appwrite/src/enums/index-type.ts", "../../node-appwrite/src/enums/runtime.ts", "../../node-appwrite/src/enums/vcs-deployment-type.ts", "../../node-appwrite/src/enums/deployment-download-type.ts", "../../node-appwrite/src/enums/execution-method.ts", "../../node-appwrite/src/enums/name.ts", "../../node-appwrite/src/enums/message-priority.ts", "../../node-appwrite/src/enums/smtp-encryption.ts", "../../node-appwrite/src/enums/framework.ts", "../../node-appwrite/src/enums/build-runtime.ts", "../../node-appwrite/src/enums/adapter.ts", "../../node-appwrite/src/enums/compression.ts", "../../node-appwrite/src/enums/image-gravity.ts", "../../node-appwrite/src/enums/image-format.ts", "../../node-appwrite/src/enums/password-hash.ts", "../../node-appwrite/src/enums/messaging-provider-type.ts"],
  "sourcesContent": ["const e=globalThis.Blob,o=globalThis.File,a=globalThis.FormData,s=globalThis.Headers,t=globalThis.Request,h=globalThis.Response,i=globalThis.AbortController,l=globalThis.fetch||(()=>{throw new Error(\"[node-fetch-native] Failed to fetch: `globalThis.fetch` is not available!\")});export{i as AbortController,e as Blob,o as File,a as FormData,s as Headers,t as Request,h as Response,l as default,l as fetch};\n", "var o=Object.defineProperty;var e=(t,c)=>o(t,\"name\",{value:c,configurable:!0});var i=Object.defineProperty,r=e((t,c)=>i(t,\"name\",{value:c,configurable:!0}),\"e\");function a(){return{agent:void 0,dispatcher:void 0}}e(a,\"createAgent\"),r(a,\"createAgent\");function n(){return globalThis.fetch}e(n,\"createFetch\"),r(n,\"createFetch\");const h=globalThis.fetch;export{a as createAgent,n as createFetch,h as fetch};\n", "type QueryTypesSingle = string | number | boolean;\nexport type QueryTypesList = string[] | number[] | boolean[] | Query[] | any[];\nexport type QueryTypes = QueryTypesSingle | QueryTypesList;\ntype AttributesTypes = string | string[];\n\n/**\n * Helper class to generate query strings.\n */\nexport class Query {\n  method: string;\n  attribute: AttributesTypes | undefined;\n  values: QueryTypesList | undefined;\n\n  /**\n   * Constructor for Query class.\n   *\n   * @param {string} method\n   * @param {AttributesTypes} attribute\n   * @param {QueryTypes} values\n   */\n  constructor(\n    method: string,\n    attribute?: AttributesTypes,\n    values?: QueryTypes\n  ) {\n    this.method = method;\n    this.attribute = attribute;\n\n    if (values !== undefined) {\n      if (Array.isArray(values)) {\n        this.values = values;\n      } else {\n        this.values = [values] as QueryTypesList;\n      }\n    }\n  }\n\n  /**\n   * Convert the query object to a JSON string.\n   *\n   * @returns {string}\n   */\n  toString(): string {\n    return JSON.stringify({\n      method: this.method,\n      attribute: this.attribute,\n      values: this.values,\n    });\n  }\n\n  /**\n   * Filter resources where attribute is equal to value.\n   *\n   * @param {string} attribute\n   * @param {QueryTypes} value\n   * @returns {string}\n   */\n  static equal = (attribute: string, value: QueryTypes): string =>\n    new Query(\"equal\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute is not equal to value.\n   *\n   * @param {string} attribute\n   * @param {QueryTypes} value\n   * @returns {string}\n   */\n  static notEqual = (attribute: string, value: QueryTypes): string =>\n    new Query(\"notEqual\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute is less than value.\n   *\n   * @param {string} attribute\n   * @param {QueryTypes} value\n   * @returns {string}\n   */\n  static lessThan = (attribute: string, value: QueryTypes): string =>\n    new Query(\"lessThan\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute is less than or equal to value.\n   *\n   * @param {string} attribute\n   * @param {QueryTypes} value\n   * @returns {string}\n   */\n  static lessThanEqual = (attribute: string, value: QueryTypes): string =>\n    new Query(\"lessThanEqual\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute is greater than value.\n   *\n   * @param {string} attribute\n   * @param {QueryTypes} value\n   * @returns {string}\n   */\n  static greaterThan = (attribute: string, value: QueryTypes): string =>\n    new Query(\"greaterThan\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute is greater than or equal to value.\n   *\n   * @param {string} attribute\n   * @param {QueryTypes} value\n   * @returns {string}\n   */\n  static greaterThanEqual = (attribute: string, value: QueryTypes): string =>\n    new Query(\"greaterThanEqual\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute is null.\n   *\n   * @param {string} attribute\n   * @returns {string}\n   */\n  static isNull = (attribute: string): string =>\n    new Query(\"isNull\", attribute).toString();\n\n  /**\n   * Filter resources where attribute is not null.\n   *\n   * @param {string} attribute\n   * @returns {string}\n   */\n  static isNotNull = (attribute: string): string =>\n    new Query(\"isNotNull\", attribute).toString();\n\n  /**\n   * Filter resources where attribute is between start and end (inclusive).\n   *\n   * @param {string} attribute\n   * @param {string | number} start\n   * @param {string | number} end\n   * @returns {string}\n   */\n  static between = (attribute: string, start: string | number, end: string | number): string =>\n    new Query(\"between\", attribute, [start, end] as QueryTypesList).toString();\n\n  /**\n   * Filter resources where attribute starts with value.\n   *\n   * @param {string} attribute\n   * @param {string} value\n   * @returns {string}\n   */\n  static startsWith = (attribute: string, value: string): string =>\n    new Query(\"startsWith\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute ends with value.\n   *\n   * @param {string} attribute\n   * @param {string} value\n   * @returns {string}\n   */\n  static endsWith = (attribute: string, value: string): string =>\n    new Query(\"endsWith\", attribute, value).toString();\n\n  /**\n   * Specify which attributes should be returned by the API call.\n   *\n   * @param {string[]} attributes\n   * @returns {string}\n   */\n  static select = (attributes: string[]): string =>\n    new Query(\"select\", undefined, attributes).toString();\n\n  /**\n   * Filter resources by searching attribute for value.\n   * A fulltext index on attribute is required for this query to work.\n   *\n   * @param {string} attribute\n   * @param {string} value\n   * @returns {string}\n   */\n  static search = (attribute: string, value: string): string =>\n    new Query(\"search\", attribute, value).toString();\n\n  /**\n   * Sort results by attribute descending.\n   *\n   * @param {string} attribute\n   * @returns {string}\n   */\n  static orderDesc = (attribute: string): string =>\n    new Query(\"orderDesc\", attribute).toString();\n\n  /**\n   * Sort results by attribute ascending.\n   *\n   * @param {string} attribute\n   * @returns {string}\n   */\n  static orderAsc = (attribute: string): string =>\n    new Query(\"orderAsc\", attribute).toString();\n\n  /**\n   * Sort results randomly.\n   *\n   * @returns {string}\n   */\n  static orderRandom = (): string =>\n    new Query(\"orderRandom\").toString();\n\n  /**\n   * Return results after documentId.\n   *\n   * @param {string} documentId\n   * @returns {string}\n   */\n  static cursorAfter = (documentId: string): string =>\n    new Query(\"cursorAfter\", undefined, documentId).toString();\n\n  /**\n   * Return results before documentId.\n   *\n   * @param {string} documentId\n   * @returns {string}\n   */\n  static cursorBefore = (documentId: string): string =>\n    new Query(\"cursorBefore\", undefined, documentId).toString();\n\n  /**\n   * Return only limit results.\n   *\n   * @param {number} limit\n   * @returns {string}\n   */\n  static limit = (limit: number): string =>\n    new Query(\"limit\", undefined, limit).toString();\n\n  /**\n   * Filter resources by skipping the first offset results.\n   *\n   * @param {number} offset\n   * @returns {string}\n   */\n  static offset = (offset: number): string =>\n    new Query(\"offset\", undefined, offset).toString();\n\n  /**\n   * Filter resources where attribute contains the specified value.\n   *\n   * @param {string} attribute\n   * @param {string | string[]} value\n   * @returns {string}\n   */\n  static contains = (attribute: string, value: string | any[]): string =>\n    new Query(\"contains\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute does not contain the specified value.\n   *\n   * @param {string} attribute\n   * @param {string | any[]} value\n   * @returns {string}\n   */\n  static notContains = (attribute: string, value: string | any[]): string =>\n    new Query(\"notContains\", attribute, value).toString();\n\n  /**\n   * Filter resources by searching attribute for value (inverse of search).\n   * A fulltext index on attribute is required for this query to work.\n   *\n   * @param {string} attribute\n   * @param {string} value\n   * @returns {string}\n   */\n  static notSearch = (attribute: string, value: string): string =>\n    new Query(\"notSearch\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute is not between start and end (exclusive).\n   *\n   * @param {string} attribute\n   * @param {string | number} start\n   * @param {string | number} end\n   * @returns {string}\n   */\n  static notBetween = (attribute: string, start: string | number, end: string | number): string =>\n    new Query(\"notBetween\", attribute, [start, end] as QueryTypesList).toString();\n\n  /**\n   * Filter resources where attribute does not start with value.\n   *\n   * @param {string} attribute\n   * @param {string} value\n   * @returns {string}\n   */\n  static notStartsWith = (attribute: string, value: string): string =>\n    new Query(\"notStartsWith\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute does not end with value.\n   *\n   * @param {string} attribute\n   * @param {string} value\n   * @returns {string}\n   */\n  static notEndsWith = (attribute: string, value: string): string =>\n    new Query(\"notEndsWith\", attribute, value).toString();\n\n  /**\n   * Filter resources where document was created before date.\n   *\n   * @param {string} value\n   * @returns {string}\n   */\n  static createdBefore = (value: string): string =>\n    new Query(\"createdBefore\", undefined, value).toString();\n\n  /**\n   * Filter resources where document was created after date.\n   *\n   * @param {string} value\n   * @returns {string}\n   */\n  static createdAfter = (value: string): string =>\n    new Query(\"createdAfter\", undefined, value).toString();\n\n  /**\n   * Filter resources where document was created between dates.\n   *\n   * @param {string} start\n   * @param {string} end\n   * @returns {string}\n   */\n  static createdBetween = (start: string, end: string): string =>\n    new Query(\"createdBetween\", undefined, [start, end] as QueryTypesList).toString();\n\n  /**\n   * Filter resources where document was updated before date.\n   *\n   * @param {string} value\n   * @returns {string}\n   */\n  static updatedBefore = (value: string): string =>\n    new Query(\"updatedBefore\", undefined, value).toString();\n\n  /**\n   * Filter resources where document was updated after date.\n   *\n   * @param {string} value\n   * @returns {string}\n   */\n  static updatedAfter = (value: string): string =>\n    new Query(\"updatedAfter\", undefined, value).toString();\n\n  /**\n   * Filter resources where document was updated between dates.\n   *\n   * @param {string} start\n   * @param {string} end\n   * @returns {string}\n   */\n  static updatedBetween = (start: string, end: string): string =>\n    new Query(\"updatedBetween\", undefined, [start, end] as QueryTypesList).toString();\n\n  /**\n   * Combine multiple queries using logical OR operator.\n   *\n   * @param {string[]} queries\n   * @returns {string}\n   */\n  static or = (queries: string[]) =>\n    new Query(\"or\", undefined, queries.map((query) => JSON.parse(query))).toString();\n\n  /**\n   * Combine multiple queries using logical AND operator.\n   *\n   * @param {string[]} queries\n   * @returns {string}\n   */\n  static and = (queries: string[]) =>\n    new Query(\"and\", undefined, queries.map((query) => JSON.parse(query))).toString();\n\n  /**\n   * Filter resources where attribute is at a specific distance from the given coordinates.\n   *\n   * @param {string} attribute\n   * @param {any[]} values\n   * @param {number} distance\n   * @param {boolean} meters\n   * @returns {string}\n   */\n  static distanceEqual = (attribute: string, values: any[], distance: number, meters: boolean = true): string =>\n    new Query(\"distanceEqual\", attribute, [[values, distance, meters]] as QueryTypesList).toString();\n\n  /**\n   * Filter resources where attribute is not at a specific distance from the given coordinates.\n   *\n   * @param {string} attribute\n   * @param {any[]} values\n   * @param {number} distance\n   * @param {boolean} meters\n   * @returns {string}\n   */\n  static distanceNotEqual = (attribute: string, values: any[], distance: number, meters: boolean = true): string =>\n    new Query(\"distanceNotEqual\", attribute, [[values, distance, meters]] as QueryTypesList).toString();\n\n  /**\n   * Filter resources where attribute is at a distance greater than the specified value from the given coordinates.\n   *\n   * @param {string} attribute\n   * @param {any[]} values\n   * @param {number} distance\n   * @param {boolean} meters\n   * @returns {string}\n   */\n  static distanceGreaterThan = (attribute: string, values: any[], distance: number, meters: boolean = true): string =>\n    new Query(\"distanceGreaterThan\", attribute, [[values, distance, meters]] as QueryTypesList).toString();\n\n  /**\n   * Filter resources where attribute is at a distance less than the specified value from the given coordinates.\n   *\n   * @param {string} attribute\n   * @param {any[]} values\n   * @param {number} distance\n   * @param {boolean} meters\n   * @returns {string}\n   */\n  static distanceLessThan = (attribute: string, values: any[], distance: number, meters: boolean = true): string =>\n    new Query(\"distanceLessThan\", attribute, [[values, distance, meters]] as QueryTypesList).toString();\n\n  /**\n   * Filter resources where attribute intersects with the given geometry.\n   *\n   * @param {string} attribute\n   * @param {any[]} values\n   * @returns {string}\n   */\n  static intersects = (attribute: string, values: any[]): string =>\n    new Query(\"intersects\", attribute, [values]).toString();\n\n  /**\n   * Filter resources where attribute does not intersect with the given geometry.\n   *\n   * @param {string} attribute\n   * @param {any[]} values\n   * @returns {string}\n   */\n  static notIntersects = (attribute: string, values: any[]): string =>\n    new Query(\"notIntersects\", attribute, [values]).toString();\n\n  /**\n   * Filter resources where attribute crosses the given geometry.\n   *\n   * @param {string} attribute\n   * @param {any[]} values\n   * @returns {string}\n   */\n  static crosses = (attribute: string, values: any[]): string =>\n    new Query(\"crosses\", attribute, [values]).toString();\n\n  /**\n   * Filter resources where attribute does not cross the given geometry.\n   *\n   * @param {string} attribute\n   * @param {any[]} values\n   * @returns {string}\n   */\n  static notCrosses = (attribute: string, values: any[]): string =>\n    new Query(\"notCrosses\", attribute, [values]).toString();\n\n  /**\n   * Filter resources where attribute overlaps with the given geometry.\n   *\n   * @param {string} attribute\n   * @param {any[]} values\n   * @returns {string}\n   */\n  static overlaps = (attribute: string, values: any[]): string =>\n    new Query(\"overlaps\", attribute, [values]).toString();\n\n  /**\n   * Filter resources where attribute does not overlap with the given geometry.\n   *\n   * @param {string} attribute\n   * @param {any[]} values\n   * @returns {string}\n   */\n  static notOverlaps = (attribute: string, values: any[]): string =>\n    new Query(\"notOverlaps\", attribute, [values]).toString();\n\n  /**\n   * Filter resources where attribute touches the given geometry.\n   *\n   * @param {string} attribute\n   * @param {any[]} values\n   * @returns {string}\n   */\n  static touches = (attribute: string, values: any[]): string =>\n    new Query(\"touches\", attribute, [values]).toString();\n\n  /**\n   * Filter resources where attribute does not touch the given geometry.\n   *\n   * @param {string} attribute\n   * @param {any[]} values\n   * @returns {string}\n   */\n  static notTouches = (attribute: string, values: any[]): string =>\n    new Query(\"notTouches\", attribute, [values]).toString();\n}\n", "import { fetch, FormData, File } from 'node-fetch-native-with-agent';\nimport { createAgent } from 'node-fetch-native-with-agent/agent';\nimport { Models } from './models';\n\ntype Payload = {\n    [key: string]: any;\n}\n\ntype UploadProgress = {\n    $id: string;\n    progress: number;\n    sizeUploaded: number;\n    chunksTotal: number;\n    chunksUploaded: number;\n}\n\ntype Headers = {\n    [key: string]: string;\n}\n\nclass AppwriteException extends Error {\n    code: number;\n    response: string;\n    type: string;\n    constructor(message: string, code: number = 0, type: string = '', response: string = '') {\n        super(message);\n        this.name = 'AppwriteException';\n        this.message = message;\n        this.code = code;\n        this.type = type;\n        this.response = response;\n    }\n}\n\nfunction getUserAgent() {\n    let ua = 'AppwriteNodeJSSDK/19.1.0';\n\n    // `process` is a global in Node.js, but not fully available in all runtimes.\n    const platform: string[] = [];\n    if (typeof process !== 'undefined') {\n        if (typeof process.platform === 'string') platform.push(process.platform);\n        if (typeof process.arch === 'string') platform.push(process.arch);\n    } \n    if (platform.length > 0) {\n        ua += ` (${platform.join('; ')})`;\n    }\n\n    // `navigator.userAgent` is available in Node.js 21 and later.\n    // It's also part of the WinterCG spec, so many edge runtimes provide it.\n    // https://common-min-api.proposal.wintercg.org/#requirements-for-navigatoruseragent\n    // @ts-ignore\n    if (typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string') {\n        // @ts-ignore\n        ua += ` ${navigator.userAgent}`;\n\n    // @ts-ignore\n    } else if (typeof globalThis.EdgeRuntime === 'string') {\n        ua += ` EdgeRuntime`;\n\n    // Older Node.js versions don't have `navigator.userAgent`, so we have to use `process.version`.\n    } else if (typeof process !== 'undefined' && typeof process.version === 'string') {\n        ua += ` Node.js/${process.version}`;\n    }\n\n    return ua;\n}\n\nclass Client {\n    static CHUNK_SIZE = 1024 * 1024 * 5;\n\n    config = {\n        endpoint: 'https://cloud.appwrite.io/v1',\n        selfSigned: false,\n        project: '',\n        key: '',\n        jwt: '',\n        locale: '',\n        session: '',\n        forwardeduseragent: '',\n    };\n    headers: Headers = {\n        'x-sdk-name': 'Node.js',\n        'x-sdk-platform': 'server',\n        'x-sdk-language': 'nodejs',\n        'x-sdk-version': '19.1.0',\n        'user-agent' : getUserAgent(),\n        'X-Appwrite-Response-Format': '1.8.0',\n    };\n\n    /**\n     * Set Endpoint\n     *\n     * Your project endpoint\n     *\n     * @param {string} endpoint\n     *\n     * @returns {this}\n     */\n    setEndpoint(endpoint: string): this {\n        if (!endpoint.startsWith('http://') && !endpoint.startsWith('https://')) {\n            throw new AppwriteException('Invalid endpoint URL: ' + endpoint);\n        }\n\n        this.config.endpoint = endpoint;\n        return this;\n    }\n\n    /**\n     * Set self-signed\n     *\n     * @param {boolean} selfSigned\n     *\n     * @returns {this}\n     */\n    setSelfSigned(selfSigned: boolean): this {\n        // @ts-ignore\n        if (typeof globalThis.EdgeRuntime !== 'undefined') {\n            console.warn('setSelfSigned is not supported in edge runtimes.');\n        }\n\n        this.config.selfSigned = selfSigned;\n\n        return this;\n    }\n\n    /**\n     * Add header\n     *\n     * @param {string} header\n     * @param {string} value\n     *\n     * @returns {this}\n     */\n    addHeader(header: string, value: string): this {\n        this.headers[header.toLowerCase()] = value;\n\n        return this;\n    }\n\n    /**\n     * Set Project\n     *\n     * Your project ID\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setProject(value: string): this {\n        this.headers['X-Appwrite-Project'] = value;\n        this.config.project = value;\n        return this;\n    }\n    /**\n     * Set Key\n     *\n     * Your secret API key\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setKey(value: string): this {\n        this.headers['X-Appwrite-Key'] = value;\n        this.config.key = value;\n        return this;\n    }\n    /**\n     * Set JWT\n     *\n     * Your secret JSON Web Token\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setJWT(value: string): this {\n        this.headers['X-Appwrite-JWT'] = value;\n        this.config.jwt = value;\n        return this;\n    }\n    /**\n     * Set Locale\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setLocale(value: string): this {\n        this.headers['X-Appwrite-Locale'] = value;\n        this.config.locale = value;\n        return this;\n    }\n    /**\n     * Set Session\n     *\n     * The user session to authenticate with\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setSession(value: string): this {\n        this.headers['X-Appwrite-Session'] = value;\n        this.config.session = value;\n        return this;\n    }\n    /**\n     * Set ForwardedUserAgent\n     *\n     * The user agent string of the client that made the request\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setForwardedUserAgent(value: string): this {\n        this.headers['X-Forwarded-User-Agent'] = value;\n        this.config.forwardeduseragent = value;\n        return this;\n    }\n\n    prepareRequest(method: string, url: URL, headers: Headers = {}, params: Payload = {}): { uri: string, options: RequestInit } {\n        method = method.toUpperCase();\n\n        headers = Object.assign({}, this.headers, headers);\n\n        let options: RequestInit = {\n            method,\n            headers,\n            ...createAgent(this.config.endpoint, { rejectUnauthorized: !this.config.selfSigned }),\n        };\n\n        if (method === 'GET') {\n            for (const [key, value] of Object.entries(Client.flatten(params))) {\n                url.searchParams.append(key, value);\n            }\n        } else {\n            switch (headers['content-type']) {\n                case 'application/json':\n                    options.body = JSON.stringify(params);\n                    break;\n\n                case 'multipart/form-data':\n                    const formData = new FormData();\n\n                    for (const [key, value] of Object.entries(params)) {\n                        if (value instanceof File) {\n                            formData.append(key, value, value.name);\n                        } else if (Array.isArray(value)) {\n                            for (const nestedValue of value) {\n                                formData.append(`${key}[]`, nestedValue);\n                            }\n                        } else {\n                            formData.append(key, value);\n                        }\n                    }\n\n                    options.body = formData;\n                    delete headers['content-type'];\n                    break;\n            }\n        }\n\n        return { uri: url.toString(), options };\n    }\n\n    async chunkedUpload(method: string, url: URL, headers: Headers = {}, originalPayload: Payload = {}, onProgress: (progress: UploadProgress) => void) {\n        const [fileParam, file] = Object.entries(originalPayload).find(([_, value]) => value instanceof File) ?? [];\n\n        if (!file || !fileParam) {\n            throw new Error('File not found in payload');\n        }\n\n        if (file.size <= Client.CHUNK_SIZE) {\n            return await this.call(method, url, headers, originalPayload);\n        }\n\n        let start = 0;\n        let response = null;\n\n        while (start < file.size) {\n            let end = start + Client.CHUNK_SIZE; // Prepare end for the next chunk\n            if (end >= file.size) {\n                end = file.size; // Adjust for the last chunk to include the last byte\n            }\n\n            headers['content-range'] = `bytes ${start}-${end-1}/${file.size}`;\n            const chunk = file.slice(start, end);\n\n            let payload = { ...originalPayload };\n            payload[fileParam] = new File([chunk], file.name);\n\n            response = await this.call(method, url, headers, payload);\n\n            if (onProgress && typeof onProgress === 'function') {\n                onProgress({\n                    $id: response.$id,\n                    progress: Math.round((end / file.size) * 100),\n                    sizeUploaded: end,\n                    chunksTotal: Math.ceil(file.size / Client.CHUNK_SIZE),\n                    chunksUploaded: Math.ceil(end / Client.CHUNK_SIZE)\n                });\n            }\n\n            if (response && response.$id) {\n                headers['x-appwrite-id'] = response.$id;\n            }\n\n            start = end;\n        }\n\n        return response;\n    }\n\n    async ping(): Promise<string> {\n        return this.call('GET', new URL(this.config.endpoint + '/ping'));\n    }\n\n    async redirect(method: string, url: URL, headers: Headers = {}, params: Payload = {}): Promise<string> {\n        const { uri, options } = this.prepareRequest(method, url, headers, params);\n        \n        const response = await fetch(uri, {\n            ...options,\n            redirect: 'manual'\n        });\n\n        if (response.status !== 301 && response.status !== 302) {\n            throw new AppwriteException('Invalid redirect', response.status);\n        }\n\n        return response.headers.get('location') || '';\n    }\n\n    async call(method: string, url: URL, headers: Headers = {}, params: Payload = {}, responseType = 'json'): Promise<any> {\n        const { uri, options } = this.prepareRequest(method, url, headers, params);\n\n        let data: any = null;\n\n        const response = await fetch(uri, options);\n\n        const warnings = response.headers.get('x-appwrite-warning');\n        if (warnings) {\n            warnings.split(';').forEach((warning: string) => console.warn('Warning: ' + warning));\n        }\n\n        if (response.headers.get('content-type')?.includes('application/json')) {\n            data = await response.json();\n        } else if (responseType === 'arrayBuffer') {\n            data = await response.arrayBuffer();\n        } else {\n            data = {\n                message: await response.text()\n            };\n        }\n\n        if (400 <= response.status) {\n            let responseText = '';\n            if (response.headers.get('content-type')?.includes('application/json') || responseType === 'arrayBuffer') {\n                responseText = JSON.stringify(data);\n            } else {\n                responseText = data?.message;\n            }\n            throw new AppwriteException(data?.message, response.status, data?.type, responseText);\n        }\n\n        return data;\n    }\n\n    static flatten(data: Payload, prefix = ''): Payload {\n        let output: Payload = {};\n\n        for (const [key, value] of Object.entries(data)) {\n            let finalKey = prefix ? prefix + '[' + key +']' : key;\n            if (Array.isArray(value)) {\n                output = { ...output, ...Client.flatten(value, finalKey) };\n            } else {\n                output[finalKey] = value;\n            }\n        }\n\n        return output;\n    }\n}\n\nexport { Client, AppwriteException };\nexport { Query } from './query';\nexport type { Models, Payload, UploadProgress };\nexport type { QueryTypes, QueryTypesList } from './query';\n", "import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\nimport { AuthenticatorType } from '../enums/authenticator-type';\nimport { AuthenticationFactor } from '../enums/authentication-factor';\nimport { OAuthProvider } from '../enums/o-auth-provider';\n\nexport class Account {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Get the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    get<Preferences extends Models.Preferences = Models.DefaultPreferences>(): Promise<Models.User<Preferences>> {\n\n        const apiPath = '/account';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to allow a new user to register a new account in your project. After the user registration completes successfully, you can use the [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification) route to start verifying the user email address. To allow the new user to login to their new account, you need to create a new [account session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).\n     *\n     * @param {string} params.userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.email - User email.\n     * @param {string} params.password - New user password. Must be between 8 and 256 chars.\n     * @param {string} params.name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    create<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, email: string, password: string, name?: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Use this endpoint to allow a new user to register a new account in your project. After the user registration completes successfully, you can use the [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification) route to start verifying the user email address. To allow the new user to login to their new account, you need to create a new [account session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).\n     *\n     * @param {string} userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} email - User email.\n     * @param {string} password - New user password. Must be between 8 and 256 chars.\n     * @param {string} name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    create<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, email: string, password: string, name?: string): Promise<Models.User<Preferences>>;\n    create<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, email: string, password: string, name?: string } | string,\n        ...rest: [(string)?, (string)?, (string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, email: string, password: string, name?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, email: string, password: string, name?: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                email: rest[0] as string,\n                password: rest[1] as string,\n                name: rest[2] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const email = params.email;\n        const password = params.password;\n        const name = params.name;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request.\n     * This endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password.\n     * \n     *\n     * @param {string} params.email - User email.\n     * @param {string} params.password - User password. Must be at least 8 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updateEmail<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { email: string, password: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request.\n     * This endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password.\n     * \n     *\n     * @param {string} email - User email.\n     * @param {string} password - User password. Must be at least 8 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateEmail<Preferences extends Models.Preferences = Models.DefaultPreferences>(email: string, password: string): Promise<Models.User<Preferences>>;\n    updateEmail<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { email: string, password: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { email: string, password: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { email: string, password: string };\n        } else {\n            params = {\n                email: paramsOrFirst as string,\n                password: rest[0] as string            \n            };\n        }\n        \n        const email = params.email;\n        const password = params.password;\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/email';\n        const payload: Payload = {};\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the list of identities for the currently logged in user.\n     *\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, provider, providerUid, providerEmail, providerAccessTokenExpiry\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.IdentityList>}\n     */\n    listIdentities(params?: { queries?: string[]  }): Promise<Models.IdentityList>;\n    /**\n     * Get the list of identities for the currently logged in user.\n     *\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, provider, providerUid, providerEmail, providerAccessTokenExpiry\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.IdentityList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listIdentities(queries?: string[]): Promise<Models.IdentityList>;\n    listIdentities(\n        paramsOrFirst?: { queries?: string[] } | string[]    \n    ): Promise<Models.IdentityList> {\n        let params: { queries?: string[] };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { queries?: string[] };\n        } else {\n            params = {\n                queries: paramsOrFirst as string[]            \n            };\n        }\n        \n        const queries = params.queries;\n\n\n        const apiPath = '/account/identities';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete an identity by its unique ID.\n     *\n     * @param {string} params.identityId - Identity ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteIdentity(params: { identityId: string  }): Promise<{}>;\n    /**\n     * Delete an identity by its unique ID.\n     *\n     * @param {string} identityId - Identity ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteIdentity(identityId: string): Promise<{}>;\n    deleteIdentity(\n        paramsOrFirst: { identityId: string } | string    \n    ): Promise<{}> {\n        let params: { identityId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { identityId: string };\n        } else {\n            params = {\n                identityId: paramsOrFirst as string            \n            };\n        }\n        \n        const identityId = params.identityId;\n\n        if (typeof identityId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identityId\"');\n        }\n\n        const apiPath = '/account/identities/{identityId}'.replace('{identityId}', identityId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to create a JSON Web Token. You can use the resulting JWT to authenticate on behalf of the current user when working with the Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes from its creation and will be invalid if the user will logout in that time frame.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Jwt>}\n     */\n    createJWT(): Promise<Models.Jwt> {\n\n        const apiPath = '/account/jwts';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the list of latest security activity logs for the currently logged in user. Each log returns user IP address, location and date and time of log.\n     *\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     */\n    listLogs(params?: { queries?: string[]  }): Promise<Models.LogList>;\n    /**\n     * Get the list of latest security activity logs for the currently logged in user. Each log returns user IP address, location and date and time of log.\n     *\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listLogs(queries?: string[]): Promise<Models.LogList>;\n    listLogs(\n        paramsOrFirst?: { queries?: string[] } | string[]    \n    ): Promise<Models.LogList> {\n        let params: { queries?: string[] };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { queries?: string[] };\n        } else {\n            params = {\n                queries: paramsOrFirst as string[]            \n            };\n        }\n        \n        const queries = params.queries;\n\n\n        const apiPath = '/account/logs';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Enable or disable MFA on an account.\n     *\n     * @param {boolean} params.mfa - Enable or disable MFA.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updateMFA<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { mfa: boolean  }): Promise<Models.User<Preferences>>;\n    /**\n     * Enable or disable MFA on an account.\n     *\n     * @param {boolean} mfa - Enable or disable MFA.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateMFA<Preferences extends Models.Preferences = Models.DefaultPreferences>(mfa: boolean): Promise<Models.User<Preferences>>;\n    updateMFA<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { mfa: boolean } | boolean    \n    ): Promise<Models.User<Preferences>> {\n        let params: { mfa: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { mfa: boolean };\n        } else {\n            params = {\n                mfa: paramsOrFirst as boolean            \n            };\n        }\n        \n        const mfa = params.mfa;\n\n        if (typeof mfa === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"mfa\"');\n        }\n\n        const apiPath = '/account/mfa';\n        const payload: Payload = {};\n        if (typeof mfa !== 'undefined') {\n            payload['mfa'] = mfa;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#updateMfaAuthenticator) method.\n     *\n     * @param {AuthenticatorType} params.type - Type of authenticator. Must be `totp`\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaType>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Account.createMFAAuthenticator` instead.\n     */\n    createMfaAuthenticator(params: { type: AuthenticatorType  }): Promise<Models.MfaType>;\n    /**\n     * Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#updateMfaAuthenticator) method.\n     *\n     * @param {AuthenticatorType} type - Type of authenticator. Must be `totp`\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaType>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createMfaAuthenticator(type: AuthenticatorType): Promise<Models.MfaType>;\n    createMfaAuthenticator(\n        paramsOrFirst: { type: AuthenticatorType } | AuthenticatorType    \n    ): Promise<Models.MfaType> {\n        let params: { type: AuthenticatorType };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'type' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { type: AuthenticatorType };\n        } else {\n            params = {\n                type: paramsOrFirst as AuthenticatorType            \n            };\n        }\n        \n        const type = params.type;\n\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#updateMfaAuthenticator) method.\n     *\n     * @param {AuthenticatorType} params.type - Type of authenticator. Must be `totp`\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaType>}\n     */\n    createMFAAuthenticator(params: { type: AuthenticatorType  }): Promise<Models.MfaType>;\n    /**\n     * Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#updateMfaAuthenticator) method.\n     *\n     * @param {AuthenticatorType} type - Type of authenticator. Must be `totp`\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaType>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createMFAAuthenticator(type: AuthenticatorType): Promise<Models.MfaType>;\n    createMFAAuthenticator(\n        paramsOrFirst: { type: AuthenticatorType } | AuthenticatorType    \n    ): Promise<Models.MfaType> {\n        let params: { type: AuthenticatorType };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'type' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { type: AuthenticatorType };\n        } else {\n            params = {\n                type: paramsOrFirst as AuthenticatorType            \n            };\n        }\n        \n        const type = params.type;\n\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#createMfaAuthenticator) method.\n     *\n     * @param {AuthenticatorType} params.type - Type of authenticator.\n     * @param {string} params.otp - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Account.updateMFAAuthenticator` instead.\n     */\n    updateMfaAuthenticator<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { type: AuthenticatorType, otp: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#createMfaAuthenticator) method.\n     *\n     * @param {AuthenticatorType} type - Type of authenticator.\n     * @param {string} otp - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateMfaAuthenticator<Preferences extends Models.Preferences = Models.DefaultPreferences>(type: AuthenticatorType, otp: string): Promise<Models.User<Preferences>>;\n    updateMfaAuthenticator<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { type: AuthenticatorType, otp: string } | AuthenticatorType,\n        ...rest: [(string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { type: AuthenticatorType, otp: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'type' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { type: AuthenticatorType, otp: string };\n        } else {\n            params = {\n                type: paramsOrFirst as AuthenticatorType,\n                otp: rest[0] as string            \n            };\n        }\n        \n        const type = params.type;\n        const otp = params.otp;\n\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#createMfaAuthenticator) method.\n     *\n     * @param {AuthenticatorType} params.type - Type of authenticator.\n     * @param {string} params.otp - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updateMFAAuthenticator<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { type: AuthenticatorType, otp: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#createMfaAuthenticator) method.\n     *\n     * @param {AuthenticatorType} type - Type of authenticator.\n     * @param {string} otp - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateMFAAuthenticator<Preferences extends Models.Preferences = Models.DefaultPreferences>(type: AuthenticatorType, otp: string): Promise<Models.User<Preferences>>;\n    updateMFAAuthenticator<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { type: AuthenticatorType, otp: string } | AuthenticatorType,\n        ...rest: [(string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { type: AuthenticatorType, otp: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'type' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { type: AuthenticatorType, otp: string };\n        } else {\n            params = {\n                type: paramsOrFirst as AuthenticatorType,\n                otp: rest[0] as string            \n            };\n        }\n        \n        const type = params.type;\n        const otp = params.otp;\n\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete an authenticator for a user by ID.\n     *\n     * @param {AuthenticatorType} params.type - Type of authenticator.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Account.deleteMFAAuthenticator` instead.\n     */\n    deleteMfaAuthenticator(params: { type: AuthenticatorType  }): Promise<{}>;\n    /**\n     * Delete an authenticator for a user by ID.\n     *\n     * @param {AuthenticatorType} type - Type of authenticator.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteMfaAuthenticator(type: AuthenticatorType): Promise<{}>;\n    deleteMfaAuthenticator(\n        paramsOrFirst: { type: AuthenticatorType } | AuthenticatorType    \n    ): Promise<{}> {\n        let params: { type: AuthenticatorType };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'type' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { type: AuthenticatorType };\n        } else {\n            params = {\n                type: paramsOrFirst as AuthenticatorType            \n            };\n        }\n        \n        const type = params.type;\n\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete an authenticator for a user by ID.\n     *\n     * @param {AuthenticatorType} params.type - Type of authenticator.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteMFAAuthenticator(params: { type: AuthenticatorType  }): Promise<{}>;\n    /**\n     * Delete an authenticator for a user by ID.\n     *\n     * @param {AuthenticatorType} type - Type of authenticator.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteMFAAuthenticator(type: AuthenticatorType): Promise<{}>;\n    deleteMFAAuthenticator(\n        paramsOrFirst: { type: AuthenticatorType } | AuthenticatorType    \n    ): Promise<{}> {\n        let params: { type: AuthenticatorType };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'type' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { type: AuthenticatorType };\n        } else {\n            params = {\n                type: paramsOrFirst as AuthenticatorType            \n            };\n        }\n        \n        const type = params.type;\n\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.\n     *\n     * @param {AuthenticationFactor} params.factor - Factor used for verification. Must be one of following: `email`, `phone`, `totp`, `recoveryCode`.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaChallenge>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Account.createMFAChallenge` instead.\n     */\n    createMfaChallenge(params: { factor: AuthenticationFactor  }): Promise<Models.MfaChallenge>;\n    /**\n     * Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.\n     *\n     * @param {AuthenticationFactor} factor - Factor used for verification. Must be one of following: `email`, `phone`, `totp`, `recoveryCode`.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaChallenge>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createMfaChallenge(factor: AuthenticationFactor): Promise<Models.MfaChallenge>;\n    createMfaChallenge(\n        paramsOrFirst: { factor: AuthenticationFactor } | AuthenticationFactor    \n    ): Promise<Models.MfaChallenge> {\n        let params: { factor: AuthenticationFactor };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'factor' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { factor: AuthenticationFactor };\n        } else {\n            params = {\n                factor: paramsOrFirst as AuthenticationFactor            \n            };\n        }\n        \n        const factor = params.factor;\n\n        if (typeof factor === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"factor\"');\n        }\n\n        const apiPath = '/account/mfa/challenge';\n        const payload: Payload = {};\n        if (typeof factor !== 'undefined') {\n            payload['factor'] = factor;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.\n     *\n     * @param {AuthenticationFactor} params.factor - Factor used for verification. Must be one of following: `email`, `phone`, `totp`, `recoveryCode`.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaChallenge>}\n     */\n    createMFAChallenge(params: { factor: AuthenticationFactor  }): Promise<Models.MfaChallenge>;\n    /**\n     * Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.\n     *\n     * @param {AuthenticationFactor} factor - Factor used for verification. Must be one of following: `email`, `phone`, `totp`, `recoveryCode`.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaChallenge>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createMFAChallenge(factor: AuthenticationFactor): Promise<Models.MfaChallenge>;\n    createMFAChallenge(\n        paramsOrFirst: { factor: AuthenticationFactor } | AuthenticationFactor    \n    ): Promise<Models.MfaChallenge> {\n        let params: { factor: AuthenticationFactor };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'factor' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { factor: AuthenticationFactor };\n        } else {\n            params = {\n                factor: paramsOrFirst as AuthenticationFactor            \n            };\n        }\n        \n        const factor = params.factor;\n\n        if (typeof factor === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"factor\"');\n        }\n\n        const apiPath = '/account/mfa/challenge';\n        const payload: Payload = {};\n        if (typeof factor !== 'undefined') {\n            payload['factor'] = factor;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Complete the MFA challenge by providing the one-time password. Finish the process of MFA verification by providing the one-time password. To begin the flow, use [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.\n     *\n     * @param {string} params.challengeId - ID of the challenge.\n     * @param {string} params.otp - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Account.updateMFAChallenge` instead.\n     */\n    updateMfaChallenge(params: { challengeId: string, otp: string  }): Promise<Models.Session>;\n    /**\n     * Complete the MFA challenge by providing the one-time password. Finish the process of MFA verification by providing the one-time password. To begin the flow, use [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.\n     *\n     * @param {string} challengeId - ID of the challenge.\n     * @param {string} otp - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateMfaChallenge(challengeId: string, otp: string): Promise<Models.Session>;\n    updateMfaChallenge(\n        paramsOrFirst: { challengeId: string, otp: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Session> {\n        let params: { challengeId: string, otp: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { challengeId: string, otp: string };\n        } else {\n            params = {\n                challengeId: paramsOrFirst as string,\n                otp: rest[0] as string            \n            };\n        }\n        \n        const challengeId = params.challengeId;\n        const otp = params.otp;\n\n        if (typeof challengeId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"challengeId\"');\n        }\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n        const apiPath = '/account/mfa/challenge';\n        const payload: Payload = {};\n        if (typeof challengeId !== 'undefined') {\n            payload['challengeId'] = challengeId;\n        }\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Complete the MFA challenge by providing the one-time password. Finish the process of MFA verification by providing the one-time password. To begin the flow, use [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.\n     *\n     * @param {string} params.challengeId - ID of the challenge.\n     * @param {string} params.otp - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    updateMFAChallenge(params: { challengeId: string, otp: string  }): Promise<Models.Session>;\n    /**\n     * Complete the MFA challenge by providing the one-time password. Finish the process of MFA verification by providing the one-time password. To begin the flow, use [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.\n     *\n     * @param {string} challengeId - ID of the challenge.\n     * @param {string} otp - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateMFAChallenge(challengeId: string, otp: string): Promise<Models.Session>;\n    updateMFAChallenge(\n        paramsOrFirst: { challengeId: string, otp: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Session> {\n        let params: { challengeId: string, otp: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { challengeId: string, otp: string };\n        } else {\n            params = {\n                challengeId: paramsOrFirst as string,\n                otp: rest[0] as string            \n            };\n        }\n        \n        const challengeId = params.challengeId;\n        const otp = params.otp;\n\n        if (typeof challengeId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"challengeId\"');\n        }\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n        const apiPath = '/account/mfa/challenge';\n        const payload: Payload = {};\n        if (typeof challengeId !== 'undefined') {\n            payload['challengeId'] = challengeId;\n        }\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List the factors available on the account to be used as a MFA challange.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaFactors>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Account.listMFAFactors` instead.\n     */\n    listMfaFactors(): Promise<Models.MfaFactors> {\n\n        const apiPath = '/account/mfa/factors';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List the factors available on the account to be used as a MFA challange.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaFactors>}\n     */\n    listMFAFactors(): Promise<Models.MfaFactors> {\n\n        const apiPath = '/account/mfa/factors';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get recovery codes that can be used as backup for MFA flow. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to read recovery codes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Account.getMFARecoveryCodes` instead.\n     */\n    getMfaRecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get recovery codes that can be used as backup for MFA flow. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to read recovery codes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     */\n    getMFARecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Generate recovery codes as backup for MFA flow. It's recommended to generate and show then immediately after user successfully adds their authehticator. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Account.createMFARecoveryCodes` instead.\n     */\n    createMfaRecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Generate recovery codes as backup for MFA flow. It's recommended to generate and show then immediately after user successfully adds their authehticator. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     */\n    createMFARecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Regenerate recovery codes that can be used as backup for MFA flow. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to regenreate recovery codes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Account.updateMFARecoveryCodes` instead.\n     */\n    updateMfaRecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Regenerate recovery codes that can be used as backup for MFA flow. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to regenreate recovery codes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     */\n    updateMFARecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update currently logged in user account name.\n     *\n     * @param {string} params.name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updateName<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { name: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Update currently logged in user account name.\n     *\n     * @param {string} name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateName<Preferences extends Models.Preferences = Models.DefaultPreferences>(name: string): Promise<Models.User<Preferences>>;\n    updateName<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { name: string } | string    \n    ): Promise<Models.User<Preferences>> {\n        let params: { name: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { name: string };\n        } else {\n            params = {\n                name: paramsOrFirst as string            \n            };\n        }\n        \n        const name = params.name;\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/account/name';\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth, Team Invites and Magic URL, oldPassword is optional.\n     *\n     * @param {string} params.password - New user password. Must be at least 8 chars.\n     * @param {string} params.oldPassword - Current user password. Must be at least 8 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updatePassword<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { password: string, oldPassword?: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth, Team Invites and Magic URL, oldPassword is optional.\n     *\n     * @param {string} password - New user password. Must be at least 8 chars.\n     * @param {string} oldPassword - Current user password. Must be at least 8 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePassword<Preferences extends Models.Preferences = Models.DefaultPreferences>(password: string, oldPassword?: string): Promise<Models.User<Preferences>>;\n    updatePassword<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { password: string, oldPassword?: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { password: string, oldPassword?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { password: string, oldPassword?: string };\n        } else {\n            params = {\n                password: paramsOrFirst as string,\n                oldPassword: rest[0] as string            \n            };\n        }\n        \n        const password = params.password;\n        const oldPassword = params.oldPassword;\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/password';\n        const payload: Payload = {};\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof oldPassword !== 'undefined') {\n            payload['oldPassword'] = oldPassword;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update the currently logged in user's phone number. After updating the phone number, the phone verification status will be reset. A confirmation SMS is not sent automatically, however you can use the [POST /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification) endpoint to send a confirmation SMS.\n     *\n     * @param {string} params.phone - Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @param {string} params.password - User password. Must be at least 8 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updatePhone<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { phone: string, password: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Update the currently logged in user's phone number. After updating the phone number, the phone verification status will be reset. A confirmation SMS is not sent automatically, however you can use the [POST /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification) endpoint to send a confirmation SMS.\n     *\n     * @param {string} phone - Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @param {string} password - User password. Must be at least 8 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePhone<Preferences extends Models.Preferences = Models.DefaultPreferences>(phone: string, password: string): Promise<Models.User<Preferences>>;\n    updatePhone<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { phone: string, password: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { phone: string, password: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { phone: string, password: string };\n        } else {\n            params = {\n                phone: paramsOrFirst as string,\n                password: rest[0] as string            \n            };\n        }\n        \n        const phone = params.phone;\n        const password = params.password;\n\n        if (typeof phone === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phone\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/phone';\n        const payload: Payload = {};\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the preferences as a key-value object for the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Preferences>}\n     */\n    getPrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(): Promise<Preferences> {\n\n        const apiPath = '/account/prefs';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.\n     *\n     * @param {Partial<Preferences>} params.prefs - Prefs key-value JSON object.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updatePrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { prefs: Partial<Preferences>  }): Promise<Models.User<Preferences>>;\n    /**\n     * Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.\n     *\n     * @param {Partial<Preferences>} prefs - Prefs key-value JSON object.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(prefs: Partial<Preferences>): Promise<Models.User<Preferences>>;\n    updatePrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { prefs: Partial<Preferences> } | Partial<Preferences>    \n    ): Promise<Models.User<Preferences>> {\n        let params: { prefs: Partial<Preferences> };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'prefs' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { prefs: Partial<Preferences> };\n        } else {\n            params = {\n                prefs: paramsOrFirst as Partial<Preferences>            \n            };\n        }\n        \n        const prefs = params.prefs;\n\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n\n        const apiPath = '/account/prefs';\n        const payload: Payload = {};\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery) endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour.\n     *\n     * @param {string} params.email - User email.\n     * @param {string} params.url - URL to redirect the user back to your app from the recovery email. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    createRecovery(params: { email: string, url: string  }): Promise<Models.Token>;\n    /**\n     * Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery) endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour.\n     *\n     * @param {string} email - User email.\n     * @param {string} url - URL to redirect the user back to your app from the recovery email. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createRecovery(email: string, url: string): Promise<Models.Token>;\n    createRecovery(\n        paramsOrFirst: { email: string, url: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Token> {\n        let params: { email: string, url: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { email: string, url: string };\n        } else {\n            params = {\n                email: paramsOrFirst as string,\n                url: rest[0] as string            \n            };\n        }\n        \n        const email = params.email;\n        const url = params.url;\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n        const apiPath = '/account/recovery';\n        const payload: Payload = {};\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery) endpoint.\n     * \n     * Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string} params.secret - Valid reset token.\n     * @param {string} params.password - New user password. Must be between 8 and 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    updateRecovery(params: { userId: string, secret: string, password: string  }): Promise<Models.Token>;\n    /**\n     * Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery) endpoint.\n     * \n     * Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.\n     *\n     * @param {string} userId - User ID.\n     * @param {string} secret - Valid reset token.\n     * @param {string} password - New user password. Must be between 8 and 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateRecovery(userId: string, secret: string, password: string): Promise<Models.Token>;\n    updateRecovery(\n        paramsOrFirst: { userId: string, secret: string, password: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<Models.Token> {\n        let params: { userId: string, secret: string, password: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, secret: string, password: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                secret: rest[0] as string,\n                password: rest[1] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const secret = params.secret;\n        const password = params.password;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/recovery';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the list of active sessions across different devices for the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.SessionList>}\n     */\n    listSessions(): Promise<Models.SessionList> {\n\n        const apiPath = '/account/sessions';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete all sessions from the user account and remove any sessions cookies from the end client.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteSessions(): Promise<{}> {\n\n        const apiPath = '/account/sessions';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to allow a new user to register an anonymous account in your project. This route will also create a new session for the user. To allow the new user to convert an anonymous account to a normal account, you need to update its [email and password](https://appwrite.io/docs/references/cloud/client-web/account#updateEmail) or create an [OAuth2 session](https://appwrite.io/docs/references/cloud/client-web/account#CreateOAuth2Session).\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    createAnonymousSession(): Promise<Models.Session> {\n\n        const apiPath = '/account/sessions/anonymous';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} params.email - User email.\n     * @param {string} params.password - User password. Must be at least 8 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    createEmailPasswordSession(params: { email: string, password: string  }): Promise<Models.Session>;\n    /**\n     * Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} email - User email.\n     * @param {string} password - User password. Must be at least 8 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createEmailPasswordSession(email: string, password: string): Promise<Models.Session>;\n    createEmailPasswordSession(\n        paramsOrFirst: { email: string, password: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Session> {\n        let params: { email: string, password: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { email: string, password: string };\n        } else {\n            params = {\n                email: paramsOrFirst as string,\n                password: rest[0] as string            \n            };\n        }\n        \n        const email = params.email;\n        const password = params.password;\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/account/sessions/email';\n        const payload: Payload = {};\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} params.userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.secret - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     * @deprecated This API has been deprecated since 1.6.0. Please use `Account.createSession` instead.\n     */\n    updateMagicURLSession(params: { userId: string, secret: string  }): Promise<Models.Session>;\n    /**\n     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} secret - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateMagicURLSession(userId: string, secret: string): Promise<Models.Session>;\n    updateMagicURLSession(\n        paramsOrFirst: { userId: string, secret: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Session> {\n        let params: { userId: string, secret: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, secret: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                secret: rest[0] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const secret = params.secret;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/sessions/magic-url';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} params.userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.secret - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     * @deprecated This API has been deprecated since 1.6.0. Please use `Account.createSession` instead.\n     */\n    updatePhoneSession(params: { userId: string, secret: string  }): Promise<Models.Session>;\n    /**\n     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} secret - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePhoneSession(userId: string, secret: string): Promise<Models.Session>;\n    updatePhoneSession(\n        paramsOrFirst: { userId: string, secret: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Session> {\n        let params: { userId: string, secret: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, secret: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                secret: rest[0] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const secret = params.secret;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/sessions/phone';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} params.userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.secret - Secret of a token generated by login methods. For example, the `createMagicURLToken` or `createPhoneToken` methods.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    createSession(params: { userId: string, secret: string  }): Promise<Models.Session>;\n    /**\n     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} secret - Secret of a token generated by login methods. For example, the `createMagicURLToken` or `createPhoneToken` methods.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createSession(userId: string, secret: string): Promise<Models.Session>;\n    createSession(\n        paramsOrFirst: { userId: string, secret: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Session> {\n        let params: { userId: string, secret: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, secret: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                secret: rest[0] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const secret = params.secret;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/sessions/token';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to get a logged in user's session using a Session ID. Inputting 'current' will return the current session being used.\n     *\n     * @param {string} params.sessionId - Session ID. Use the string 'current' to get the current device session.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    getSession(params: { sessionId: string  }): Promise<Models.Session>;\n    /**\n     * Use this endpoint to get a logged in user's session using a Session ID. Inputting 'current' will return the current session being used.\n     *\n     * @param {string} sessionId - Session ID. Use the string 'current' to get the current device session.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getSession(sessionId: string): Promise<Models.Session>;\n    getSession(\n        paramsOrFirst: { sessionId: string } | string    \n    ): Promise<Models.Session> {\n        let params: { sessionId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { sessionId: string };\n        } else {\n            params = {\n                sessionId: paramsOrFirst as string            \n            };\n        }\n        \n        const sessionId = params.sessionId;\n\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to extend a session's length. Extending a session is useful when session expiry is short. If the session was created using an OAuth provider, this endpoint refreshes the access token from the provider.\n     *\n     * @param {string} params.sessionId - Session ID. Use the string 'current' to update the current device session.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    updateSession(params: { sessionId: string  }): Promise<Models.Session>;\n    /**\n     * Use this endpoint to extend a session's length. Extending a session is useful when session expiry is short. If the session was created using an OAuth provider, this endpoint refreshes the access token from the provider.\n     *\n     * @param {string} sessionId - Session ID. Use the string 'current' to update the current device session.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateSession(sessionId: string): Promise<Models.Session>;\n    updateSession(\n        paramsOrFirst: { sessionId: string } | string    \n    ): Promise<Models.Session> {\n        let params: { sessionId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { sessionId: string };\n        } else {\n            params = {\n                sessionId: paramsOrFirst as string            \n            };\n        }\n        \n        const sessionId = params.sessionId;\n\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Logout the user. Use 'current' as the session ID to logout on this device, use a session ID to logout on another device. If you're looking to logout the user on all devices, use [Delete Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions) instead.\n     *\n     * @param {string} params.sessionId - Session ID. Use the string 'current' to delete the current device session.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteSession(params: { sessionId: string  }): Promise<{}>;\n    /**\n     * Logout the user. Use 'current' as the session ID to logout on this device, use a session ID to logout on another device. If you're looking to logout the user on all devices, use [Delete Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions) instead.\n     *\n     * @param {string} sessionId - Session ID. Use the string 'current' to delete the current device session.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteSession(sessionId: string): Promise<{}>;\n    deleteSession(\n        paramsOrFirst: { sessionId: string } | string    \n    ): Promise<{}> {\n        let params: { sessionId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { sessionId: string };\n        } else {\n            params = {\n                sessionId: paramsOrFirst as string            \n            };\n        }\n        \n        const sessionId = params.sessionId;\n\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Block the currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. To completely delete a user, use the Users API instead.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updateStatus<Preferences extends Models.Preferences = Models.DefaultPreferences>(): Promise<Models.User<Preferences>> {\n\n        const apiPath = '/account/status';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Sends the user an email with a secret key for creating a session. If the email address has never been used, a **new account is created** using the provided `userId`. Otherwise, if the email address is already attached to an account, the **user ID is ignored**. Then, the user will receive an email with the one-time password. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user's email is valid for 15 minutes.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n     * \n     *\n     * @param {string} params.userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars. If the email address has never been used, a new account is created using the provided userId. Otherwise, if the email address is already attached to an account, the user ID is ignored.\n     * @param {string} params.email - User email.\n     * @param {boolean} params.phrase - Toggle for security phrase. If enabled, email will be send with a randomly generated phrase and the phrase will also be included in the response. Confirming phrases match increases the security of your authentication flow.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    createEmailToken(params: { userId: string, email: string, phrase?: boolean  }): Promise<Models.Token>;\n    /**\n     * Sends the user an email with a secret key for creating a session. If the email address has never been used, a **new account is created** using the provided `userId`. Otherwise, if the email address is already attached to an account, the **user ID is ignored**. Then, the user will receive an email with the one-time password. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user's email is valid for 15 minutes.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n     * \n     *\n     * @param {string} userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars. If the email address has never been used, a new account is created using the provided userId. Otherwise, if the email address is already attached to an account, the user ID is ignored.\n     * @param {string} email - User email.\n     * @param {boolean} phrase - Toggle for security phrase. If enabled, email will be send with a randomly generated phrase and the phrase will also be included in the response. Confirming phrases match increases the security of your authentication flow.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createEmailToken(userId: string, email: string, phrase?: boolean): Promise<Models.Token>;\n    createEmailToken(\n        paramsOrFirst: { userId: string, email: string, phrase?: boolean } | string,\n        ...rest: [(string)?, (boolean)?]    \n    ): Promise<Models.Token> {\n        let params: { userId: string, email: string, phrase?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, email: string, phrase?: boolean };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                email: rest[0] as string,\n                phrase: rest[1] as boolean            \n            };\n        }\n        \n        const userId = params.userId;\n        const email = params.email;\n        const phrase = params.phrase;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        const apiPath = '/account/tokens/email';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof phrase !== 'undefined') {\n            payload['phrase'] = phrase;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Sends the user an email with a secret key for creating a session. If the provided user ID has not been registered, a new user will be created. When the user clicks the link in the email, the user is redirected back to the URL you provided with the secret key and userId values attached to the URL query string. Use the query string parameters to submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The link sent to the user's email address is valid for 1 hour.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n     * \n     *\n     * @param {string} params.userId - Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars. If the email address has never been used, a new account is created using the provided userId. Otherwise, if the email address is already attached to an account, the user ID is ignored.\n     * @param {string} params.email - User email.\n     * @param {string} params.url - URL to redirect the user back to your app from the magic URL login. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n     * @param {boolean} params.phrase - Toggle for security phrase. If enabled, email will be send with a randomly generated phrase and the phrase will also be included in the response. Confirming phrases match increases the security of your authentication flow.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    createMagicURLToken(params: { userId: string, email: string, url?: string, phrase?: boolean  }): Promise<Models.Token>;\n    /**\n     * Sends the user an email with a secret key for creating a session. If the provided user ID has not been registered, a new user will be created. When the user clicks the link in the email, the user is redirected back to the URL you provided with the secret key and userId values attached to the URL query string. Use the query string parameters to submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The link sent to the user's email address is valid for 1 hour.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n     * \n     *\n     * @param {string} userId - Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars. If the email address has never been used, a new account is created using the provided userId. Otherwise, if the email address is already attached to an account, the user ID is ignored.\n     * @param {string} email - User email.\n     * @param {string} url - URL to redirect the user back to your app from the magic URL login. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n     * @param {boolean} phrase - Toggle for security phrase. If enabled, email will be send with a randomly generated phrase and the phrase will also be included in the response. Confirming phrases match increases the security of your authentication flow.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createMagicURLToken(userId: string, email: string, url?: string, phrase?: boolean): Promise<Models.Token>;\n    createMagicURLToken(\n        paramsOrFirst: { userId: string, email: string, url?: string, phrase?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Token> {\n        let params: { userId: string, email: string, url?: string, phrase?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, email: string, url?: string, phrase?: boolean };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                email: rest[0] as string,\n                url: rest[1] as string,\n                phrase: rest[2] as boolean            \n            };\n        }\n        \n        const userId = params.userId;\n        const email = params.email;\n        const url = params.url;\n        const phrase = params.phrase;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        const apiPath = '/account/tokens/magic-url';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n        if (typeof phrase !== 'undefined') {\n            payload['phrase'] = phrase;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL's back to your app when login is completed. \n     * \n     * If authentication succeeds, `userId` and `secret` of a token will be appended to the success URL as query parameters. These can be used to create a new session using the [Create session](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {OAuthProvider} params.provider - OAuth2 Provider. Currently, supported providers are: amazon, apple, auth0, authentik, autodesk, bitbucket, bitly, box, dailymotion, discord, disqus, dropbox, etsy, facebook, figma, github, gitlab, google, linkedin, microsoft, notion, oidc, okta, paypal, paypalSandbox, podio, salesforce, slack, spotify, stripe, tradeshift, tradeshiftBox, twitch, wordpress, yahoo, yammer, yandex, zoho, zoom.\n     * @param {string} params.success - URL to redirect back to your app after a successful login attempt.  Only URLs from hostnames in your project's platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n     * @param {string} params.failure - URL to redirect back to your app after a failed login attempt.  Only URLs from hostnames in your project's platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n     * @param {string[]} params.scopes - A list of custom OAuth2 scopes. Check each provider internal docs for a list of supported scopes. Maximum of 100 scopes are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<string>}\n     */\n    createOAuth2Token(params: { provider: OAuthProvider, success?: string, failure?: string, scopes?: string[]  }): Promise<string>;\n    /**\n     * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL's back to your app when login is completed. \n     * \n     * If authentication succeeds, `userId` and `secret` of a token will be appended to the success URL as query parameters. These can be used to create a new session using the [Create session](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {OAuthProvider} provider - OAuth2 Provider. Currently, supported providers are: amazon, apple, auth0, authentik, autodesk, bitbucket, bitly, box, dailymotion, discord, disqus, dropbox, etsy, facebook, figma, github, gitlab, google, linkedin, microsoft, notion, oidc, okta, paypal, paypalSandbox, podio, salesforce, slack, spotify, stripe, tradeshift, tradeshiftBox, twitch, wordpress, yahoo, yammer, yandex, zoho, zoom.\n     * @param {string} success - URL to redirect back to your app after a successful login attempt.  Only URLs from hostnames in your project's platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n     * @param {string} failure - URL to redirect back to your app after a failed login attempt.  Only URLs from hostnames in your project's platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n     * @param {string[]} scopes - A list of custom OAuth2 scopes. Check each provider internal docs for a list of supported scopes. Maximum of 100 scopes are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<string>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createOAuth2Token(provider: OAuthProvider, success?: string, failure?: string, scopes?: string[]): Promise<string>;\n    createOAuth2Token(\n        paramsOrFirst: { provider: OAuthProvider, success?: string, failure?: string, scopes?: string[] } | OAuthProvider,\n        ...rest: [(string)?, (string)?, (string[])?]    \n    ): Promise<string> {\n        let params: { provider: OAuthProvider, success?: string, failure?: string, scopes?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'provider' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { provider: OAuthProvider, success?: string, failure?: string, scopes?: string[] };\n        } else {\n            params = {\n                provider: paramsOrFirst as OAuthProvider,\n                success: rest[0] as string,\n                failure: rest[1] as string,\n                scopes: rest[2] as string[]            \n            };\n        }\n        \n        const provider = params.provider;\n        const success = params.success;\n        const failure = params.failure;\n        const scopes = params.scopes;\n\n        if (typeof provider === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"provider\"');\n        }\n\n        const apiPath = '/account/tokens/oauth2/{provider}'.replace('{provider}', provider);\n        const payload: Payload = {};\n        if (typeof success !== 'undefined') {\n            payload['success'] = success;\n        }\n        if (typeof failure !== 'undefined') {\n            payload['failure'] = failure;\n        }\n        if (typeof scopes !== 'undefined') {\n            payload['scopes'] = scopes;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.redirect(\n            'get',\n            uri,\n            apiHeaders,\n            payload\n        );\n    }\n\n    /**\n     * Sends the user an SMS with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user's phone is valid for 15 minutes.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} params.userId - Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars. If the phone number has never been used, a new account is created using the provided userId. Otherwise, if the phone number is already attached to an account, the user ID is ignored.\n     * @param {string} params.phone - Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    createPhoneToken(params: { userId: string, phone: string  }): Promise<Models.Token>;\n    /**\n     * Sends the user an SMS with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user's phone is valid for 15 minutes.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} userId - Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars. If the phone number has never been used, a new account is created using the provided userId. Otherwise, if the phone number is already attached to an account, the user ID is ignored.\n     * @param {string} phone - Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createPhoneToken(userId: string, phone: string): Promise<Models.Token>;\n    createPhoneToken(\n        paramsOrFirst: { userId: string, phone: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Token> {\n        let params: { userId: string, phone: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, phone: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                phone: rest[0] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const phone = params.phone;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof phone === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phone\"');\n        }\n\n        const apiPath = '/account/tokens/phone';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification). The verification link sent to the user's email address is valid for 7 days.\n     * \n     * Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.\n     * \n     *\n     * @param {string} params.url - URL to redirect the user back to your app from the verification email. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    createVerification(params: { url: string  }): Promise<Models.Token>;\n    /**\n     * Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification). The verification link sent to the user's email address is valid for 7 days.\n     * \n     * Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.\n     * \n     *\n     * @param {string} url - URL to redirect the user back to your app from the verification email. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createVerification(url: string): Promise<Models.Token>;\n    createVerification(\n        paramsOrFirst: { url: string } | string    \n    ): Promise<Models.Token> {\n        let params: { url: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { url: string };\n        } else {\n            params = {\n                url: paramsOrFirst as string            \n            };\n        }\n        \n        const url = params.url;\n\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n        const apiPath = '/account/verification';\n        const payload: Payload = {};\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string} params.secret - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    updateVerification(params: { userId: string, secret: string  }): Promise<Models.Token>;\n    /**\n     * Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.\n     *\n     * @param {string} userId - User ID.\n     * @param {string} secret - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateVerification(userId: string, secret: string): Promise<Models.Token>;\n    updateVerification(\n        paramsOrFirst: { userId: string, secret: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Token> {\n        let params: { userId: string, secret: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, secret: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                secret: rest[0] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const secret = params.secret;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/verification';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user's phone number using the [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone) endpoint. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification). The verification code sent to the user's phone number is valid for 15 minutes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    createPhoneVerification(): Promise<Models.Token> {\n\n        const apiPath = '/account/verification/phone';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to complete the user phone verification process. Use the **userId** and **secret** that were sent to your user's phone number to verify the user email ownership. If confirmed this route will return a 200 status code.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string} params.secret - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    updatePhoneVerification(params: { userId: string, secret: string  }): Promise<Models.Token>;\n    /**\n     * Use this endpoint to complete the user phone verification process. Use the **userId** and **secret** that were sent to your user's phone number to verify the user email ownership. If confirmed this route will return a 200 status code.\n     *\n     * @param {string} userId - User ID.\n     * @param {string} secret - Valid verification token.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePhoneVerification(userId: string, secret: string): Promise<Models.Token>;\n    updatePhoneVerification(\n        paramsOrFirst: { userId: string, secret: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Token> {\n        let params: { userId: string, secret: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, secret: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                secret: rest[0] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const secret = params.secret;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/account/verification/phone';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n", "import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\nimport { Browser } from '../enums/browser';\nimport { CreditCard } from '../enums/credit-card';\nimport { Flag } from '../enums/flag';\n\nexport class Avatars {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user [GET /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions) endpoint. Use width, height and quality arguments to change the output settings.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n     *\n     * @param {Browser} params.code - Browser Code.\n     * @param {number} params.width - Image width. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {number} params.height - Image height. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {number} params.quality - Image quality. Pass an integer between 0 to 100. Defaults to keep existing image quality.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    getBrowser(params: { code: Browser, width?: number, height?: number, quality?: number  }): Promise<ArrayBuffer>;\n    /**\n     * You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user [GET /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions) endpoint. Use width, height and quality arguments to change the output settings.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n     *\n     * @param {Browser} code - Browser Code.\n     * @param {number} width - Image width. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {number} height - Image height. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {number} quality - Image quality. Pass an integer between 0 to 100. Defaults to keep existing image quality.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getBrowser(code: Browser, width?: number, height?: number, quality?: number): Promise<ArrayBuffer>;\n    getBrowser(\n        paramsOrFirst: { code: Browser, width?: number, height?: number, quality?: number } | Browser,\n        ...rest: [(number)?, (number)?, (number)?]    \n    ): Promise<ArrayBuffer> {\n        let params: { code: Browser, width?: number, height?: number, quality?: number };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'code' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { code: Browser, width?: number, height?: number, quality?: number };\n        } else {\n            params = {\n                code: paramsOrFirst as Browser,\n                width: rest[0] as number,\n                height: rest[1] as number,\n                quality: rest[2] as number            \n            };\n        }\n        \n        const code = params.code;\n        const width = params.width;\n        const height = params.height;\n        const quality = params.quality;\n\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n        const apiPath = '/avatars/browsers/{code}'.replace('{code}', code);\n        const payload: Payload = {};\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n\n    /**\n     * The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n     * \n     *\n     * @param {CreditCard} params.code - Credit Card Code. Possible values: amex, argencard, cabal, cencosud, diners, discover, elo, hipercard, jcb, mastercard, naranja, targeta-shopping, unionpay, visa, mir, maestro, rupay.\n     * @param {number} params.width - Image width. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {number} params.height - Image height. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {number} params.quality - Image quality. Pass an integer between 0 to 100. Defaults to keep existing image quality.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    getCreditCard(params: { code: CreditCard, width?: number, height?: number, quality?: number  }): Promise<ArrayBuffer>;\n    /**\n     * The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n     * \n     *\n     * @param {CreditCard} code - Credit Card Code. Possible values: amex, argencard, cabal, cencosud, diners, discover, elo, hipercard, jcb, mastercard, naranja, targeta-shopping, unionpay, visa, mir, maestro, rupay.\n     * @param {number} width - Image width. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {number} height - Image height. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {number} quality - Image quality. Pass an integer between 0 to 100. Defaults to keep existing image quality.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getCreditCard(code: CreditCard, width?: number, height?: number, quality?: number): Promise<ArrayBuffer>;\n    getCreditCard(\n        paramsOrFirst: { code: CreditCard, width?: number, height?: number, quality?: number } | CreditCard,\n        ...rest: [(number)?, (number)?, (number)?]    \n    ): Promise<ArrayBuffer> {\n        let params: { code: CreditCard, width?: number, height?: number, quality?: number };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'code' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { code: CreditCard, width?: number, height?: number, quality?: number };\n        } else {\n            params = {\n                code: paramsOrFirst as CreditCard,\n                width: rest[0] as number,\n                height: rest[1] as number,\n                quality: rest[2] as number            \n            };\n        }\n        \n        const code = params.code;\n        const width = params.width;\n        const height = params.height;\n        const quality = params.quality;\n\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n        const apiPath = '/avatars/credit-cards/{code}'.replace('{code}', code);\n        const payload: Payload = {};\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n\n    /**\n     * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL.\n     * \n     * This endpoint does not follow HTTP redirects.\n     *\n     * @param {string} params.url - Website URL which you want to fetch the favicon from.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    getFavicon(params: { url: string  }): Promise<ArrayBuffer>;\n    /**\n     * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL.\n     * \n     * This endpoint does not follow HTTP redirects.\n     *\n     * @param {string} url - Website URL which you want to fetch the favicon from.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getFavicon(url: string): Promise<ArrayBuffer>;\n    getFavicon(\n        paramsOrFirst: { url: string } | string    \n    ): Promise<ArrayBuffer> {\n        let params: { url: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { url: string };\n        } else {\n            params = {\n                url: paramsOrFirst as string            \n            };\n        }\n        \n        const url = params.url;\n\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n        const apiPath = '/avatars/favicon';\n        const payload: Payload = {};\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n\n    /**\n     * You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings. Country codes follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n     * \n     *\n     * @param {Flag} params.code - Country Code. ISO Alpha-2 country code format.\n     * @param {number} params.width - Image width. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {number} params.height - Image height. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {number} params.quality - Image quality. Pass an integer between 0 to 100. Defaults to keep existing image quality.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    getFlag(params: { code: Flag, width?: number, height?: number, quality?: number  }): Promise<ArrayBuffer>;\n    /**\n     * You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings. Country codes follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n     * \n     *\n     * @param {Flag} code - Country Code. ISO Alpha-2 country code format.\n     * @param {number} width - Image width. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {number} height - Image height. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {number} quality - Image quality. Pass an integer between 0 to 100. Defaults to keep existing image quality.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getFlag(code: Flag, width?: number, height?: number, quality?: number): Promise<ArrayBuffer>;\n    getFlag(\n        paramsOrFirst: { code: Flag, width?: number, height?: number, quality?: number } | Flag,\n        ...rest: [(number)?, (number)?, (number)?]    \n    ): Promise<ArrayBuffer> {\n        let params: { code: Flag, width?: number, height?: number, quality?: number };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'code' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { code: Flag, width?: number, height?: number, quality?: number };\n        } else {\n            params = {\n                code: paramsOrFirst as Flag,\n                width: rest[0] as number,\n                height: rest[1] as number,\n                quality: rest[2] as number            \n            };\n        }\n        \n        const code = params.code;\n        const width = params.width;\n        const height = params.height;\n        const quality = params.quality;\n\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n        const apiPath = '/avatars/flags/{code}'.replace('{code}', code);\n        const payload: Payload = {};\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n\n    /**\n     * Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 400x400px.\n     * \n     * This endpoint does not follow HTTP redirects.\n     *\n     * @param {string} params.url - Image URL which you want to crop.\n     * @param {number} params.width - Resize preview image width, Pass an integer between 0 to 2000. Defaults to 400.\n     * @param {number} params.height - Resize preview image height, Pass an integer between 0 to 2000. Defaults to 400.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    getImage(params: { url: string, width?: number, height?: number  }): Promise<ArrayBuffer>;\n    /**\n     * Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 400x400px.\n     * \n     * This endpoint does not follow HTTP redirects.\n     *\n     * @param {string} url - Image URL which you want to crop.\n     * @param {number} width - Resize preview image width, Pass an integer between 0 to 2000. Defaults to 400.\n     * @param {number} height - Resize preview image height, Pass an integer between 0 to 2000. Defaults to 400.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getImage(url: string, width?: number, height?: number): Promise<ArrayBuffer>;\n    getImage(\n        paramsOrFirst: { url: string, width?: number, height?: number } | string,\n        ...rest: [(number)?, (number)?]    \n    ): Promise<ArrayBuffer> {\n        let params: { url: string, width?: number, height?: number };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { url: string, width?: number, height?: number };\n        } else {\n            params = {\n                url: paramsOrFirst as string,\n                width: rest[0] as number,\n                height: rest[1] as number            \n            };\n        }\n        \n        const url = params.url;\n        const width = params.width;\n        const height = params.height;\n\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n        const apiPath = '/avatars/image';\n        const payload: Payload = {};\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n\n    /**\n     * Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the 'name' parameter. If no name is given and no user is logged, an empty avatar will be returned.\n     * \n     * You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user's initials when reloading the same theme will always return for the same initials.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n     * \n     *\n     * @param {string} params.name - Full Name. When empty, current user name or email will be used. Max length: 128 chars.\n     * @param {number} params.width - Image width. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {number} params.height - Image height. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {string} params.background - Changes background color. By default a random color will be picked and stay will persistent to the given name.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    getInitials(params?: { name?: string, width?: number, height?: number, background?: string  }): Promise<ArrayBuffer>;\n    /**\n     * Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the 'name' parameter. If no name is given and no user is logged, an empty avatar will be returned.\n     * \n     * You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user's initials when reloading the same theme will always return for the same initials.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n     * \n     *\n     * @param {string} name - Full Name. When empty, current user name or email will be used. Max length: 128 chars.\n     * @param {number} width - Image width. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {number} height - Image height. Pass an integer between 0 to 2000. Defaults to 100.\n     * @param {string} background - Changes background color. By default a random color will be picked and stay will persistent to the given name.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getInitials(name?: string, width?: number, height?: number, background?: string): Promise<ArrayBuffer>;\n    getInitials(\n        paramsOrFirst?: { name?: string, width?: number, height?: number, background?: string } | string,\n        ...rest: [(number)?, (number)?, (string)?]    \n    ): Promise<ArrayBuffer> {\n        let params: { name?: string, width?: number, height?: number, background?: string };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { name?: string, width?: number, height?: number, background?: string };\n        } else {\n            params = {\n                name: paramsOrFirst as string,\n                width: rest[0] as number,\n                height: rest[1] as number,\n                background: rest[2] as string            \n            };\n        }\n        \n        const name = params.name;\n        const width = params.width;\n        const height = params.height;\n        const background = params.background;\n\n\n        const apiPath = '/avatars/initials';\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n        if (typeof background !== 'undefined') {\n            payload['background'] = background;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n\n    /**\n     * Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image.\n     * \n     *\n     * @param {string} params.text - Plain text to be converted to QR code image.\n     * @param {number} params.size - QR code size. Pass an integer between 1 to 1000. Defaults to 400.\n     * @param {number} params.margin - Margin from edge. Pass an integer between 0 to 10. Defaults to 1.\n     * @param {boolean} params.download - Return resulting image with 'Content-Disposition: attachment ' headers for the browser to start downloading it. Pass 0 for no header, or 1 for otherwise. Default value is set to 0.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    getQR(params: { text: string, size?: number, margin?: number, download?: boolean  }): Promise<ArrayBuffer>;\n    /**\n     * Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image.\n     * \n     *\n     * @param {string} text - Plain text to be converted to QR code image.\n     * @param {number} size - QR code size. Pass an integer between 1 to 1000. Defaults to 400.\n     * @param {number} margin - Margin from edge. Pass an integer between 0 to 10. Defaults to 1.\n     * @param {boolean} download - Return resulting image with 'Content-Disposition: attachment ' headers for the browser to start downloading it. Pass 0 for no header, or 1 for otherwise. Default value is set to 0.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQR(text: string, size?: number, margin?: number, download?: boolean): Promise<ArrayBuffer>;\n    getQR(\n        paramsOrFirst: { text: string, size?: number, margin?: number, download?: boolean } | string,\n        ...rest: [(number)?, (number)?, (boolean)?]    \n    ): Promise<ArrayBuffer> {\n        let params: { text: string, size?: number, margin?: number, download?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { text: string, size?: number, margin?: number, download?: boolean };\n        } else {\n            params = {\n                text: paramsOrFirst as string,\n                size: rest[0] as number,\n                margin: rest[1] as number,\n                download: rest[2] as boolean            \n            };\n        }\n        \n        const text = params.text;\n        const size = params.size;\n        const margin = params.margin;\n        const download = params.download;\n\n        if (typeof text === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"text\"');\n        }\n\n        const apiPath = '/avatars/qr';\n        const payload: Payload = {};\n        if (typeof text !== 'undefined') {\n            payload['text'] = text;\n        }\n        if (typeof size !== 'undefined') {\n            payload['size'] = size;\n        }\n        if (typeof margin !== 'undefined') {\n            payload['margin'] = margin;\n        }\n        if (typeof download !== 'undefined') {\n            payload['download'] = download;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n}\n", "import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\nimport { RelationshipType } from '../enums/relationship-type';\nimport { RelationMutate } from '../enums/relation-mutate';\nimport { IndexType } from '../enums/index-type';\n\nexport class Databases {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Get a list of all databases from the current Appwrite project. You can use the search parameter to filter your results.\n     *\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DatabaseList>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.list` instead.\n     */\n    list(params?: { queries?: string[], search?: string  }): Promise<Models.DatabaseList>;\n    /**\n     * Get a list of all databases from the current Appwrite project. You can use the search parameter to filter your results.\n     *\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DatabaseList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    list(queries?: string[], search?: string): Promise<Models.DatabaseList>;\n    list(\n        paramsOrFirst?: { queries?: string[], search?: string } | string[],\n        ...rest: [(string)?]    \n    ): Promise<Models.DatabaseList> {\n        let params: { queries?: string[], search?: string };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { queries?: string[], search?: string };\n        } else {\n            params = {\n                queries: paramsOrFirst as string[],\n                search: rest[0] as string            \n            };\n        }\n        \n        const queries = params.queries;\n        const search = params.search;\n\n\n        const apiPath = '/databases';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Database.\n     * \n     *\n     * @param {string} params.databaseId - Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Database name. Max length: 128 chars.\n     * @param {boolean} params.enabled - Is the database enabled? When set to 'disabled', users cannot access the database but Server SDKs with an API key can still read and write to the database. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.create` instead.\n     */\n    create(params: { databaseId: string, name: string, enabled?: boolean  }): Promise<Models.Database>;\n    /**\n     * Create a new Database.\n     * \n     *\n     * @param {string} databaseId - Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Database name. Max length: 128 chars.\n     * @param {boolean} enabled - Is the database enabled? When set to 'disabled', users cannot access the database but Server SDKs with an API key can still read and write to the database. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    create(databaseId: string, name: string, enabled?: boolean): Promise<Models.Database>;\n    create(\n        paramsOrFirst: { databaseId: string, name: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (boolean)?]    \n    ): Promise<Models.Database> {\n        let params: { databaseId: string, name: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, name: string, enabled?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                name: rest[0] as string,\n                enabled: rest[1] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const name = params.name;\n        const enabled = params.enabled;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/databases';\n        const payload: Payload = {};\n        if (typeof databaseId !== 'undefined') {\n            payload['databaseId'] = databaseId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a database by its unique ID. This endpoint response returns a JSON object with the database metadata.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.get` instead.\n     */\n    get(params: { databaseId: string  }): Promise<Models.Database>;\n    /**\n     * Get a database by its unique ID. This endpoint response returns a JSON object with the database metadata.\n     *\n     * @param {string} databaseId - Database ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    get(databaseId: string): Promise<Models.Database>;\n    get(\n        paramsOrFirst: { databaseId: string } | string    \n    ): Promise<Models.Database> {\n        let params: { databaseId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a database by its unique ID.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.name - Database name. Max length: 128 chars.\n     * @param {boolean} params.enabled - Is database enabled? When set to 'disabled', users cannot access the database but Server SDKs with an API key can still read and write to the database. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.update` instead.\n     */\n    update(params: { databaseId: string, name: string, enabled?: boolean  }): Promise<Models.Database>;\n    /**\n     * Update a database by its unique ID.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} name - Database name. Max length: 128 chars.\n     * @param {boolean} enabled - Is database enabled? When set to 'disabled', users cannot access the database but Server SDKs with an API key can still read and write to the database. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    update(databaseId: string, name: string, enabled?: boolean): Promise<Models.Database>;\n    update(\n        paramsOrFirst: { databaseId: string, name: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (boolean)?]    \n    ): Promise<Models.Database> {\n        let params: { databaseId: string, name: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, name: string, enabled?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                name: rest[0] as string,\n                enabled: rest[1] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const name = params.name;\n        const enabled = params.enabled;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/databases/{databaseId}'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a database by its unique ID. Only API keys with with databases.write scope can delete a database.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.delete` instead.\n     */\n    delete(params: { databaseId: string  }): Promise<{}>;\n    /**\n     * Delete a database by its unique ID. Only API keys with with databases.write scope can delete a database.\n     *\n     * @param {string} databaseId - Database ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    delete(databaseId: string): Promise<{}>;\n    delete(\n        paramsOrFirst: { databaseId: string } | string    \n    ): Promise<{}> {\n        let params: { databaseId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all collections that belong to the provided databaseId. You can use the search parameter to filter your results.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, enabled, documentSecurity\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.CollectionList>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.listTables` instead.\n     */\n    listCollections(params: { databaseId: string, queries?: string[], search?: string  }): Promise<Models.CollectionList>;\n    /**\n     * Get a list of all collections that belong to the provided databaseId. You can use the search parameter to filter your results.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, enabled, documentSecurity\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.CollectionList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listCollections(databaseId: string, queries?: string[], search?: string): Promise<Models.CollectionList>;\n    listCollections(\n        paramsOrFirst: { databaseId: string, queries?: string[], search?: string } | string,\n        ...rest: [(string[])?, (string)?]    \n    ): Promise<Models.CollectionList> {\n        let params: { databaseId: string, queries?: string[], search?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, queries?: string[], search?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                queries: rest[0] as string[],\n                search: rest[1] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const queries = params.queries;\n        const search = params.search;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Collection. Before using this route, you should create a new database resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Collection name. Max length: 128 chars.\n     * @param {string[]} params.permissions - An array of permissions strings. By default, no user is granted with any permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} params.documentSecurity - Enables configuring permissions for individual documents. A user needs one of document or collection level permissions to access a document. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} params.enabled - Is collection enabled? When set to 'disabled', users cannot access the collection but Server SDKs with and API key can still read and write to the collection. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Collection>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createTable` instead.\n     */\n    createCollection(params: { databaseId: string, collectionId: string, name: string, permissions?: string[], documentSecurity?: boolean, enabled?: boolean  }): Promise<Models.Collection>;\n    /**\n     * Create a new Collection. Before using this route, you should create a new database resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Collection name. Max length: 128 chars.\n     * @param {string[]} permissions - An array of permissions strings. By default, no user is granted with any permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} documentSecurity - Enables configuring permissions for individual documents. A user needs one of document or collection level permissions to access a document. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} enabled - Is collection enabled? When set to 'disabled', users cannot access the collection but Server SDKs with and API key can still read and write to the collection. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Collection>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createCollection(databaseId: string, collectionId: string, name: string, permissions?: string[], documentSecurity?: boolean, enabled?: boolean): Promise<Models.Collection>;\n    createCollection(\n        paramsOrFirst: { databaseId: string, collectionId: string, name: string, permissions?: string[], documentSecurity?: boolean, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string[])?, (boolean)?, (boolean)?]    \n    ): Promise<Models.Collection> {\n        let params: { databaseId: string, collectionId: string, name: string, permissions?: string[], documentSecurity?: boolean, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, name: string, permissions?: string[], documentSecurity?: boolean, enabled?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                name: rest[1] as string,\n                permissions: rest[2] as string[],\n                documentSecurity: rest[3] as boolean,\n                enabled: rest[4] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const name = params.name;\n        const permissions = params.permissions;\n        const documentSecurity = params.documentSecurity;\n        const enabled = params.enabled;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        if (typeof collectionId !== 'undefined') {\n            payload['collectionId'] = collectionId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        if (typeof documentSecurity !== 'undefined') {\n            payload['documentSecurity'] = documentSecurity;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Collection>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.getTable` instead.\n     */\n    getCollection(params: { databaseId: string, collectionId: string  }): Promise<Models.Collection>;\n    /**\n     * Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Collection>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getCollection(databaseId: string, collectionId: string): Promise<Models.Collection>;\n    getCollection(\n        paramsOrFirst: { databaseId: string, collectionId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Collection> {\n        let params: { databaseId: string, collectionId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a collection by its unique ID.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.name - Collection name. Max length: 128 chars.\n     * @param {string[]} params.permissions - An array of permission strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} params.documentSecurity - Enables configuring permissions for individual documents. A user needs one of document or collection level permissions to access a document. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} params.enabled - Is collection enabled? When set to 'disabled', users cannot access the collection but Server SDKs with and API key can still read and write to the collection. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Collection>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updateTable` instead.\n     */\n    updateCollection(params: { databaseId: string, collectionId: string, name: string, permissions?: string[], documentSecurity?: boolean, enabled?: boolean  }): Promise<Models.Collection>;\n    /**\n     * Update a collection by its unique ID.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} name - Collection name. Max length: 128 chars.\n     * @param {string[]} permissions - An array of permission strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} documentSecurity - Enables configuring permissions for individual documents. A user needs one of document or collection level permissions to access a document. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} enabled - Is collection enabled? When set to 'disabled', users cannot access the collection but Server SDKs with and API key can still read and write to the collection. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Collection>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateCollection(databaseId: string, collectionId: string, name: string, permissions?: string[], documentSecurity?: boolean, enabled?: boolean): Promise<Models.Collection>;\n    updateCollection(\n        paramsOrFirst: { databaseId: string, collectionId: string, name: string, permissions?: string[], documentSecurity?: boolean, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string[])?, (boolean)?, (boolean)?]    \n    ): Promise<Models.Collection> {\n        let params: { databaseId: string, collectionId: string, name: string, permissions?: string[], documentSecurity?: boolean, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, name: string, permissions?: string[], documentSecurity?: boolean, enabled?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                name: rest[1] as string,\n                permissions: rest[2] as string[],\n                documentSecurity: rest[3] as boolean,\n                enabled: rest[4] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const name = params.name;\n        const permissions = params.permissions;\n        const documentSecurity = params.documentSecurity;\n        const enabled = params.enabled;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        if (typeof documentSecurity !== 'undefined') {\n            payload['documentSecurity'] = documentSecurity;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.deleteTable` instead.\n     */\n    deleteCollection(params: { databaseId: string, collectionId: string  }): Promise<{}>;\n    /**\n     * Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteCollection(databaseId: string, collectionId: string): Promise<{}>;\n    deleteCollection(\n        paramsOrFirst: { databaseId: string, collectionId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<{}> {\n        let params: { databaseId: string, collectionId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List attributes in the collection.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: key, type, size, required, array, status, error\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeList>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.listColumns` instead.\n     */\n    listAttributes(params: { databaseId: string, collectionId: string, queries?: string[]  }): Promise<Models.AttributeList>;\n    /**\n     * List attributes in the collection.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: key, type, size, required, array, status, error\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listAttributes(databaseId: string, collectionId: string, queries?: string[]): Promise<Models.AttributeList>;\n    listAttributes(\n        paramsOrFirst: { databaseId: string, collectionId: string, queries?: string[] } | string,\n        ...rest: [(string)?, (string[])?]    \n    ): Promise<Models.AttributeList> {\n        let params: { databaseId: string, collectionId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, queries?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                queries: rest[1] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const queries = params.queries;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a boolean attribute.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {boolean} params.xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {boolean} params.array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeBoolean>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createBooleanColumn` instead.\n     */\n    createBooleanAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: boolean, array?: boolean  }): Promise<Models.AttributeBoolean>;\n    /**\n     * Create a boolean attribute.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {boolean} xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {boolean} array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeBoolean>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createBooleanAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: boolean, array?: boolean): Promise<Models.AttributeBoolean>;\n    createBooleanAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: boolean, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (boolean)?, (boolean)?]    \n    ): Promise<Models.AttributeBoolean> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: boolean, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: boolean, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as boolean,\n                array: rest[4] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/boolean'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a boolean attribute. Changing the `default` value will not update already existing documents.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#createCollection).\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {boolean} params.xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {string} params.newKey - New attribute key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeBoolean>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updateBooleanColumn` instead.\n     */\n    updateBooleanAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: boolean, newKey?: string  }): Promise<Models.AttributeBoolean>;\n    /**\n     * Update a boolean attribute. Changing the `default` value will not update already existing documents.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#createCollection).\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {boolean} xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {string} newKey - New attribute key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeBoolean>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateBooleanAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: boolean, newKey?: string): Promise<Models.AttributeBoolean>;\n    updateBooleanAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: boolean, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (boolean)?, (string)?]    \n    ): Promise<Models.AttributeBoolean> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: boolean, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: boolean, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as boolean,\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/boolean/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a date time attribute according to the ISO 8601 standard.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#createCollection).\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {string} params.xdefault - Default value for the attribute in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Cannot be set when attribute is required.\n     * @param {boolean} params.array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeDatetime>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createDatetimeColumn` instead.\n     */\n    createDatetimeAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean  }): Promise<Models.AttributeDatetime>;\n    /**\n     * Create a date time attribute according to the ISO 8601 standard.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#createCollection).\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {string} xdefault - Default value for the attribute in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Cannot be set when attribute is required.\n     * @param {boolean} array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeDatetime>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createDatetimeAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean): Promise<Models.AttributeDatetime>;\n    createDatetimeAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (boolean)?]    \n    ): Promise<Models.AttributeDatetime> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                array: rest[4] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/datetime'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a date time attribute. Changing the `default` value will not update already existing documents.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {string} params.xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {string} params.newKey - New attribute key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeDatetime>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updateDatetimeColumn` instead.\n     */\n    updateDatetimeAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string  }): Promise<Models.AttributeDatetime>;\n    /**\n     * Update a date time attribute. Changing the `default` value will not update already existing documents.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {string} xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {string} newKey - New attribute key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeDatetime>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateDatetimeAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string): Promise<Models.AttributeDatetime>;\n    updateDatetimeAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (string)?]    \n    ): Promise<Models.AttributeDatetime> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/datetime/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create an email attribute.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {string} params.xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {boolean} params.array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeEmail>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createEmailColumn` instead.\n     */\n    createEmailAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean  }): Promise<Models.AttributeEmail>;\n    /**\n     * Create an email attribute.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {string} xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {boolean} array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeEmail>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createEmailAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean): Promise<Models.AttributeEmail>;\n    createEmailAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (boolean)?]    \n    ): Promise<Models.AttributeEmail> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                array: rest[4] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/email'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update an email attribute. Changing the `default` value will not update already existing documents.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {string} params.xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {string} params.newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeEmail>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updateEmailColumn` instead.\n     */\n    updateEmailAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string  }): Promise<Models.AttributeEmail>;\n    /**\n     * Update an email attribute. Changing the `default` value will not update already existing documents.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {string} xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {string} newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeEmail>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateEmailAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string): Promise<Models.AttributeEmail>;\n    updateEmailAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (string)?]    \n    ): Promise<Models.AttributeEmail> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/email/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create an enum attribute. The `elements` param acts as a white-list of accepted values for this attribute. \n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @param {string[]} params.elements - Array of enum values.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {string} params.xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {boolean} params.array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeEnum>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createEnumColumn` instead.\n     */\n    createEnumAttribute(params: { databaseId: string, collectionId: string, key: string, elements: string[], required: boolean, xdefault?: string, array?: boolean  }): Promise<Models.AttributeEnum>;\n    /**\n     * Create an enum attribute. The `elements` param acts as a white-list of accepted values for this attribute. \n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @param {string[]} elements - Array of enum values.\n     * @param {boolean} required - Is attribute required?\n     * @param {string} xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {boolean} array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeEnum>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createEnumAttribute(databaseId: string, collectionId: string, key: string, elements: string[], required: boolean, xdefault?: string, array?: boolean): Promise<Models.AttributeEnum>;\n    createEnumAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, elements: string[], required: boolean, xdefault?: string, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string[])?, (boolean)?, (string)?, (boolean)?]    \n    ): Promise<Models.AttributeEnum> {\n        let params: { databaseId: string, collectionId: string, key: string, elements: string[], required: boolean, xdefault?: string, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, elements: string[], required: boolean, xdefault?: string, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                elements: rest[2] as string[],\n                required: rest[3] as boolean,\n                xdefault: rest[4] as string,\n                array: rest[5] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const elements = params.elements;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof elements === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"elements\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/enum'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof elements !== 'undefined') {\n            payload['elements'] = elements;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update an enum attribute. Changing the `default` value will not update already existing documents.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @param {string[]} params.elements - Updated list of enum values.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {string} params.xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {string} params.newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeEnum>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updateEnumColumn` instead.\n     */\n    updateEnumAttribute(params: { databaseId: string, collectionId: string, key: string, elements: string[], required: boolean, xdefault?: string, newKey?: string  }): Promise<Models.AttributeEnum>;\n    /**\n     * Update an enum attribute. Changing the `default` value will not update already existing documents.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @param {string[]} elements - Updated list of enum values.\n     * @param {boolean} required - Is attribute required?\n     * @param {string} xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {string} newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeEnum>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateEnumAttribute(databaseId: string, collectionId: string, key: string, elements: string[], required: boolean, xdefault?: string, newKey?: string): Promise<Models.AttributeEnum>;\n    updateEnumAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, elements: string[], required: boolean, xdefault?: string, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (string[])?, (boolean)?, (string)?, (string)?]    \n    ): Promise<Models.AttributeEnum> {\n        let params: { databaseId: string, collectionId: string, key: string, elements: string[], required: boolean, xdefault?: string, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, elements: string[], required: boolean, xdefault?: string, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                elements: rest[2] as string[],\n                required: rest[3] as boolean,\n                xdefault: rest[4] as string,\n                newKey: rest[5] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const elements = params.elements;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof elements === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"elements\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/enum/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof elements !== 'undefined') {\n            payload['elements'] = elements;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a float attribute. Optionally, minimum and maximum values can be provided.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {number} params.min - Minimum value.\n     * @param {number} params.max - Maximum value.\n     * @param {number} params.xdefault - Default value. Cannot be set when required.\n     * @param {boolean} params.array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeFloat>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createFloatColumn` instead.\n     */\n    createFloatAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean  }): Promise<Models.AttributeFloat>;\n    /**\n     * Create a float attribute. Optionally, minimum and maximum values can be provided.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {number} min - Minimum value.\n     * @param {number} max - Maximum value.\n     * @param {number} xdefault - Default value. Cannot be set when required.\n     * @param {boolean} array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeFloat>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createFloatAttribute(databaseId: string, collectionId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean): Promise<Models.AttributeFloat>;\n    createFloatAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (number)?, (number)?, (number)?, (boolean)?]    \n    ): Promise<Models.AttributeFloat> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                min: rest[3] as number,\n                max: rest[4] as number,\n                xdefault: rest[5] as number,\n                array: rest[6] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const min = params.min;\n        const max = params.max;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/float'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a float attribute. Changing the `default` value will not update already existing documents.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {number} params.xdefault - Default value. Cannot be set when required.\n     * @param {number} params.min - Minimum value.\n     * @param {number} params.max - Maximum value.\n     * @param {string} params.newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeFloat>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updateFloatColumn` instead.\n     */\n    updateFloatAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string  }): Promise<Models.AttributeFloat>;\n    /**\n     * Update a float attribute. Changing the `default` value will not update already existing documents.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {number} xdefault - Default value. Cannot be set when required.\n     * @param {number} min - Minimum value.\n     * @param {number} max - Maximum value.\n     * @param {string} newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeFloat>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateFloatAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string): Promise<Models.AttributeFloat>;\n    updateFloatAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (number)?, (number)?, (number)?, (string)?]    \n    ): Promise<Models.AttributeFloat> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as number,\n                min: rest[4] as number,\n                max: rest[5] as number,\n                newKey: rest[6] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const min = params.min;\n        const max = params.max;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/float/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create an integer attribute. Optionally, minimum and maximum values can be provided.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {number} params.min - Minimum value\n     * @param {number} params.max - Maximum value\n     * @param {number} params.xdefault - Default value. Cannot be set when attribute is required.\n     * @param {boolean} params.array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeInteger>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createIntegerColumn` instead.\n     */\n    createIntegerAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean  }): Promise<Models.AttributeInteger>;\n    /**\n     * Create an integer attribute. Optionally, minimum and maximum values can be provided.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {number} min - Minimum value\n     * @param {number} max - Maximum value\n     * @param {number} xdefault - Default value. Cannot be set when attribute is required.\n     * @param {boolean} array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeInteger>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createIntegerAttribute(databaseId: string, collectionId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean): Promise<Models.AttributeInteger>;\n    createIntegerAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (number)?, (number)?, (number)?, (boolean)?]    \n    ): Promise<Models.AttributeInteger> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                min: rest[3] as number,\n                max: rest[4] as number,\n                xdefault: rest[5] as number,\n                array: rest[6] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const min = params.min;\n        const max = params.max;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/integer'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update an integer attribute. Changing the `default` value will not update already existing documents.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {number} params.xdefault - Default value. Cannot be set when attribute is required.\n     * @param {number} params.min - Minimum value\n     * @param {number} params.max - Maximum value\n     * @param {string} params.newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeInteger>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updateIntegerColumn` instead.\n     */\n    updateIntegerAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string  }): Promise<Models.AttributeInteger>;\n    /**\n     * Update an integer attribute. Changing the `default` value will not update already existing documents.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {number} xdefault - Default value. Cannot be set when attribute is required.\n     * @param {number} min - Minimum value\n     * @param {number} max - Maximum value\n     * @param {string} newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeInteger>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateIntegerAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string): Promise<Models.AttributeInteger>;\n    updateIntegerAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (number)?, (number)?, (number)?, (string)?]    \n    ): Promise<Models.AttributeInteger> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as number,\n                min: rest[4] as number,\n                max: rest[5] as number,\n                newKey: rest[6] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const min = params.min;\n        const max = params.max;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/integer/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create IP address attribute.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {string} params.xdefault - Default value. Cannot be set when attribute is required.\n     * @param {boolean} params.array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeIp>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createIpColumn` instead.\n     */\n    createIpAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean  }): Promise<Models.AttributeIp>;\n    /**\n     * Create IP address attribute.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {string} xdefault - Default value. Cannot be set when attribute is required.\n     * @param {boolean} array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeIp>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createIpAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean): Promise<Models.AttributeIp>;\n    createIpAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (boolean)?]    \n    ): Promise<Models.AttributeIp> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                array: rest[4] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/ip'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update an ip attribute. Changing the `default` value will not update already existing documents.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {string} params.xdefault - Default value. Cannot be set when attribute is required.\n     * @param {string} params.newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeIp>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updateIpColumn` instead.\n     */\n    updateIpAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string  }): Promise<Models.AttributeIp>;\n    /**\n     * Update an ip attribute. Changing the `default` value will not update already existing documents.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {string} xdefault - Default value. Cannot be set when attribute is required.\n     * @param {string} newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeIp>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateIpAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string): Promise<Models.AttributeIp>;\n    updateIpAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (string)?]    \n    ): Promise<Models.AttributeIp> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/ip/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a geometric line attribute.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {any[]} params.xdefault - Default value for attribute when not provided, two-dimensional array of coordinate pairs, [[longitude, latitude], [longitude, latitude], …], listing the vertices of the line in order. Cannot be set when attribute is required.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeLine>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createLineColumn` instead.\n     */\n    createLineAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[]  }): Promise<Models.AttributeLine>;\n    /**\n     * Create a geometric line attribute.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {any[]} xdefault - Default value for attribute when not provided, two-dimensional array of coordinate pairs, [[longitude, latitude], [longitude, latitude], …], listing the vertices of the line in order. Cannot be set when attribute is required.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeLine>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createLineAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[]): Promise<Models.AttributeLine>;\n    createLineAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[] } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (any[])?]    \n    ): Promise<Models.AttributeLine> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as any[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/line'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a line attribute. Changing the `default` value will not update already existing documents.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#createCollection).\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {any[]} params.xdefault - Default value for attribute when not provided, two-dimensional array of coordinate pairs, [[longitude, latitude], [longitude, latitude], …], listing the vertices of the line in order. Cannot be set when attribute is required.\n     * @param {string} params.newKey - New attribute key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeLine>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updateLineColumn` instead.\n     */\n    updateLineAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string  }): Promise<Models.AttributeLine>;\n    /**\n     * Update a line attribute. Changing the `default` value will not update already existing documents.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#createCollection).\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {any[]} xdefault - Default value for attribute when not provided, two-dimensional array of coordinate pairs, [[longitude, latitude], [longitude, latitude], …], listing the vertices of the line in order. Cannot be set when attribute is required.\n     * @param {string} newKey - New attribute key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeLine>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateLineAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string): Promise<Models.AttributeLine>;\n    updateLineAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (any[])?, (string)?]    \n    ): Promise<Models.AttributeLine> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as any[],\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/line/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a geometric point attribute.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {any[]} params.xdefault - Default value for attribute when not provided, array of two numbers [longitude, latitude], representing a single coordinate. Cannot be set when attribute is required.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributePoint>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createPointColumn` instead.\n     */\n    createPointAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[]  }): Promise<Models.AttributePoint>;\n    /**\n     * Create a geometric point attribute.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {any[]} xdefault - Default value for attribute when not provided, array of two numbers [longitude, latitude], representing a single coordinate. Cannot be set when attribute is required.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributePoint>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createPointAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[]): Promise<Models.AttributePoint>;\n    createPointAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[] } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (any[])?]    \n    ): Promise<Models.AttributePoint> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as any[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/point'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a point attribute. Changing the `default` value will not update already existing documents.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#createCollection).\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {any[]} params.xdefault - Default value for attribute when not provided, array of two numbers [longitude, latitude], representing a single coordinate. Cannot be set when attribute is required.\n     * @param {string} params.newKey - New attribute key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributePoint>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updatePointColumn` instead.\n     */\n    updatePointAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string  }): Promise<Models.AttributePoint>;\n    /**\n     * Update a point attribute. Changing the `default` value will not update already existing documents.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#createCollection).\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {any[]} xdefault - Default value for attribute when not provided, array of two numbers [longitude, latitude], representing a single coordinate. Cannot be set when attribute is required.\n     * @param {string} newKey - New attribute key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributePoint>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePointAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string): Promise<Models.AttributePoint>;\n    updatePointAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (any[])?, (string)?]    \n    ): Promise<Models.AttributePoint> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as any[],\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/point/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a geometric polygon attribute.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {any[]} params.xdefault - Default value for attribute when not provided, three-dimensional array where the outer array holds one or more linear rings, [[[longitude, latitude], …], …], the first ring is the exterior boundary, any additional rings are interior holes, and each ring must start and end with the same coordinate pair. Cannot be set when attribute is required.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributePolygon>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createPolygonColumn` instead.\n     */\n    createPolygonAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[]  }): Promise<Models.AttributePolygon>;\n    /**\n     * Create a geometric polygon attribute.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {any[]} xdefault - Default value for attribute when not provided, three-dimensional array where the outer array holds one or more linear rings, [[[longitude, latitude], …], …], the first ring is the exterior boundary, any additional rings are interior holes, and each ring must start and end with the same coordinate pair. Cannot be set when attribute is required.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributePolygon>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createPolygonAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[]): Promise<Models.AttributePolygon>;\n    createPolygonAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[] } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (any[])?]    \n    ): Promise<Models.AttributePolygon> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as any[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/polygon'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a polygon attribute. Changing the `default` value will not update already existing documents.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#createCollection).\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {any[]} params.xdefault - Default value for attribute when not provided, three-dimensional array where the outer array holds one or more linear rings, [[[longitude, latitude], …], …], the first ring is the exterior boundary, any additional rings are interior holes, and each ring must start and end with the same coordinate pair. Cannot be set when attribute is required.\n     * @param {string} params.newKey - New attribute key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributePolygon>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updatePolygonColumn` instead.\n     */\n    updatePolygonAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string  }): Promise<Models.AttributePolygon>;\n    /**\n     * Update a polygon attribute. Changing the `default` value will not update already existing documents.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#createCollection).\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {any[]} xdefault - Default value for attribute when not provided, three-dimensional array where the outer array holds one or more linear rings, [[[longitude, latitude], …], …], the first ring is the exterior boundary, any additional rings are interior holes, and each ring must start and end with the same coordinate pair. Cannot be set when attribute is required.\n     * @param {string} newKey - New attribute key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributePolygon>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePolygonAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string): Promise<Models.AttributePolygon>;\n    updatePolygonAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (any[])?, (string)?]    \n    ): Promise<Models.AttributePolygon> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: any[], newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as any[],\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/polygon/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.relatedCollectionId - Related Collection ID.\n     * @param {RelationshipType} params.type - Relation type\n     * @param {boolean} params.twoWay - Is Two Way?\n     * @param {string} params.key - Attribute Key.\n     * @param {string} params.twoWayKey - Two Way Attribute Key.\n     * @param {RelationMutate} params.onDelete - Constraints option\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeRelationship>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createRelationshipColumn` instead.\n     */\n    createRelationshipAttribute(params: { databaseId: string, collectionId: string, relatedCollectionId: string, type: RelationshipType, twoWay?: boolean, key?: string, twoWayKey?: string, onDelete?: RelationMutate  }): Promise<Models.AttributeRelationship>;\n    /**\n     * Create relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} relatedCollectionId - Related Collection ID.\n     * @param {RelationshipType} type - Relation type\n     * @param {boolean} twoWay - Is Two Way?\n     * @param {string} key - Attribute Key.\n     * @param {string} twoWayKey - Two Way Attribute Key.\n     * @param {RelationMutate} onDelete - Constraints option\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeRelationship>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createRelationshipAttribute(databaseId: string, collectionId: string, relatedCollectionId: string, type: RelationshipType, twoWay?: boolean, key?: string, twoWayKey?: string, onDelete?: RelationMutate): Promise<Models.AttributeRelationship>;\n    createRelationshipAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, relatedCollectionId: string, type: RelationshipType, twoWay?: boolean, key?: string, twoWayKey?: string, onDelete?: RelationMutate } | string,\n        ...rest: [(string)?, (string)?, (RelationshipType)?, (boolean)?, (string)?, (string)?, (RelationMutate)?]    \n    ): Promise<Models.AttributeRelationship> {\n        let params: { databaseId: string, collectionId: string, relatedCollectionId: string, type: RelationshipType, twoWay?: boolean, key?: string, twoWayKey?: string, onDelete?: RelationMutate };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, relatedCollectionId: string, type: RelationshipType, twoWay?: boolean, key?: string, twoWayKey?: string, onDelete?: RelationMutate };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                relatedCollectionId: rest[1] as string,\n                type: rest[2] as RelationshipType,\n                twoWay: rest[3] as boolean,\n                key: rest[4] as string,\n                twoWayKey: rest[5] as string,\n                onDelete: rest[6] as RelationMutate            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const relatedCollectionId = params.relatedCollectionId;\n        const type = params.type;\n        const twoWay = params.twoWay;\n        const key = params.key;\n        const twoWayKey = params.twoWayKey;\n        const onDelete = params.onDelete;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof relatedCollectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"relatedCollectionId\"');\n        }\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/relationship'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof relatedCollectionId !== 'undefined') {\n            payload['relatedCollectionId'] = relatedCollectionId;\n        }\n        if (typeof type !== 'undefined') {\n            payload['type'] = type;\n        }\n        if (typeof twoWay !== 'undefined') {\n            payload['twoWay'] = twoWay;\n        }\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof twoWayKey !== 'undefined') {\n            payload['twoWayKey'] = twoWayKey;\n        }\n        if (typeof onDelete !== 'undefined') {\n            payload['onDelete'] = onDelete;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a string attribute.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} params.key - Attribute Key.\n     * @param {number} params.size - Attribute size for text attributes, in number of characters.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {string} params.xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {boolean} params.array - Is attribute an array?\n     * @param {boolean} params.encrypt - Toggle encryption for the attribute. Encryption enhances security by not storing any plain text values in the database. However, encrypted attributes cannot be queried.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeString>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createStringColumn` instead.\n     */\n    createStringAttribute(params: { databaseId: string, collectionId: string, key: string, size: number, required: boolean, xdefault?: string, array?: boolean, encrypt?: boolean  }): Promise<Models.AttributeString>;\n    /**\n     * Create a string attribute.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} key - Attribute Key.\n     * @param {number} size - Attribute size for text attributes, in number of characters.\n     * @param {boolean} required - Is attribute required?\n     * @param {string} xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {boolean} array - Is attribute an array?\n     * @param {boolean} encrypt - Toggle encryption for the attribute. Encryption enhances security by not storing any plain text values in the database. However, encrypted attributes cannot be queried.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeString>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createStringAttribute(databaseId: string, collectionId: string, key: string, size: number, required: boolean, xdefault?: string, array?: boolean, encrypt?: boolean): Promise<Models.AttributeString>;\n    createStringAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, size: number, required: boolean, xdefault?: string, array?: boolean, encrypt?: boolean } | string,\n        ...rest: [(string)?, (string)?, (number)?, (boolean)?, (string)?, (boolean)?, (boolean)?]    \n    ): Promise<Models.AttributeString> {\n        let params: { databaseId: string, collectionId: string, key: string, size: number, required: boolean, xdefault?: string, array?: boolean, encrypt?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, size: number, required: boolean, xdefault?: string, array?: boolean, encrypt?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                size: rest[2] as number,\n                required: rest[3] as boolean,\n                xdefault: rest[4] as string,\n                array: rest[5] as boolean,\n                encrypt: rest[6] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const size = params.size;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const array = params.array;\n        const encrypt = params.encrypt;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof size === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"size\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/string'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof size !== 'undefined') {\n            payload['size'] = size;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        if (typeof encrypt !== 'undefined') {\n            payload['encrypt'] = encrypt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a string attribute. Changing the `default` value will not update already existing documents.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {string} params.xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {number} params.size - Maximum size of the string attribute.\n     * @param {string} params.newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeString>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updateStringColumn` instead.\n     */\n    updateStringAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, size?: number, newKey?: string  }): Promise<Models.AttributeString>;\n    /**\n     * Update a string attribute. Changing the `default` value will not update already existing documents.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {string} xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {number} size - Maximum size of the string attribute.\n     * @param {string} newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeString>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateStringAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, size?: number, newKey?: string): Promise<Models.AttributeString>;\n    updateStringAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, size?: number, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (number)?, (string)?]    \n    ): Promise<Models.AttributeString> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, size?: number, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, size?: number, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                size: rest[4] as number,\n                newKey: rest[5] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const size = params.size;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/string/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof size !== 'undefined') {\n            payload['size'] = size;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a URL attribute.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {string} params.xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {boolean} params.array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeUrl>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createUrlColumn` instead.\n     */\n    createUrlAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean  }): Promise<Models.AttributeUrl>;\n    /**\n     * Create a URL attribute.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {string} xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {boolean} array - Is attribute an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeUrl>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createUrlAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean): Promise<Models.AttributeUrl>;\n    createUrlAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (boolean)?]    \n    ): Promise<Models.AttributeUrl> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                array: rest[4] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/url'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update an url attribute. Changing the `default` value will not update already existing documents.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @param {boolean} params.required - Is attribute required?\n     * @param {string} params.xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {string} params.newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeUrl>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updateUrlColumn` instead.\n     */\n    updateUrlAttribute(params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string  }): Promise<Models.AttributeUrl>;\n    /**\n     * Update an url attribute. Changing the `default` value will not update already existing documents.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @param {boolean} required - Is attribute required?\n     * @param {string} xdefault - Default value for attribute when not provided. Cannot be set when attribute is required.\n     * @param {string} newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeUrl>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateUrlAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string): Promise<Models.AttributeUrl>;\n    updateUrlAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (string)?]    \n    ): Promise<Models.AttributeUrl> {\n        let params: { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/url/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get attribute by ID.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.getColumn` instead.\n     */\n    getAttribute(params: { databaseId: string, collectionId: string, key: string  }): Promise<{}>;\n    /**\n     * Get attribute by ID.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getAttribute(databaseId: string, collectionId: string, key: string): Promise<{}>;\n    getAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<{}> {\n        let params: { databaseId: string, collectionId: string, key: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Deletes an attribute.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.deleteColumn` instead.\n     */\n    deleteAttribute(params: { databaseId: string, collectionId: string, key: string  }): Promise<{}>;\n    /**\n     * Deletes an attribute.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteAttribute(databaseId: string, collectionId: string, key: string): Promise<{}>;\n    deleteAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<{}> {\n        let params: { databaseId: string, collectionId: string, key: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.key - Attribute Key.\n     * @param {RelationMutate} params.onDelete - Constraints option\n     * @param {string} params.newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeRelationship>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updateRelationshipColumn` instead.\n     */\n    updateRelationshipAttribute(params: { databaseId: string, collectionId: string, key: string, onDelete?: RelationMutate, newKey?: string  }): Promise<Models.AttributeRelationship>;\n    /**\n     * Update relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} key - Attribute Key.\n     * @param {RelationMutate} onDelete - Constraints option\n     * @param {string} newKey - New Attribute Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeRelationship>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateRelationshipAttribute(databaseId: string, collectionId: string, key: string, onDelete?: RelationMutate, newKey?: string): Promise<Models.AttributeRelationship>;\n    updateRelationshipAttribute(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, onDelete?: RelationMutate, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (RelationMutate)?, (string)?]    \n    ): Promise<Models.AttributeRelationship> {\n        let params: { databaseId: string, collectionId: string, key: string, onDelete?: RelationMutate, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, onDelete?: RelationMutate, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                onDelete: rest[2] as RelationMutate,\n                newKey: rest[3] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const onDelete = params.onDelete;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/{key}/relationship'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof onDelete !== 'undefined') {\n            payload['onDelete'] = onDelete;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all the user's documents in a given collection. You can use the query params to filter your results.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DocumentList<Document>>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.listRows` instead.\n     */\n    listDocuments<Document extends Models.Document = Models.DefaultDocument>(params: { databaseId: string, collectionId: string, queries?: string[]  }): Promise<Models.DocumentList<Document>>;\n    /**\n     * Get a list of all the user's documents in a given collection. You can use the query params to filter your results.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DocumentList<Document>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listDocuments<Document extends Models.Document = Models.DefaultDocument>(databaseId: string, collectionId: string, queries?: string[]): Promise<Models.DocumentList<Document>>;\n    listDocuments<Document extends Models.Document = Models.DefaultDocument>(\n        paramsOrFirst: { databaseId: string, collectionId: string, queries?: string[] } | string,\n        ...rest: [(string)?, (string[])?]    \n    ): Promise<Models.DocumentList<Document>> {\n        let params: { databaseId: string, collectionId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, queries?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                queries: rest[1] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const queries = params.queries;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection). Make sure to define attributes before creating documents.\n     * @param {string} params.documentId - Document ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Omit<Document, keyof Models.Document>} params.data - Document data as JSON object.\n     * @param {string[]} params.permissions - An array of permissions strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createRow` instead.\n     */\n    createDocument<Document extends Models.Document = Models.DefaultDocument>(params: { databaseId: string, collectionId: string, documentId: string, data: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Omit<Document, keyof Models.Document>, permissions?: string[]  }): Promise<Document>;\n    /**\n     * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection). Make sure to define attributes before creating documents.\n     * @param {string} documentId - Document ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Omit<Document, keyof Models.Document>} data - Document data as JSON object.\n     * @param {string[]} permissions - An array of permissions strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createDocument<Document extends Models.Document = Models.DefaultDocument>(databaseId: string, collectionId: string, documentId: string, data: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Omit<Document, keyof Models.Document>, permissions?: string[]): Promise<Document>;\n    createDocument<Document extends Models.Document = Models.DefaultDocument>(\n        paramsOrFirst: { databaseId: string, collectionId: string, documentId: string, data: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Omit<Document, keyof Models.Document>, permissions?: string[] } | string,\n        ...rest: [(string)?, (string)?, (Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Omit<Document, keyof Models.Document>)?, (string[])?]    \n    ): Promise<Document> {\n        let params: { databaseId: string, collectionId: string, documentId: string, data: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Omit<Document, keyof Models.Document>, permissions?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, documentId: string, data: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Omit<Document, keyof Models.Document>, permissions?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                documentId: rest[1] as string,\n                data: rest[2] as Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Omit<Document, keyof Models.Document>,\n                permissions: rest[3] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const documentId = params.documentId;\n        const data = params.data;\n        const permissions = params.permissions;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        if (typeof data === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"data\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof documentId !== 'undefined') {\n            payload['documentId'] = documentId;\n        }\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create new Documents. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection). Make sure to define attributes before creating documents.\n     * @param {object[]} params.documents - Array of documents data as JSON objects.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DocumentList<Document>>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createRows` instead.\n     */\n    createDocuments<Document extends Models.Document = Models.DefaultDocument>(params: { databaseId: string, collectionId: string, documents: object[]  }): Promise<Models.DocumentList<Document>>;\n    /**\n     * Create new Documents. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection). Make sure to define attributes before creating documents.\n     * @param {object[]} documents - Array of documents data as JSON objects.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DocumentList<Document>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createDocuments<Document extends Models.Document = Models.DefaultDocument>(databaseId: string, collectionId: string, documents: object[]): Promise<Models.DocumentList<Document>>;\n    createDocuments<Document extends Models.Document = Models.DefaultDocument>(\n        paramsOrFirst: { databaseId: string, collectionId: string, documents: object[] } | string,\n        ...rest: [(string)?, (object[])?]    \n    ): Promise<Models.DocumentList<Document>> {\n        let params: { databaseId: string, collectionId: string, documents: object[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, documents: object[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                documents: rest[1] as object[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const documents = params.documents;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documents === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documents\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof documents !== 'undefined') {\n            payload['documents'] = documents;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create or update Documents. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {object[]} params.documents - Array of document data as JSON objects. May contain partial documents.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DocumentList<Document>>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.upsertRows` instead.\n     */\n    upsertDocuments<Document extends Models.Document = Models.DefaultDocument>(params: { databaseId: string, collectionId: string, documents: object[]  }): Promise<Models.DocumentList<Document>>;\n    /**\n     * Create or update Documents. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {object[]} documents - Array of document data as JSON objects. May contain partial documents.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DocumentList<Document>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    upsertDocuments<Document extends Models.Document = Models.DefaultDocument>(databaseId: string, collectionId: string, documents: object[]): Promise<Models.DocumentList<Document>>;\n    upsertDocuments<Document extends Models.Document = Models.DefaultDocument>(\n        paramsOrFirst: { databaseId: string, collectionId: string, documents: object[] } | string,\n        ...rest: [(string)?, (object[])?]    \n    ): Promise<Models.DocumentList<Document>> {\n        let params: { databaseId: string, collectionId: string, documents: object[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, documents: object[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                documents: rest[1] as object[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const documents = params.documents;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documents === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documents\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof documents !== 'undefined') {\n            payload['documents'] = documents;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update all documents that match your queries, if no queries are submitted then all documents are updated. You can pass only specific fields to be updated.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {object} params.data - Document data as JSON object. Include only attribute and value pairs to be updated.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DocumentList<Document>>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updateRows` instead.\n     */\n    updateDocuments<Document extends Models.Document = Models.DefaultDocument>(params: { databaseId: string, collectionId: string, data?: object, queries?: string[]  }): Promise<Models.DocumentList<Document>>;\n    /**\n     * Update all documents that match your queries, if no queries are submitted then all documents are updated. You can pass only specific fields to be updated.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {object} data - Document data as JSON object. Include only attribute and value pairs to be updated.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DocumentList<Document>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateDocuments<Document extends Models.Document = Models.DefaultDocument>(databaseId: string, collectionId: string, data?: object, queries?: string[]): Promise<Models.DocumentList<Document>>;\n    updateDocuments<Document extends Models.Document = Models.DefaultDocument>(\n        paramsOrFirst: { databaseId: string, collectionId: string, data?: object, queries?: string[] } | string,\n        ...rest: [(string)?, (object)?, (string[])?]    \n    ): Promise<Models.DocumentList<Document>> {\n        let params: { databaseId: string, collectionId: string, data?: object, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, data?: object, queries?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                data: rest[1] as object,\n                queries: rest[2] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const data = params.data;\n        const queries = params.queries;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Bulk delete documents using queries, if no queries are passed then all documents are deleted.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DocumentList<Document>>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.deleteRows` instead.\n     */\n    deleteDocuments<Document extends Models.Document = Models.DefaultDocument>(params: { databaseId: string, collectionId: string, queries?: string[]  }): Promise<Models.DocumentList<Document>>;\n    /**\n     * Bulk delete documents using queries, if no queries are passed then all documents are deleted.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DocumentList<Document>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteDocuments<Document extends Models.Document = Models.DefaultDocument>(databaseId: string, collectionId: string, queries?: string[]): Promise<Models.DocumentList<Document>>;\n    deleteDocuments<Document extends Models.Document = Models.DefaultDocument>(\n        paramsOrFirst: { databaseId: string, collectionId: string, queries?: string[] } | string,\n        ...rest: [(string)?, (string[])?]    \n    ): Promise<Models.DocumentList<Document>> {\n        let params: { databaseId: string, collectionId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, queries?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                queries: rest[1] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const queries = params.queries;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} params.documentId - Document ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.getRow` instead.\n     */\n    getDocument<Document extends Models.Document = Models.DefaultDocument>(params: { databaseId: string, collectionId: string, documentId: string, queries?: string[]  }): Promise<Document>;\n    /**\n     * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} documentId - Document ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getDocument<Document extends Models.Document = Models.DefaultDocument>(databaseId: string, collectionId: string, documentId: string, queries?: string[]): Promise<Document>;\n    getDocument<Document extends Models.Document = Models.DefaultDocument>(\n        paramsOrFirst: { databaseId: string, collectionId: string, documentId: string, queries?: string[] } | string,\n        ...rest: [(string)?, (string)?, (string[])?]    \n    ): Promise<Document> {\n        let params: { databaseId: string, collectionId: string, documentId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, documentId: string, queries?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                documentId: rest[1] as string,\n                queries: rest[2] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const documentId = params.documentId;\n        const queries = params.queries;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create or update a Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.documentId - Document ID.\n     * @param {Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>} params.data - Document data as JSON object. Include all required attributes of the document to be created or updated.\n     * @param {string[]} params.permissions - An array of permissions strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.upsertRow` instead.\n     */\n    upsertDocument<Document extends Models.Document = Models.DefaultDocument>(params: { databaseId: string, collectionId: string, documentId: string, data: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>, permissions?: string[]  }): Promise<Document>;\n    /**\n     * Create or update a Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} documentId - Document ID.\n     * @param {Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>} data - Document data as JSON object. Include all required attributes of the document to be created or updated.\n     * @param {string[]} permissions - An array of permissions strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    upsertDocument<Document extends Models.Document = Models.DefaultDocument>(databaseId: string, collectionId: string, documentId: string, data: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>, permissions?: string[]): Promise<Document>;\n    upsertDocument<Document extends Models.Document = Models.DefaultDocument>(\n        paramsOrFirst: { databaseId: string, collectionId: string, documentId: string, data: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>, permissions?: string[] } | string,\n        ...rest: [(string)?, (string)?, (Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>)?, (string[])?]    \n    ): Promise<Document> {\n        let params: { databaseId: string, collectionId: string, documentId: string, data: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>, permissions?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, documentId: string, data: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>, permissions?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                documentId: rest[1] as string,\n                data: rest[2] as Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>,\n                permissions: rest[3] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const documentId = params.documentId;\n        const data = params.data;\n        const permissions = params.permissions;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        if (typeof data === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"data\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        const payload: Payload = {};\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.documentId - Document ID.\n     * @param {Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>} params.data - Document data as JSON object. Include only attribute and value pairs to be updated.\n     * @param {string[]} params.permissions - An array of permissions strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.updateRow` instead.\n     */\n    updateDocument<Document extends Models.Document = Models.DefaultDocument>(params: { databaseId: string, collectionId: string, documentId: string, data?: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>, permissions?: string[]  }): Promise<Document>;\n    /**\n     * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} documentId - Document ID.\n     * @param {Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>} data - Document data as JSON object. Include only attribute and value pairs to be updated.\n     * @param {string[]} permissions - An array of permissions strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateDocument<Document extends Models.Document = Models.DefaultDocument>(databaseId: string, collectionId: string, documentId: string, data?: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>, permissions?: string[]): Promise<Document>;\n    updateDocument<Document extends Models.Document = Models.DefaultDocument>(\n        paramsOrFirst: { databaseId: string, collectionId: string, documentId: string, data?: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>, permissions?: string[] } | string,\n        ...rest: [(string)?, (string)?, (Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>)?, (string[])?]    \n    ): Promise<Document> {\n        let params: { databaseId: string, collectionId: string, documentId: string, data?: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>, permissions?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, documentId: string, data?: Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>, permissions?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                documentId: rest[1] as string,\n                data: rest[2] as Document extends Models.DefaultDocument ? Partial<Models.Document> & Record<string, any> : Partial<Models.Document> & Partial<Omit<Document, keyof Models.Document>>,\n                permissions: rest[3] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const documentId = params.documentId;\n        const data = params.data;\n        const permissions = params.permissions;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        const payload: Payload = {};\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a document by its unique ID.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} params.documentId - Document ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.deleteRow` instead.\n     */\n    deleteDocument(params: { databaseId: string, collectionId: string, documentId: string  }): Promise<{}>;\n    /**\n     * Delete a document by its unique ID.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} documentId - Document ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteDocument(databaseId: string, collectionId: string, documentId: string): Promise<{}>;\n    deleteDocument(\n        paramsOrFirst: { databaseId: string, collectionId: string, documentId: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<{}> {\n        let params: { databaseId: string, collectionId: string, documentId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, documentId: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                documentId: rest[1] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const documentId = params.documentId;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Decrement a specific attribute of a document by a given value.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.documentId - Document ID.\n     * @param {string} params.attribute - Attribute key.\n     * @param {number} params.value - Value to increment the attribute by. The value must be a number.\n     * @param {number} params.min - Minimum value for the attribute. If the current value is lesser than this value, an exception will be thrown.\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.decrementRowColumn` instead.\n     */\n    decrementDocumentAttribute<Document extends Models.Document = Models.DefaultDocument>(params: { databaseId: string, collectionId: string, documentId: string, attribute: string, value?: number, min?: number  }): Promise<Document>;\n    /**\n     * Decrement a specific attribute of a document by a given value.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} documentId - Document ID.\n     * @param {string} attribute - Attribute key.\n     * @param {number} value - Value to increment the attribute by. The value must be a number.\n     * @param {number} min - Minimum value for the attribute. If the current value is lesser than this value, an exception will be thrown.\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    decrementDocumentAttribute<Document extends Models.Document = Models.DefaultDocument>(databaseId: string, collectionId: string, documentId: string, attribute: string, value?: number, min?: number): Promise<Document>;\n    decrementDocumentAttribute<Document extends Models.Document = Models.DefaultDocument>(\n        paramsOrFirst: { databaseId: string, collectionId: string, documentId: string, attribute: string, value?: number, min?: number } | string,\n        ...rest: [(string)?, (string)?, (string)?, (number)?, (number)?]    \n    ): Promise<Document> {\n        let params: { databaseId: string, collectionId: string, documentId: string, attribute: string, value?: number, min?: number };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, documentId: string, attribute: string, value?: number, min?: number };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                documentId: rest[1] as string,\n                attribute: rest[2] as string,\n                value: rest[3] as number,\n                min: rest[4] as number            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const documentId = params.documentId;\n        const attribute = params.attribute;\n        const value = params.value;\n        const min = params.min;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        if (typeof attribute === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"attribute\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}/{attribute}/decrement'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId).replace('{attribute}', attribute);\n        const payload: Payload = {};\n        if (typeof value !== 'undefined') {\n            payload['value'] = value;\n        }\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Increment a specific attribute of a document by a given value.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID.\n     * @param {string} params.documentId - Document ID.\n     * @param {string} params.attribute - Attribute key.\n     * @param {number} params.value - Value to increment the attribute by. The value must be a number.\n     * @param {number} params.max - Maximum value for the attribute. If the current value is greater than this value, an error will be thrown.\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.incrementRowColumn` instead.\n     */\n    incrementDocumentAttribute<Document extends Models.Document = Models.DefaultDocument>(params: { databaseId: string, collectionId: string, documentId: string, attribute: string, value?: number, max?: number  }): Promise<Document>;\n    /**\n     * Increment a specific attribute of a document by a given value.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID.\n     * @param {string} documentId - Document ID.\n     * @param {string} attribute - Attribute key.\n     * @param {number} value - Value to increment the attribute by. The value must be a number.\n     * @param {number} max - Maximum value for the attribute. If the current value is greater than this value, an error will be thrown.\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    incrementDocumentAttribute<Document extends Models.Document = Models.DefaultDocument>(databaseId: string, collectionId: string, documentId: string, attribute: string, value?: number, max?: number): Promise<Document>;\n    incrementDocumentAttribute<Document extends Models.Document = Models.DefaultDocument>(\n        paramsOrFirst: { databaseId: string, collectionId: string, documentId: string, attribute: string, value?: number, max?: number } | string,\n        ...rest: [(string)?, (string)?, (string)?, (number)?, (number)?]    \n    ): Promise<Document> {\n        let params: { databaseId: string, collectionId: string, documentId: string, attribute: string, value?: number, max?: number };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, documentId: string, attribute: string, value?: number, max?: number };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                documentId: rest[1] as string,\n                attribute: rest[2] as string,\n                value: rest[3] as number,\n                max: rest[4] as number            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const documentId = params.documentId;\n        const attribute = params.attribute;\n        const value = params.value;\n        const max = params.max;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        if (typeof attribute === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"attribute\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}/{attribute}/increment'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId).replace('{attribute}', attribute);\n        const payload: Payload = {};\n        if (typeof value !== 'undefined') {\n            payload['value'] = value;\n        }\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List indexes in the collection.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: key, type, status, attributes, error\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.IndexList>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.listIndexes` instead.\n     */\n    listIndexes(params: { databaseId: string, collectionId: string, queries?: string[]  }): Promise<Models.IndexList>;\n    /**\n     * List indexes in the collection.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: key, type, status, attributes, error\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.IndexList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listIndexes(databaseId: string, collectionId: string, queries?: string[]): Promise<Models.IndexList>;\n    listIndexes(\n        paramsOrFirst: { databaseId: string, collectionId: string, queries?: string[] } | string,\n        ...rest: [(string)?, (string[])?]    \n    ): Promise<Models.IndexList> {\n        let params: { databaseId: string, collectionId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, queries?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                queries: rest[1] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const queries = params.queries;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Creates an index on the attributes listed. Your index should include all the attributes you will query in a single request.\n     * Attributes can be `key`, `fulltext`, and `unique`.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} params.key - Index Key.\n     * @param {IndexType} params.type - Index type.\n     * @param {string[]} params.attributes - Array of attributes to index. Maximum of 100 attributes are allowed, each 32 characters long.\n     * @param {string[]} params.orders - Array of index orders. Maximum of 100 orders are allowed.\n     * @param {number[]} params.lengths - Length of index. Maximum of 100\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Index>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.createIndex` instead.\n     */\n    createIndex(params: { databaseId: string, collectionId: string, key: string, type: IndexType, attributes: string[], orders?: string[], lengths?: number[]  }): Promise<Models.Index>;\n    /**\n     * Creates an index on the attributes listed. Your index should include all the attributes you will query in a single request.\n     * Attributes can be `key`, `fulltext`, and `unique`.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} key - Index Key.\n     * @param {IndexType} type - Index type.\n     * @param {string[]} attributes - Array of attributes to index. Maximum of 100 attributes are allowed, each 32 characters long.\n     * @param {string[]} orders - Array of index orders. Maximum of 100 orders are allowed.\n     * @param {number[]} lengths - Length of index. Maximum of 100\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Index>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createIndex(databaseId: string, collectionId: string, key: string, type: IndexType, attributes: string[], orders?: string[], lengths?: number[]): Promise<Models.Index>;\n    createIndex(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string, type: IndexType, attributes: string[], orders?: string[], lengths?: number[] } | string,\n        ...rest: [(string)?, (string)?, (IndexType)?, (string[])?, (string[])?, (number[])?]    \n    ): Promise<Models.Index> {\n        let params: { databaseId: string, collectionId: string, key: string, type: IndexType, attributes: string[], orders?: string[], lengths?: number[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string, type: IndexType, attributes: string[], orders?: string[], lengths?: number[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string,\n                type: rest[2] as IndexType,\n                attributes: rest[3] as string[],\n                orders: rest[4] as string[],\n                lengths: rest[5] as number[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n        const type = params.type;\n        const attributes = params.attributes;\n        const orders = params.orders;\n        const lengths = params.lengths;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n        if (typeof attributes === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"attributes\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof type !== 'undefined') {\n            payload['type'] = type;\n        }\n        if (typeof attributes !== 'undefined') {\n            payload['attributes'] = attributes;\n        }\n        if (typeof orders !== 'undefined') {\n            payload['orders'] = orders;\n        }\n        if (typeof lengths !== 'undefined') {\n            payload['lengths'] = lengths;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get index by ID.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} params.key - Index Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Index>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.getIndex` instead.\n     */\n    getIndex(params: { databaseId: string, collectionId: string, key: string  }): Promise<Models.Index>;\n    /**\n     * Get index by ID.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} key - Index Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Index>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getIndex(databaseId: string, collectionId: string, key: string): Promise<Models.Index>;\n    getIndex(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<Models.Index> {\n        let params: { databaseId: string, collectionId: string, key: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete an index.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} params.key - Index Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `TablesDB.deleteIndex` instead.\n     */\n    deleteIndex(params: { databaseId: string, collectionId: string, key: string  }): Promise<{}>;\n    /**\n     * Delete an index.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} collectionId - Collection ID. You can create a new collection using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).\n     * @param {string} key - Index Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteIndex(databaseId: string, collectionId: string, key: string): Promise<{}>;\n    deleteIndex(\n        paramsOrFirst: { databaseId: string, collectionId: string, key: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<{}> {\n        let params: { databaseId: string, collectionId: string, key: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, collectionId: string, key: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                collectionId: rest[0] as string,\n                key: rest[1] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const collectionId = params.collectionId;\n        const key = params.key;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n", "import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\nimport { Runtime } from '../enums/runtime';\nimport { VCSDeploymentType } from '../enums/vcs-deployment-type';\nimport { DeploymentDownloadType } from '../enums/deployment-download-type';\nimport { ExecutionMethod } from '../enums/execution-method';\n\nexport class Functions {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Get a list of all the project's functions. You can use the query params to filter your results.\n     *\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, enabled, runtime, deploymentId, schedule, scheduleNext, schedulePrevious, timeout, entrypoint, commands, installationId\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.FunctionList>}\n     */\n    list(params?: { queries?: string[], search?: string  }): Promise<Models.FunctionList>;\n    /**\n     * Get a list of all the project's functions. You can use the query params to filter your results.\n     *\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, enabled, runtime, deploymentId, schedule, scheduleNext, schedulePrevious, timeout, entrypoint, commands, installationId\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.FunctionList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    list(queries?: string[], search?: string): Promise<Models.FunctionList>;\n    list(\n        paramsOrFirst?: { queries?: string[], search?: string } | string[],\n        ...rest: [(string)?]    \n    ): Promise<Models.FunctionList> {\n        let params: { queries?: string[], search?: string };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { queries?: string[], search?: string };\n        } else {\n            params = {\n                queries: paramsOrFirst as string[],\n                search: rest[0] as string            \n            };\n        }\n        \n        const queries = params.queries;\n        const search = params.search;\n\n\n        const apiPath = '/functions';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new function. You can pass a list of [permissions](https://appwrite.io/docs/permissions) to allow different project users or team with access to execute the function using the client API.\n     *\n     * @param {string} params.functionId - Function ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Function name. Max length: 128 chars.\n     * @param {Runtime} params.runtime - Execution runtime.\n     * @param {string[]} params.execute - An array of role strings with execution permissions. By default no user is granted with any execute permissions. [learn more about roles](https://appwrite.io/docs/permissions#permission-roles). Maximum of 100 roles are allowed, each 64 characters long.\n     * @param {string[]} params.events - Events list. Maximum of 100 events are allowed.\n     * @param {string} params.schedule - Schedule CRON syntax.\n     * @param {number} params.timeout - Function maximum execution time in seconds.\n     * @param {boolean} params.enabled - Is function enabled? When set to 'disabled', users cannot access the function but Server SDKs with and API key can still access the function. No data is lost when this is toggled.\n     * @param {boolean} params.logging - When disabled, executions will exclude logs and errors, and will be slightly faster.\n     * @param {string} params.entrypoint - Entrypoint File. This path is relative to the \"providerRootDirectory\".\n     * @param {string} params.commands - Build Commands.\n     * @param {string[]} params.scopes - List of scopes allowed for API key auto-generated for every execution. Maximum of 100 scopes are allowed.\n     * @param {string} params.installationId - Appwrite Installation ID for VCS (Version Control System) deployment.\n     * @param {string} params.providerRepositoryId - Repository ID of the repo linked to the function.\n     * @param {string} params.providerBranch - Production branch for the repo linked to the function.\n     * @param {boolean} params.providerSilentMode - Is the VCS (Version Control System) connection in silent mode for the repo linked to the function? In silent mode, comments will not be made on commits and pull requests.\n     * @param {string} params.providerRootDirectory - Path to function code in the linked repo.\n     * @param {string} params.specification - Runtime specification for the function and builds.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Function>}\n     */\n    create(params: { functionId: string, name: string, runtime: Runtime, execute?: string[], events?: string[], schedule?: string, timeout?: number, enabled?: boolean, logging?: boolean, entrypoint?: string, commands?: string, scopes?: string[], installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string  }): Promise<Models.Function>;\n    /**\n     * Create a new function. You can pass a list of [permissions](https://appwrite.io/docs/permissions) to allow different project users or team with access to execute the function using the client API.\n     *\n     * @param {string} functionId - Function ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Function name. Max length: 128 chars.\n     * @param {Runtime} runtime - Execution runtime.\n     * @param {string[]} execute - An array of role strings with execution permissions. By default no user is granted with any execute permissions. [learn more about roles](https://appwrite.io/docs/permissions#permission-roles). Maximum of 100 roles are allowed, each 64 characters long.\n     * @param {string[]} events - Events list. Maximum of 100 events are allowed.\n     * @param {string} schedule - Schedule CRON syntax.\n     * @param {number} timeout - Function maximum execution time in seconds.\n     * @param {boolean} enabled - Is function enabled? When set to 'disabled', users cannot access the function but Server SDKs with and API key can still access the function. No data is lost when this is toggled.\n     * @param {boolean} logging - When disabled, executions will exclude logs and errors, and will be slightly faster.\n     * @param {string} entrypoint - Entrypoint File. This path is relative to the \"providerRootDirectory\".\n     * @param {string} commands - Build Commands.\n     * @param {string[]} scopes - List of scopes allowed for API key auto-generated for every execution. Maximum of 100 scopes are allowed.\n     * @param {string} installationId - Appwrite Installation ID for VCS (Version Control System) deployment.\n     * @param {string} providerRepositoryId - Repository ID of the repo linked to the function.\n     * @param {string} providerBranch - Production branch for the repo linked to the function.\n     * @param {boolean} providerSilentMode - Is the VCS (Version Control System) connection in silent mode for the repo linked to the function? In silent mode, comments will not be made on commits and pull requests.\n     * @param {string} providerRootDirectory - Path to function code in the linked repo.\n     * @param {string} specification - Runtime specification for the function and builds.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Function>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    create(functionId: string, name: string, runtime: Runtime, execute?: string[], events?: string[], schedule?: string, timeout?: number, enabled?: boolean, logging?: boolean, entrypoint?: string, commands?: string, scopes?: string[], installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string): Promise<Models.Function>;\n    create(\n        paramsOrFirst: { functionId: string, name: string, runtime: Runtime, execute?: string[], events?: string[], schedule?: string, timeout?: number, enabled?: boolean, logging?: boolean, entrypoint?: string, commands?: string, scopes?: string[], installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string } | string,\n        ...rest: [(string)?, (Runtime)?, (string[])?, (string[])?, (string)?, (number)?, (boolean)?, (boolean)?, (string)?, (string)?, (string[])?, (string)?, (string)?, (string)?, (boolean)?, (string)?, (string)?]    \n    ): Promise<Models.Function> {\n        let params: { functionId: string, name: string, runtime: Runtime, execute?: string[], events?: string[], schedule?: string, timeout?: number, enabled?: boolean, logging?: boolean, entrypoint?: string, commands?: string, scopes?: string[], installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, name: string, runtime: Runtime, execute?: string[], events?: string[], schedule?: string, timeout?: number, enabled?: boolean, logging?: boolean, entrypoint?: string, commands?: string, scopes?: string[], installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                name: rest[0] as string,\n                runtime: rest[1] as Runtime,\n                execute: rest[2] as string[],\n                events: rest[3] as string[],\n                schedule: rest[4] as string,\n                timeout: rest[5] as number,\n                enabled: rest[6] as boolean,\n                logging: rest[7] as boolean,\n                entrypoint: rest[8] as string,\n                commands: rest[9] as string,\n                scopes: rest[10] as string[],\n                installationId: rest[11] as string,\n                providerRepositoryId: rest[12] as string,\n                providerBranch: rest[13] as string,\n                providerSilentMode: rest[14] as boolean,\n                providerRootDirectory: rest[15] as string,\n                specification: rest[16] as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const name = params.name;\n        const runtime = params.runtime;\n        const execute = params.execute;\n        const events = params.events;\n        const schedule = params.schedule;\n        const timeout = params.timeout;\n        const enabled = params.enabled;\n        const logging = params.logging;\n        const entrypoint = params.entrypoint;\n        const commands = params.commands;\n        const scopes = params.scopes;\n        const installationId = params.installationId;\n        const providerRepositoryId = params.providerRepositoryId;\n        const providerBranch = params.providerBranch;\n        const providerSilentMode = params.providerSilentMode;\n        const providerRootDirectory = params.providerRootDirectory;\n        const specification = params.specification;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof runtime === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"runtime\"');\n        }\n\n        const apiPath = '/functions';\n        const payload: Payload = {};\n        if (typeof functionId !== 'undefined') {\n            payload['functionId'] = functionId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof runtime !== 'undefined') {\n            payload['runtime'] = runtime;\n        }\n        if (typeof execute !== 'undefined') {\n            payload['execute'] = execute;\n        }\n        if (typeof events !== 'undefined') {\n            payload['events'] = events;\n        }\n        if (typeof schedule !== 'undefined') {\n            payload['schedule'] = schedule;\n        }\n        if (typeof timeout !== 'undefined') {\n            payload['timeout'] = timeout;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof logging !== 'undefined') {\n            payload['logging'] = logging;\n        }\n        if (typeof entrypoint !== 'undefined') {\n            payload['entrypoint'] = entrypoint;\n        }\n        if (typeof commands !== 'undefined') {\n            payload['commands'] = commands;\n        }\n        if (typeof scopes !== 'undefined') {\n            payload['scopes'] = scopes;\n        }\n        if (typeof installationId !== 'undefined') {\n            payload['installationId'] = installationId;\n        }\n        if (typeof providerRepositoryId !== 'undefined') {\n            payload['providerRepositoryId'] = providerRepositoryId;\n        }\n        if (typeof providerBranch !== 'undefined') {\n            payload['providerBranch'] = providerBranch;\n        }\n        if (typeof providerSilentMode !== 'undefined') {\n            payload['providerSilentMode'] = providerSilentMode;\n        }\n        if (typeof providerRootDirectory !== 'undefined') {\n            payload['providerRootDirectory'] = providerRootDirectory;\n        }\n        if (typeof specification !== 'undefined') {\n            payload['specification'] = specification;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all runtimes that are currently active on your instance.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.RuntimeList>}\n     */\n    listRuntimes(): Promise<Models.RuntimeList> {\n\n        const apiPath = '/functions/runtimes';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List allowed function specifications for this instance.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.SpecificationList>}\n     */\n    listSpecifications(): Promise<Models.SpecificationList> {\n\n        const apiPath = '/functions/specifications';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a function by its unique ID.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Function>}\n     */\n    get(params: { functionId: string  }): Promise<Models.Function>;\n    /**\n     * Get a function by its unique ID.\n     *\n     * @param {string} functionId - Function ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Function>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    get(functionId: string): Promise<Models.Function>;\n    get(\n        paramsOrFirst: { functionId: string } | string    \n    ): Promise<Models.Function> {\n        let params: { functionId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        const apiPath = '/functions/{functionId}'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update function by its unique ID.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {string} params.name - Function name. Max length: 128 chars.\n     * @param {Runtime} params.runtime - Execution runtime.\n     * @param {string[]} params.execute - An array of role strings with execution permissions. By default no user is granted with any execute permissions. [learn more about roles](https://appwrite.io/docs/permissions#permission-roles). Maximum of 100 roles are allowed, each 64 characters long.\n     * @param {string[]} params.events - Events list. Maximum of 100 events are allowed.\n     * @param {string} params.schedule - Schedule CRON syntax.\n     * @param {number} params.timeout - Maximum execution time in seconds.\n     * @param {boolean} params.enabled - Is function enabled? When set to 'disabled', users cannot access the function but Server SDKs with and API key can still access the function. No data is lost when this is toggled.\n     * @param {boolean} params.logging - When disabled, executions will exclude logs and errors, and will be slightly faster.\n     * @param {string} params.entrypoint - Entrypoint File. This path is relative to the \"providerRootDirectory\".\n     * @param {string} params.commands - Build Commands.\n     * @param {string[]} params.scopes - List of scopes allowed for API Key auto-generated for every execution. Maximum of 100 scopes are allowed.\n     * @param {string} params.installationId - Appwrite Installation ID for VCS (Version Controle System) deployment.\n     * @param {string} params.providerRepositoryId - Repository ID of the repo linked to the function\n     * @param {string} params.providerBranch - Production branch for the repo linked to the function\n     * @param {boolean} params.providerSilentMode - Is the VCS (Version Control System) connection in silent mode for the repo linked to the function? In silent mode, comments will not be made on commits and pull requests.\n     * @param {string} params.providerRootDirectory - Path to function code in the linked repo.\n     * @param {string} params.specification - Runtime specification for the function and builds.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Function>}\n     */\n    update(params: { functionId: string, name: string, runtime?: Runtime, execute?: string[], events?: string[], schedule?: string, timeout?: number, enabled?: boolean, logging?: boolean, entrypoint?: string, commands?: string, scopes?: string[], installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string  }): Promise<Models.Function>;\n    /**\n     * Update function by its unique ID.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {string} name - Function name. Max length: 128 chars.\n     * @param {Runtime} runtime - Execution runtime.\n     * @param {string[]} execute - An array of role strings with execution permissions. By default no user is granted with any execute permissions. [learn more about roles](https://appwrite.io/docs/permissions#permission-roles). Maximum of 100 roles are allowed, each 64 characters long.\n     * @param {string[]} events - Events list. Maximum of 100 events are allowed.\n     * @param {string} schedule - Schedule CRON syntax.\n     * @param {number} timeout - Maximum execution time in seconds.\n     * @param {boolean} enabled - Is function enabled? When set to 'disabled', users cannot access the function but Server SDKs with and API key can still access the function. No data is lost when this is toggled.\n     * @param {boolean} logging - When disabled, executions will exclude logs and errors, and will be slightly faster.\n     * @param {string} entrypoint - Entrypoint File. This path is relative to the \"providerRootDirectory\".\n     * @param {string} commands - Build Commands.\n     * @param {string[]} scopes - List of scopes allowed for API Key auto-generated for every execution. Maximum of 100 scopes are allowed.\n     * @param {string} installationId - Appwrite Installation ID for VCS (Version Controle System) deployment.\n     * @param {string} providerRepositoryId - Repository ID of the repo linked to the function\n     * @param {string} providerBranch - Production branch for the repo linked to the function\n     * @param {boolean} providerSilentMode - Is the VCS (Version Control System) connection in silent mode for the repo linked to the function? In silent mode, comments will not be made on commits and pull requests.\n     * @param {string} providerRootDirectory - Path to function code in the linked repo.\n     * @param {string} specification - Runtime specification for the function and builds.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Function>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    update(functionId: string, name: string, runtime?: Runtime, execute?: string[], events?: string[], schedule?: string, timeout?: number, enabled?: boolean, logging?: boolean, entrypoint?: string, commands?: string, scopes?: string[], installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string): Promise<Models.Function>;\n    update(\n        paramsOrFirst: { functionId: string, name: string, runtime?: Runtime, execute?: string[], events?: string[], schedule?: string, timeout?: number, enabled?: boolean, logging?: boolean, entrypoint?: string, commands?: string, scopes?: string[], installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string } | string,\n        ...rest: [(string)?, (Runtime)?, (string[])?, (string[])?, (string)?, (number)?, (boolean)?, (boolean)?, (string)?, (string)?, (string[])?, (string)?, (string)?, (string)?, (boolean)?, (string)?, (string)?]    \n    ): Promise<Models.Function> {\n        let params: { functionId: string, name: string, runtime?: Runtime, execute?: string[], events?: string[], schedule?: string, timeout?: number, enabled?: boolean, logging?: boolean, entrypoint?: string, commands?: string, scopes?: string[], installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, name: string, runtime?: Runtime, execute?: string[], events?: string[], schedule?: string, timeout?: number, enabled?: boolean, logging?: boolean, entrypoint?: string, commands?: string, scopes?: string[], installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                name: rest[0] as string,\n                runtime: rest[1] as Runtime,\n                execute: rest[2] as string[],\n                events: rest[3] as string[],\n                schedule: rest[4] as string,\n                timeout: rest[5] as number,\n                enabled: rest[6] as boolean,\n                logging: rest[7] as boolean,\n                entrypoint: rest[8] as string,\n                commands: rest[9] as string,\n                scopes: rest[10] as string[],\n                installationId: rest[11] as string,\n                providerRepositoryId: rest[12] as string,\n                providerBranch: rest[13] as string,\n                providerSilentMode: rest[14] as boolean,\n                providerRootDirectory: rest[15] as string,\n                specification: rest[16] as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const name = params.name;\n        const runtime = params.runtime;\n        const execute = params.execute;\n        const events = params.events;\n        const schedule = params.schedule;\n        const timeout = params.timeout;\n        const enabled = params.enabled;\n        const logging = params.logging;\n        const entrypoint = params.entrypoint;\n        const commands = params.commands;\n        const scopes = params.scopes;\n        const installationId = params.installationId;\n        const providerRepositoryId = params.providerRepositoryId;\n        const providerBranch = params.providerBranch;\n        const providerSilentMode = params.providerSilentMode;\n        const providerRootDirectory = params.providerRootDirectory;\n        const specification = params.specification;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/functions/{functionId}'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof runtime !== 'undefined') {\n            payload['runtime'] = runtime;\n        }\n        if (typeof execute !== 'undefined') {\n            payload['execute'] = execute;\n        }\n        if (typeof events !== 'undefined') {\n            payload['events'] = events;\n        }\n        if (typeof schedule !== 'undefined') {\n            payload['schedule'] = schedule;\n        }\n        if (typeof timeout !== 'undefined') {\n            payload['timeout'] = timeout;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof logging !== 'undefined') {\n            payload['logging'] = logging;\n        }\n        if (typeof entrypoint !== 'undefined') {\n            payload['entrypoint'] = entrypoint;\n        }\n        if (typeof commands !== 'undefined') {\n            payload['commands'] = commands;\n        }\n        if (typeof scopes !== 'undefined') {\n            payload['scopes'] = scopes;\n        }\n        if (typeof installationId !== 'undefined') {\n            payload['installationId'] = installationId;\n        }\n        if (typeof providerRepositoryId !== 'undefined') {\n            payload['providerRepositoryId'] = providerRepositoryId;\n        }\n        if (typeof providerBranch !== 'undefined') {\n            payload['providerBranch'] = providerBranch;\n        }\n        if (typeof providerSilentMode !== 'undefined') {\n            payload['providerSilentMode'] = providerSilentMode;\n        }\n        if (typeof providerRootDirectory !== 'undefined') {\n            payload['providerRootDirectory'] = providerRootDirectory;\n        }\n        if (typeof specification !== 'undefined') {\n            payload['specification'] = specification;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a function by its unique ID.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    delete(params: { functionId: string  }): Promise<{}>;\n    /**\n     * Delete a function by its unique ID.\n     *\n     * @param {string} functionId - Function ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    delete(functionId: string): Promise<{}>;\n    delete(\n        paramsOrFirst: { functionId: string } | string    \n    ): Promise<{}> {\n        let params: { functionId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        const apiPath = '/functions/{functionId}'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update the function active deployment. Use this endpoint to switch the code deployment that should be used when visitor opens your function.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {string} params.deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Function>}\n     */\n    updateFunctionDeployment(params: { functionId: string, deploymentId: string  }): Promise<Models.Function>;\n    /**\n     * Update the function active deployment. Use this endpoint to switch the code deployment that should be used when visitor opens your function.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {string} deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Function>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateFunctionDeployment(functionId: string, deploymentId: string): Promise<Models.Function>;\n    updateFunctionDeployment(\n        paramsOrFirst: { functionId: string, deploymentId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Function> {\n        let params: { functionId: string, deploymentId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, deploymentId: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                deploymentId: rest[0] as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const deploymentId = params.deploymentId;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/deployment'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof deploymentId !== 'undefined') {\n            payload['deploymentId'] = deploymentId;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all the function's code deployments. You can use the query params to filter your results.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: buildSize, sourceSize, totalSize, buildDuration, status, activate, type\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DeploymentList>}\n     */\n    listDeployments(params: { functionId: string, queries?: string[], search?: string  }): Promise<Models.DeploymentList>;\n    /**\n     * Get a list of all the function's code deployments. You can use the query params to filter your results.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: buildSize, sourceSize, totalSize, buildDuration, status, activate, type\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DeploymentList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listDeployments(functionId: string, queries?: string[], search?: string): Promise<Models.DeploymentList>;\n    listDeployments(\n        paramsOrFirst: { functionId: string, queries?: string[], search?: string } | string,\n        ...rest: [(string[])?, (string)?]    \n    ): Promise<Models.DeploymentList> {\n        let params: { functionId: string, queries?: string[], search?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, queries?: string[], search?: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                queries: rest[0] as string[],\n                search: rest[1] as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const queries = params.queries;\n        const search = params.search;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/deployments'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new function code deployment. Use this endpoint to upload a new version of your code function. To execute your newly uploaded code, you'll need to update the function's deployment to use your new deployment UID.\n     * \n     * This endpoint accepts a tar.gz file compressed with your code. Make sure to include any dependencies your code has within the compressed file. You can learn more about code packaging in the [Appwrite Cloud Functions tutorial](https://appwrite.io/docs/functions).\n     * \n     * Use the \"command\" param to set the entrypoint used to execute your code.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {File} params.code - Gzip file with your code package. When used with the Appwrite CLI, pass the path to your code directory, and the CLI will automatically package your code. Use a path that is within the current directory.\n     * @param {boolean} params.activate - Automatically activate the deployment when it is finished building.\n     * @param {string} params.entrypoint - Entrypoint File.\n     * @param {string} params.commands - Build Commands.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     */\n    createDeployment(params: { functionId: string, code: File, activate: boolean, entrypoint?: string, commands?: string , onProgress?: (progress: UploadProgress) => void }): Promise<Models.Deployment>;\n    /**\n     * Create a new function code deployment. Use this endpoint to upload a new version of your code function. To execute your newly uploaded code, you'll need to update the function's deployment to use your new deployment UID.\n     * \n     * This endpoint accepts a tar.gz file compressed with your code. Make sure to include any dependencies your code has within the compressed file. You can learn more about code packaging in the [Appwrite Cloud Functions tutorial](https://appwrite.io/docs/functions).\n     * \n     * Use the \"command\" param to set the entrypoint used to execute your code.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {File} code - Gzip file with your code package. When used with the Appwrite CLI, pass the path to your code directory, and the CLI will automatically package your code. Use a path that is within the current directory.\n     * @param {boolean} activate - Automatically activate the deployment when it is finished building.\n     * @param {string} entrypoint - Entrypoint File.\n     * @param {string} commands - Build Commands.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createDeployment(functionId: string, code: File, activate: boolean, entrypoint?: string, commands?: string, onProgress?: (progress: UploadProgress) => void): Promise<Models.Deployment>;\n    createDeployment(\n        paramsOrFirst: { functionId: string, code: File, activate: boolean, entrypoint?: string, commands?: string, onProgress?: (progress: UploadProgress) => void  } | string,\n        ...rest: [(File)?, (boolean)?, (string)?, (string)?,((progress: UploadProgress) => void)?]    \n    ): Promise<Models.Deployment> {\n        let params: { functionId: string, code: File, activate: boolean, entrypoint?: string, commands?: string };\n        let onProgress: ((progress: UploadProgress) => void);\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, code: File, activate: boolean, entrypoint?: string, commands?: string };\n            onProgress = paramsOrFirst?.onProgress as ((progress: UploadProgress) => void);\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                code: rest[0] as File,\n                activate: rest[1] as boolean,\n                entrypoint: rest[2] as string,\n                commands: rest[3] as string            \n            };\n            onProgress = rest[4] as ((progress: UploadProgress) => void);\n        }\n        \n        const functionId = params.functionId;\n        const code = params.code;\n        const activate = params.activate;\n        const entrypoint = params.entrypoint;\n        const commands = params.commands;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n        if (typeof activate === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"activate\"');\n        }\n\n        const apiPath = '/functions/{functionId}/deployments'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof entrypoint !== 'undefined') {\n            payload['entrypoint'] = entrypoint;\n        }\n        if (typeof commands !== 'undefined') {\n            payload['commands'] = commands;\n        }\n        if (typeof code !== 'undefined') {\n            payload['code'] = code;\n        }\n        if (typeof activate !== 'undefined') {\n            payload['activate'] = activate;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'multipart/form-data',\n        }\n\n        return this.client.chunkedUpload(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n            onProgress\n        );\n    }\n\n    /**\n     * Create a new build for an existing function deployment. This endpoint allows you to rebuild a deployment with the updated function configuration, including its entrypoint and build commands if they have been modified. The build process will be queued and executed asynchronously. The original deployment's code will be preserved and used for the new build.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {string} params.deploymentId - Deployment ID.\n     * @param {string} params.buildId - Build unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     */\n    createDuplicateDeployment(params: { functionId: string, deploymentId: string, buildId?: string  }): Promise<Models.Deployment>;\n    /**\n     * Create a new build for an existing function deployment. This endpoint allows you to rebuild a deployment with the updated function configuration, including its entrypoint and build commands if they have been modified. The build process will be queued and executed asynchronously. The original deployment's code will be preserved and used for the new build.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {string} deploymentId - Deployment ID.\n     * @param {string} buildId - Build unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createDuplicateDeployment(functionId: string, deploymentId: string, buildId?: string): Promise<Models.Deployment>;\n    createDuplicateDeployment(\n        paramsOrFirst: { functionId: string, deploymentId: string, buildId?: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<Models.Deployment> {\n        let params: { functionId: string, deploymentId: string, buildId?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, deploymentId: string, buildId?: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                deploymentId: rest[0] as string,\n                buildId: rest[1] as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const deploymentId = params.deploymentId;\n        const buildId = params.buildId;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/deployments/duplicate'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof deploymentId !== 'undefined') {\n            payload['deploymentId'] = deploymentId;\n        }\n        if (typeof buildId !== 'undefined') {\n            payload['buildId'] = buildId;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a deployment based on a template.\n     * \n     * Use this endpoint with combination of [listTemplates](https://appwrite.io/docs/server/functions#listTemplates) to find the template details.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {string} params.repository - Repository name of the template.\n     * @param {string} params.owner - The name of the owner of the template.\n     * @param {string} params.rootDirectory - Path to function code in the template repo.\n     * @param {string} params.version - Version (tag) for the repo linked to the function template.\n     * @param {boolean} params.activate - Automatically activate the deployment when it is finished building.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     */\n    createTemplateDeployment(params: { functionId: string, repository: string, owner: string, rootDirectory: string, version: string, activate?: boolean  }): Promise<Models.Deployment>;\n    /**\n     * Create a deployment based on a template.\n     * \n     * Use this endpoint with combination of [listTemplates](https://appwrite.io/docs/server/functions#listTemplates) to find the template details.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {string} repository - Repository name of the template.\n     * @param {string} owner - The name of the owner of the template.\n     * @param {string} rootDirectory - Path to function code in the template repo.\n     * @param {string} version - Version (tag) for the repo linked to the function template.\n     * @param {boolean} activate - Automatically activate the deployment when it is finished building.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createTemplateDeployment(functionId: string, repository: string, owner: string, rootDirectory: string, version: string, activate?: boolean): Promise<Models.Deployment>;\n    createTemplateDeployment(\n        paramsOrFirst: { functionId: string, repository: string, owner: string, rootDirectory: string, version: string, activate?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Deployment> {\n        let params: { functionId: string, repository: string, owner: string, rootDirectory: string, version: string, activate?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, repository: string, owner: string, rootDirectory: string, version: string, activate?: boolean };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                repository: rest[0] as string,\n                owner: rest[1] as string,\n                rootDirectory: rest[2] as string,\n                version: rest[3] as string,\n                activate: rest[4] as boolean            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const repository = params.repository;\n        const owner = params.owner;\n        const rootDirectory = params.rootDirectory;\n        const version = params.version;\n        const activate = params.activate;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof repository === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"repository\"');\n        }\n        if (typeof owner === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"owner\"');\n        }\n        if (typeof rootDirectory === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"rootDirectory\"');\n        }\n        if (typeof version === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"version\"');\n        }\n\n        const apiPath = '/functions/{functionId}/deployments/template'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof repository !== 'undefined') {\n            payload['repository'] = repository;\n        }\n        if (typeof owner !== 'undefined') {\n            payload['owner'] = owner;\n        }\n        if (typeof rootDirectory !== 'undefined') {\n            payload['rootDirectory'] = rootDirectory;\n        }\n        if (typeof version !== 'undefined') {\n            payload['version'] = version;\n        }\n        if (typeof activate !== 'undefined') {\n            payload['activate'] = activate;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a deployment when a function is connected to VCS.\n     * \n     * This endpoint lets you create deployment from a branch, commit, or a tag.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {VCSDeploymentType} params.type - Type of reference passed. Allowed values are: branch, commit\n     * @param {string} params.reference - VCS reference to create deployment from. Depending on type this can be: branch name, commit hash\n     * @param {boolean} params.activate - Automatically activate the deployment when it is finished building.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     */\n    createVcsDeployment(params: { functionId: string, type: VCSDeploymentType, reference: string, activate?: boolean  }): Promise<Models.Deployment>;\n    /**\n     * Create a deployment when a function is connected to VCS.\n     * \n     * This endpoint lets you create deployment from a branch, commit, or a tag.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {VCSDeploymentType} type - Type of reference passed. Allowed values are: branch, commit\n     * @param {string} reference - VCS reference to create deployment from. Depending on type this can be: branch name, commit hash\n     * @param {boolean} activate - Automatically activate the deployment when it is finished building.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createVcsDeployment(functionId: string, type: VCSDeploymentType, reference: string, activate?: boolean): Promise<Models.Deployment>;\n    createVcsDeployment(\n        paramsOrFirst: { functionId: string, type: VCSDeploymentType, reference: string, activate?: boolean } | string,\n        ...rest: [(VCSDeploymentType)?, (string)?, (boolean)?]    \n    ): Promise<Models.Deployment> {\n        let params: { functionId: string, type: VCSDeploymentType, reference: string, activate?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, type: VCSDeploymentType, reference: string, activate?: boolean };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                type: rest[0] as VCSDeploymentType,\n                reference: rest[1] as string,\n                activate: rest[2] as boolean            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const type = params.type;\n        const reference = params.reference;\n        const activate = params.activate;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n        if (typeof reference === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"reference\"');\n        }\n\n        const apiPath = '/functions/{functionId}/deployments/vcs'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof type !== 'undefined') {\n            payload['type'] = type;\n        }\n        if (typeof reference !== 'undefined') {\n            payload['reference'] = reference;\n        }\n        if (typeof activate !== 'undefined') {\n            payload['activate'] = activate;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a function deployment by its unique ID.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {string} params.deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     */\n    getDeployment(params: { functionId: string, deploymentId: string  }): Promise<Models.Deployment>;\n    /**\n     * Get a function deployment by its unique ID.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {string} deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getDeployment(functionId: string, deploymentId: string): Promise<Models.Deployment>;\n    getDeployment(\n        paramsOrFirst: { functionId: string, deploymentId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Deployment> {\n        let params: { functionId: string, deploymentId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, deploymentId: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                deploymentId: rest[0] as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const deploymentId = params.deploymentId;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a code deployment by its unique ID.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {string} params.deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteDeployment(params: { functionId: string, deploymentId: string  }): Promise<{}>;\n    /**\n     * Delete a code deployment by its unique ID.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {string} deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteDeployment(functionId: string, deploymentId: string): Promise<{}>;\n    deleteDeployment(\n        paramsOrFirst: { functionId: string, deploymentId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<{}> {\n        let params: { functionId: string, deploymentId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, deploymentId: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                deploymentId: rest[0] as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const deploymentId = params.deploymentId;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a function deployment content by its unique ID. The endpoint response return with a 'Content-Disposition: attachment' header that tells the browser to start downloading the file to user downloads directory.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {string} params.deploymentId - Deployment ID.\n     * @param {DeploymentDownloadType} params.type - Deployment file to download. Can be: \"source\", \"output\".\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    getDeploymentDownload(params: { functionId: string, deploymentId: string, type?: DeploymentDownloadType  }): Promise<ArrayBuffer>;\n    /**\n     * Get a function deployment content by its unique ID. The endpoint response return with a 'Content-Disposition: attachment' header that tells the browser to start downloading the file to user downloads directory.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {string} deploymentId - Deployment ID.\n     * @param {DeploymentDownloadType} type - Deployment file to download. Can be: \"source\", \"output\".\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getDeploymentDownload(functionId: string, deploymentId: string, type?: DeploymentDownloadType): Promise<ArrayBuffer>;\n    getDeploymentDownload(\n        paramsOrFirst: { functionId: string, deploymentId: string, type?: DeploymentDownloadType } | string,\n        ...rest: [(string)?, (DeploymentDownloadType)?]    \n    ): Promise<ArrayBuffer> {\n        let params: { functionId: string, deploymentId: string, type?: DeploymentDownloadType };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, deploymentId: string, type?: DeploymentDownloadType };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                deploymentId: rest[0] as string,\n                type: rest[1] as DeploymentDownloadType            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const deploymentId = params.deploymentId;\n        const type = params.type;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}/download'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        const payload: Payload = {};\n        if (typeof type !== 'undefined') {\n            payload['type'] = type;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n\n    /**\n     * Cancel an ongoing function deployment build. If the build is already in progress, it will be stopped and marked as canceled. If the build hasn't started yet, it will be marked as canceled without executing. You cannot cancel builds that have already completed (status 'ready') or failed. The response includes the final build status and details.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {string} params.deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     */\n    updateDeploymentStatus(params: { functionId: string, deploymentId: string  }): Promise<Models.Deployment>;\n    /**\n     * Cancel an ongoing function deployment build. If the build is already in progress, it will be stopped and marked as canceled. If the build hasn't started yet, it will be marked as canceled without executing. You cannot cancel builds that have already completed (status 'ready') or failed. The response includes the final build status and details.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {string} deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateDeploymentStatus(functionId: string, deploymentId: string): Promise<Models.Deployment>;\n    updateDeploymentStatus(\n        paramsOrFirst: { functionId: string, deploymentId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Deployment> {\n        let params: { functionId: string, deploymentId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, deploymentId: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                deploymentId: rest[0] as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const deploymentId = params.deploymentId;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}/status'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all the current user function execution logs. You can use the query params to filter your results.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: trigger, status, responseStatusCode, duration, requestMethod, requestPath, deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ExecutionList>}\n     */\n    listExecutions(params: { functionId: string, queries?: string[]  }): Promise<Models.ExecutionList>;\n    /**\n     * Get a list of all the current user function execution logs. You can use the query params to filter your results.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: trigger, status, responseStatusCode, duration, requestMethod, requestPath, deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ExecutionList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listExecutions(functionId: string, queries?: string[]): Promise<Models.ExecutionList>;\n    listExecutions(\n        paramsOrFirst: { functionId: string, queries?: string[] } | string,\n        ...rest: [(string[])?]    \n    ): Promise<Models.ExecutionList> {\n        let params: { functionId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, queries?: string[] };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                queries: rest[0] as string[]            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const queries = params.queries;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {string} params.body - HTTP body of execution. Default value is empty string.\n     * @param {boolean} params.async - Execute code in the background. Default value is false.\n     * @param {string} params.xpath - HTTP path of execution. Path can include query params. Default value is /\n     * @param {ExecutionMethod} params.method - HTTP method of execution. Default value is POST.\n     * @param {object} params.headers - HTTP headers of execution. Defaults to empty.\n     * @param {string} params.scheduledAt - Scheduled execution time in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future with precision in minutes.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Execution>}\n     */\n    createExecution(params: { functionId: string, body?: string, async?: boolean, xpath?: string, method?: ExecutionMethod, headers?: object, scheduledAt?: string  }): Promise<Models.Execution>;\n    /**\n     * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {string} body - HTTP body of execution. Default value is empty string.\n     * @param {boolean} async - Execute code in the background. Default value is false.\n     * @param {string} xpath - HTTP path of execution. Path can include query params. Default value is /\n     * @param {ExecutionMethod} method - HTTP method of execution. Default value is POST.\n     * @param {object} headers - HTTP headers of execution. Defaults to empty.\n     * @param {string} scheduledAt - Scheduled execution time in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future with precision in minutes.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Execution>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createExecution(functionId: string, body?: string, async?: boolean, xpath?: string, method?: ExecutionMethod, headers?: object, scheduledAt?: string): Promise<Models.Execution>;\n    createExecution(\n        paramsOrFirst: { functionId: string, body?: string, async?: boolean, xpath?: string, method?: ExecutionMethod, headers?: object, scheduledAt?: string } | string,\n        ...rest: [(string)?, (boolean)?, (string)?, (ExecutionMethod)?, (object)?, (string)?]    \n    ): Promise<Models.Execution> {\n        let params: { functionId: string, body?: string, async?: boolean, xpath?: string, method?: ExecutionMethod, headers?: object, scheduledAt?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, body?: string, async?: boolean, xpath?: string, method?: ExecutionMethod, headers?: object, scheduledAt?: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                body: rest[0] as string,\n                async: rest[1] as boolean,\n                xpath: rest[2] as string,\n                method: rest[3] as ExecutionMethod,\n                headers: rest[4] as object,\n                scheduledAt: rest[5] as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const body = params.body;\n        const async = params.async;\n        const xpath = params.xpath;\n        const method = params.method;\n        const headers = params.headers;\n        const scheduledAt = params.scheduledAt;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof body !== 'undefined') {\n            payload['body'] = body;\n        }\n        if (typeof async !== 'undefined') {\n            payload['async'] = async;\n        }\n        if (typeof xpath !== 'undefined') {\n            payload['path'] = xpath;\n        }\n        if (typeof method !== 'undefined') {\n            payload['method'] = method;\n        }\n        if (typeof headers !== 'undefined') {\n            payload['headers'] = headers;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a function execution log by its unique ID.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {string} params.executionId - Execution ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Execution>}\n     */\n    getExecution(params: { functionId: string, executionId: string  }): Promise<Models.Execution>;\n    /**\n     * Get a function execution log by its unique ID.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {string} executionId - Execution ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Execution>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getExecution(functionId: string, executionId: string): Promise<Models.Execution>;\n    getExecution(\n        paramsOrFirst: { functionId: string, executionId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Execution> {\n        let params: { functionId: string, executionId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, executionId: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                executionId: rest[0] as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const executionId = params.executionId;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof executionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"executionId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/executions/{executionId}'.replace('{functionId}', functionId).replace('{executionId}', executionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a function execution by its unique ID.\n     *\n     * @param {string} params.functionId - Function ID.\n     * @param {string} params.executionId - Execution ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteExecution(params: { functionId: string, executionId: string  }): Promise<{}>;\n    /**\n     * Delete a function execution by its unique ID.\n     *\n     * @param {string} functionId - Function ID.\n     * @param {string} executionId - Execution ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteExecution(functionId: string, executionId: string): Promise<{}>;\n    deleteExecution(\n        paramsOrFirst: { functionId: string, executionId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<{}> {\n        let params: { functionId: string, executionId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, executionId: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                executionId: rest[0] as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const executionId = params.executionId;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof executionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"executionId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/executions/{executionId}'.replace('{functionId}', functionId).replace('{executionId}', executionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all variables of a specific function.\n     *\n     * @param {string} params.functionId - Function unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.VariableList>}\n     */\n    listVariables(params: { functionId: string  }): Promise<Models.VariableList>;\n    /**\n     * Get a list of all variables of a specific function.\n     *\n     * @param {string} functionId - Function unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.VariableList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listVariables(functionId: string): Promise<Models.VariableList>;\n    listVariables(\n        paramsOrFirst: { functionId: string } | string    \n    ): Promise<Models.VariableList> {\n        let params: { functionId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/variables'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new function environment variable. These variables can be accessed in the function at runtime as environment variables.\n     *\n     * @param {string} params.functionId - Function unique ID.\n     * @param {string} params.key - Variable key. Max length: 255 chars.\n     * @param {string} params.value - Variable value. Max length: 8192 chars.\n     * @param {boolean} params.secret - Secret variables can be updated or deleted, but only functions can read them during build and runtime.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     */\n    createVariable(params: { functionId: string, key: string, value: string, secret?: boolean  }): Promise<Models.Variable>;\n    /**\n     * Create a new function environment variable. These variables can be accessed in the function at runtime as environment variables.\n     *\n     * @param {string} functionId - Function unique ID.\n     * @param {string} key - Variable key. Max length: 255 chars.\n     * @param {string} value - Variable value. Max length: 8192 chars.\n     * @param {boolean} secret - Secret variables can be updated or deleted, but only functions can read them during build and runtime.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createVariable(functionId: string, key: string, value: string, secret?: boolean): Promise<Models.Variable>;\n    createVariable(\n        paramsOrFirst: { functionId: string, key: string, value: string, secret?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Variable> {\n        let params: { functionId: string, key: string, value: string, secret?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, key: string, value: string, secret?: boolean };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                key: rest[0] as string,\n                value: rest[1] as string,\n                secret: rest[2] as boolean            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const key = params.key;\n        const value = params.value;\n        const secret = params.secret;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof value === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"value\"');\n        }\n\n        const apiPath = '/functions/{functionId}/variables'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof value !== 'undefined') {\n            payload['value'] = value;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a variable by its unique ID.\n     *\n     * @param {string} params.functionId - Function unique ID.\n     * @param {string} params.variableId - Variable unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     */\n    getVariable(params: { functionId: string, variableId: string  }): Promise<Models.Variable>;\n    /**\n     * Get a variable by its unique ID.\n     *\n     * @param {string} functionId - Function unique ID.\n     * @param {string} variableId - Variable unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getVariable(functionId: string, variableId: string): Promise<Models.Variable>;\n    getVariable(\n        paramsOrFirst: { functionId: string, variableId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Variable> {\n        let params: { functionId: string, variableId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, variableId: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                variableId: rest[0] as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const variableId = params.variableId;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/variables/{variableId}'.replace('{functionId}', functionId).replace('{variableId}', variableId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update variable by its unique ID.\n     *\n     * @param {string} params.functionId - Function unique ID.\n     * @param {string} params.variableId - Variable unique ID.\n     * @param {string} params.key - Variable key. Max length: 255 chars.\n     * @param {string} params.value - Variable value. Max length: 8192 chars.\n     * @param {boolean} params.secret - Secret variables can be updated or deleted, but only functions can read them during build and runtime.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     */\n    updateVariable(params: { functionId: string, variableId: string, key: string, value?: string, secret?: boolean  }): Promise<Models.Variable>;\n    /**\n     * Update variable by its unique ID.\n     *\n     * @param {string} functionId - Function unique ID.\n     * @param {string} variableId - Variable unique ID.\n     * @param {string} key - Variable key. Max length: 255 chars.\n     * @param {string} value - Variable value. Max length: 8192 chars.\n     * @param {boolean} secret - Secret variables can be updated or deleted, but only functions can read them during build and runtime.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateVariable(functionId: string, variableId: string, key: string, value?: string, secret?: boolean): Promise<Models.Variable>;\n    updateVariable(\n        paramsOrFirst: { functionId: string, variableId: string, key: string, value?: string, secret?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Variable> {\n        let params: { functionId: string, variableId: string, key: string, value?: string, secret?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, variableId: string, key: string, value?: string, secret?: boolean };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                variableId: rest[0] as string,\n                key: rest[1] as string,\n                value: rest[2] as string,\n                secret: rest[3] as boolean            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const variableId = params.variableId;\n        const key = params.key;\n        const value = params.value;\n        const secret = params.secret;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        const apiPath = '/functions/{functionId}/variables/{variableId}'.replace('{functionId}', functionId).replace('{variableId}', variableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof value !== 'undefined') {\n            payload['value'] = value;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a variable by its unique ID.\n     *\n     * @param {string} params.functionId - Function unique ID.\n     * @param {string} params.variableId - Variable unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteVariable(params: { functionId: string, variableId: string  }): Promise<{}>;\n    /**\n     * Delete a variable by its unique ID.\n     *\n     * @param {string} functionId - Function unique ID.\n     * @param {string} variableId - Variable unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteVariable(functionId: string, variableId: string): Promise<{}>;\n    deleteVariable(\n        paramsOrFirst: { functionId: string, variableId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<{}> {\n        let params: { functionId: string, variableId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { functionId: string, variableId: string };\n        } else {\n            params = {\n                functionId: paramsOrFirst as string,\n                variableId: rest[0] as string            \n            };\n        }\n        \n        const functionId = params.functionId;\n        const variableId = params.variableId;\n\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n\n        const apiPath = '/functions/{functionId}/variables/{variableId}'.replace('{functionId}', functionId).replace('{variableId}', variableId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n", "import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\n\nexport class Graphql {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} params.query - The query or queries to execute.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    query(params: { query: object  }): Promise<{}>;\n    /**\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} query - The query or queries to execute.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    query(query: object): Promise<{}>;\n    query(\n        paramsOrFirst: { query: object } | object    \n    ): Promise<{}> {\n        let params: { query: object };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'query' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { query: object };\n        } else {\n            params = {\n                query: paramsOrFirst as object            \n            };\n        }\n        \n        const query = params.query;\n\n        if (typeof query === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"query\"');\n        }\n\n        const apiPath = '/graphql';\n        const payload: Payload = {};\n        if (typeof query !== 'undefined') {\n            payload['query'] = query;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'x-sdk-graphql': 'true',\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} params.query - The query or queries to execute.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    mutation(params: { query: object  }): Promise<{}>;\n    /**\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} query - The query or queries to execute.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    mutation(query: object): Promise<{}>;\n    mutation(\n        paramsOrFirst: { query: object } | object    \n    ): Promise<{}> {\n        let params: { query: object };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'query' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { query: object };\n        } else {\n            params = {\n                query: paramsOrFirst as object            \n            };\n        }\n        \n        const query = params.query;\n\n        if (typeof query === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"query\"');\n        }\n\n        const apiPath = '/graphql/mutation';\n        const payload: Payload = {};\n        if (typeof query !== 'undefined') {\n            payload['query'] = query;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'x-sdk-graphql': 'true',\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n", "import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\nimport { Name } from '../enums/name';\n\nexport class Health {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Check the Appwrite HTTP server is up and responsive.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    get(): Promise<Models.HealthStatus> {\n\n        const apiPath = '/health';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Check the Appwrite Antivirus server is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthAntivirus>}\n     */\n    getAntivirus(): Promise<Models.HealthAntivirus> {\n\n        const apiPath = '/health/anti-virus';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Check the Appwrite in-memory cache servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    getCache(): Promise<Models.HealthStatus> {\n\n        const apiPath = '/health/cache';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the SSL certificate for a domain\n     *\n     * @param {string} params.domain - string\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthCertificate>}\n     */\n    getCertificate(params?: { domain?: string  }): Promise<Models.HealthCertificate>;\n    /**\n     * Get the SSL certificate for a domain\n     *\n     * @param {string} domain - string\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthCertificate>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getCertificate(domain?: string): Promise<Models.HealthCertificate>;\n    getCertificate(\n        paramsOrFirst?: { domain?: string } | string    \n    ): Promise<Models.HealthCertificate> {\n        let params: { domain?: string };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { domain?: string };\n        } else {\n            params = {\n                domain: paramsOrFirst as string            \n            };\n        }\n        \n        const domain = params.domain;\n\n\n        const apiPath = '/health/certificate';\n        const payload: Payload = {};\n        if (typeof domain !== 'undefined') {\n            payload['domain'] = domain;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Check the Appwrite database servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    getDB(): Promise<Models.HealthStatus> {\n\n        const apiPath = '/health/db';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Check the Appwrite pub-sub servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    getPubSub(): Promise<Models.HealthStatus> {\n\n        const apiPath = '/health/pubsub';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of builds that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueBuilds(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of builds that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueBuilds(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueBuilds(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/builds';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of certificates that are waiting to be issued against [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueCertificates(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of certificates that are waiting to be issued against [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueCertificates(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueCertificates(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/certificates';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of database changes that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {string} params.name - Queue name for which to check the queue size\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueDatabases(params?: { name?: string, threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of database changes that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {string} name - Queue name for which to check the queue size\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueDatabases(name?: string, threshold?: number): Promise<Models.HealthQueue>;\n    getQueueDatabases(\n        paramsOrFirst?: { name?: string, threshold?: number } | string,\n        ...rest: [(number)?]    \n    ): Promise<Models.HealthQueue> {\n        let params: { name?: string, threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { name?: string, threshold?: number };\n        } else {\n            params = {\n                name: paramsOrFirst as string,\n                threshold: rest[0] as number            \n            };\n        }\n        \n        const name = params.name;\n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/databases';\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of background destructive changes that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueDeletes(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of background destructive changes that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueDeletes(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueDeletes(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/deletes';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Returns the amount of failed jobs in a given queue.\n     * \n     *\n     * @param {Name} params.name - The name of the queue\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getFailedJobs(params: { name: Name, threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Returns the amount of failed jobs in a given queue.\n     * \n     *\n     * @param {Name} name - The name of the queue\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getFailedJobs(name: Name, threshold?: number): Promise<Models.HealthQueue>;\n    getFailedJobs(\n        paramsOrFirst: { name: Name, threshold?: number } | Name,\n        ...rest: [(number)?]    \n    ): Promise<Models.HealthQueue> {\n        let params: { name: Name, threshold?: number };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst) && 'name' in paramsOrFirst)) {\n            params = (paramsOrFirst || {}) as { name: Name, threshold?: number };\n        } else {\n            params = {\n                name: paramsOrFirst as Name,\n                threshold: rest[0] as number            \n            };\n        }\n        \n        const name = params.name;\n        const threshold = params.threshold;\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/health/queue/failed/{name}'.replace('{name}', name);\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of function executions that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueFunctions(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of function executions that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueFunctions(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueFunctions(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/functions';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of logs that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueLogs(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of logs that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueLogs(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueLogs(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/logs';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of mails that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueMails(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of mails that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueMails(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueMails(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/mails';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of messages that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueMessaging(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of messages that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueMessaging(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueMessaging(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/messaging';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of migrations that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueMigrations(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of migrations that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueMigrations(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueMigrations(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/migrations';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of metrics that are waiting to be processed in the Appwrite stats resources queue.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueStatsResources(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of metrics that are waiting to be processed in the Appwrite stats resources queue.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueStatsResources(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueStatsResources(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/stats-resources';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of metrics that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueUsage(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of metrics that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueUsage(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueUsage(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/stats-usage';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the number of webhooks that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} params.threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    getQueueWebhooks(params?: { threshold?: number  }): Promise<Models.HealthQueue>;\n    /**\n     * Get the number of webhooks that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold - Queue size threshold. When hit (equal or higher), endpoint returns server error. Default value is 5000.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getQueueWebhooks(threshold?: number): Promise<Models.HealthQueue>;\n    getQueueWebhooks(\n        paramsOrFirst?: { threshold?: number } | number    \n    ): Promise<Models.HealthQueue> {\n        let params: { threshold?: number };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { threshold?: number };\n        } else {\n            params = {\n                threshold: paramsOrFirst as number            \n            };\n        }\n        \n        const threshold = params.threshold;\n\n\n        const apiPath = '/health/queue/webhooks';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Check the Appwrite storage device is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    getStorage(): Promise<Models.HealthStatus> {\n\n        const apiPath = '/health/storage';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Check the Appwrite local storage device is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    getStorageLocal(): Promise<Models.HealthStatus> {\n\n        const apiPath = '/health/storage/local';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Check the Appwrite server time is synced with Google remote NTP server. We use this technology to smoothly handle leap seconds with no disruptive events. The [Network Time Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is used by hundreds of millions of computers and devices to synchronize their clocks over the Internet. If your computer sets its own clock, it likely uses NTP.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthTime>}\n     */\n    getTime(): Promise<Models.HealthTime> {\n\n        const apiPath = '/health/time';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n", "import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\n\nexport class Locale {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Get the current user location based on IP. Returns an object with user country code, country name, continent name, continent code, ip address and suggested currency. You can use the locale header to get the data in a supported language.\n     * \n     * ([IP Geolocation by DB-IP](https://db-ip.com))\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Locale>}\n     */\n    get(): Promise<Models.Locale> {\n\n        const apiPath = '/locale';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List of all locale codes in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LocaleCodeList>}\n     */\n    listCodes(): Promise<Models.LocaleCodeList> {\n\n        const apiPath = '/locale/codes';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List of all continents. You can use the locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ContinentList>}\n     */\n    listContinents(): Promise<Models.ContinentList> {\n\n        const apiPath = '/locale/continents';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List of all countries. You can use the locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.CountryList>}\n     */\n    listCountries(): Promise<Models.CountryList> {\n\n        const apiPath = '/locale/countries';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List of all countries that are currently members of the EU. You can use the locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.CountryList>}\n     */\n    listCountriesEU(): Promise<Models.CountryList> {\n\n        const apiPath = '/locale/countries/eu';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List of all countries phone codes. You can use the locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.PhoneList>}\n     */\n    listCountriesPhones(): Promise<Models.PhoneList> {\n\n        const apiPath = '/locale/countries/phones';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List of all currencies, including currency symbol, name, plural, and decimal digits for all major and minor currencies. You can use the locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.CurrencyList>}\n     */\n    listCurrencies(): Promise<Models.CurrencyList> {\n\n        const apiPath = '/locale/currencies';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List of all languages classified by ISO 639-1 including 2-letter code, name in English, and name in the respective language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LanguageList>}\n     */\n    listLanguages(): Promise<Models.LanguageList> {\n\n        const apiPath = '/locale/languages';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n", "import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\nimport { MessagePriority } from '../enums/message-priority';\nimport { SmtpEncryption } from '../enums/smtp-encryption';\n\nexport class Messaging {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Get a list of all messages from the current Appwrite project.\n     *\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: scheduledAt, deliveredAt, deliveredTotal, status, description, providerType\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MessageList>}\n     */\n    listMessages(params?: { queries?: string[], search?: string  }): Promise<Models.MessageList>;\n    /**\n     * Get a list of all messages from the current Appwrite project.\n     *\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: scheduledAt, deliveredAt, deliveredTotal, status, description, providerType\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MessageList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listMessages(queries?: string[], search?: string): Promise<Models.MessageList>;\n    listMessages(\n        paramsOrFirst?: { queries?: string[], search?: string } | string[],\n        ...rest: [(string)?]    \n    ): Promise<Models.MessageList> {\n        let params: { queries?: string[], search?: string };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { queries?: string[], search?: string };\n        } else {\n            params = {\n                queries: paramsOrFirst as string[],\n                search: rest[0] as string            \n            };\n        }\n        \n        const queries = params.queries;\n        const search = params.search;\n\n\n        const apiPath = '/messaging/messages';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new email message.\n     *\n     * @param {string} params.messageId - Message ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.subject - Email Subject.\n     * @param {string} params.content - Email Content.\n     * @param {string[]} params.topics - List of Topic IDs.\n     * @param {string[]} params.users - List of User IDs.\n     * @param {string[]} params.targets - List of Targets IDs.\n     * @param {string[]} params.cc - Array of target IDs to be added as CC.\n     * @param {string[]} params.bcc - Array of target IDs to be added as BCC.\n     * @param {string[]} params.attachments - Array of compound ID strings of bucket IDs and file IDs to be attached to the email. They should be formatted as <BUCKET_ID>:<FILE_ID>.\n     * @param {boolean} params.draft - Is message a draft\n     * @param {boolean} params.html - Is content of type HTML\n     * @param {string} params.scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     */\n    createEmail(params: { messageId: string, subject: string, content: string, topics?: string[], users?: string[], targets?: string[], cc?: string[], bcc?: string[], attachments?: string[], draft?: boolean, html?: boolean, scheduledAt?: string  }): Promise<Models.Message>;\n    /**\n     * Create a new email message.\n     *\n     * @param {string} messageId - Message ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} subject - Email Subject.\n     * @param {string} content - Email Content.\n     * @param {string[]} topics - List of Topic IDs.\n     * @param {string[]} users - List of User IDs.\n     * @param {string[]} targets - List of Targets IDs.\n     * @param {string[]} cc - Array of target IDs to be added as CC.\n     * @param {string[]} bcc - Array of target IDs to be added as BCC.\n     * @param {string[]} attachments - Array of compound ID strings of bucket IDs and file IDs to be attached to the email. They should be formatted as <BUCKET_ID>:<FILE_ID>.\n     * @param {boolean} draft - Is message a draft\n     * @param {boolean} html - Is content of type HTML\n     * @param {string} scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createEmail(messageId: string, subject: string, content: string, topics?: string[], users?: string[], targets?: string[], cc?: string[], bcc?: string[], attachments?: string[], draft?: boolean, html?: boolean, scheduledAt?: string): Promise<Models.Message>;\n    createEmail(\n        paramsOrFirst: { messageId: string, subject: string, content: string, topics?: string[], users?: string[], targets?: string[], cc?: string[], bcc?: string[], attachments?: string[], draft?: boolean, html?: boolean, scheduledAt?: string } | string,\n        ...rest: [(string)?, (string)?, (string[])?, (string[])?, (string[])?, (string[])?, (string[])?, (string[])?, (boolean)?, (boolean)?, (string)?]    \n    ): Promise<Models.Message> {\n        let params: { messageId: string, subject: string, content: string, topics?: string[], users?: string[], targets?: string[], cc?: string[], bcc?: string[], attachments?: string[], draft?: boolean, html?: boolean, scheduledAt?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { messageId: string, subject: string, content: string, topics?: string[], users?: string[], targets?: string[], cc?: string[], bcc?: string[], attachments?: string[], draft?: boolean, html?: boolean, scheduledAt?: string };\n        } else {\n            params = {\n                messageId: paramsOrFirst as string,\n                subject: rest[0] as string,\n                content: rest[1] as string,\n                topics: rest[2] as string[],\n                users: rest[3] as string[],\n                targets: rest[4] as string[],\n                cc: rest[5] as string[],\n                bcc: rest[6] as string[],\n                attachments: rest[7] as string[],\n                draft: rest[8] as boolean,\n                html: rest[9] as boolean,\n                scheduledAt: rest[10] as string            \n            };\n        }\n        \n        const messageId = params.messageId;\n        const subject = params.subject;\n        const content = params.content;\n        const topics = params.topics;\n        const users = params.users;\n        const targets = params.targets;\n        const cc = params.cc;\n        const bcc = params.bcc;\n        const attachments = params.attachments;\n        const draft = params.draft;\n        const html = params.html;\n        const scheduledAt = params.scheduledAt;\n\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        if (typeof subject === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subject\"');\n        }\n        if (typeof content === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"content\"');\n        }\n\n        const apiPath = '/messaging/messages/email';\n        const payload: Payload = {};\n        if (typeof messageId !== 'undefined') {\n            payload['messageId'] = messageId;\n        }\n        if (typeof subject !== 'undefined') {\n            payload['subject'] = subject;\n        }\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n        if (typeof cc !== 'undefined') {\n            payload['cc'] = cc;\n        }\n        if (typeof bcc !== 'undefined') {\n            payload['bcc'] = bcc;\n        }\n        if (typeof attachments !== 'undefined') {\n            payload['attachments'] = attachments;\n        }\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n        if (typeof html !== 'undefined') {\n            payload['html'] = html;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update an email message by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.\n     * \n     *\n     * @param {string} params.messageId - Message ID.\n     * @param {string[]} params.topics - List of Topic IDs.\n     * @param {string[]} params.users - List of User IDs.\n     * @param {string[]} params.targets - List of Targets IDs.\n     * @param {string} params.subject - Email Subject.\n     * @param {string} params.content - Email Content.\n     * @param {boolean} params.draft - Is message a draft\n     * @param {boolean} params.html - Is content of type HTML\n     * @param {string[]} params.cc - Array of target IDs to be added as CC.\n     * @param {string[]} params.bcc - Array of target IDs to be added as BCC.\n     * @param {string} params.scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @param {string[]} params.attachments - Array of compound ID strings of bucket IDs and file IDs to be attached to the email. They should be formatted as <BUCKET_ID>:<FILE_ID>.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     */\n    updateEmail(params: { messageId: string, topics?: string[], users?: string[], targets?: string[], subject?: string, content?: string, draft?: boolean, html?: boolean, cc?: string[], bcc?: string[], scheduledAt?: string, attachments?: string[]  }): Promise<Models.Message>;\n    /**\n     * Update an email message by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.\n     * \n     *\n     * @param {string} messageId - Message ID.\n     * @param {string[]} topics - List of Topic IDs.\n     * @param {string[]} users - List of User IDs.\n     * @param {string[]} targets - List of Targets IDs.\n     * @param {string} subject - Email Subject.\n     * @param {string} content - Email Content.\n     * @param {boolean} draft - Is message a draft\n     * @param {boolean} html - Is content of type HTML\n     * @param {string[]} cc - Array of target IDs to be added as CC.\n     * @param {string[]} bcc - Array of target IDs to be added as BCC.\n     * @param {string} scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @param {string[]} attachments - Array of compound ID strings of bucket IDs and file IDs to be attached to the email. They should be formatted as <BUCKET_ID>:<FILE_ID>.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateEmail(messageId: string, topics?: string[], users?: string[], targets?: string[], subject?: string, content?: string, draft?: boolean, html?: boolean, cc?: string[], bcc?: string[], scheduledAt?: string, attachments?: string[]): Promise<Models.Message>;\n    updateEmail(\n        paramsOrFirst: { messageId: string, topics?: string[], users?: string[], targets?: string[], subject?: string, content?: string, draft?: boolean, html?: boolean, cc?: string[], bcc?: string[], scheduledAt?: string, attachments?: string[] } | string,\n        ...rest: [(string[])?, (string[])?, (string[])?, (string)?, (string)?, (boolean)?, (boolean)?, (string[])?, (string[])?, (string)?, (string[])?]    \n    ): Promise<Models.Message> {\n        let params: { messageId: string, topics?: string[], users?: string[], targets?: string[], subject?: string, content?: string, draft?: boolean, html?: boolean, cc?: string[], bcc?: string[], scheduledAt?: string, attachments?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { messageId: string, topics?: string[], users?: string[], targets?: string[], subject?: string, content?: string, draft?: boolean, html?: boolean, cc?: string[], bcc?: string[], scheduledAt?: string, attachments?: string[] };\n        } else {\n            params = {\n                messageId: paramsOrFirst as string,\n                topics: rest[0] as string[],\n                users: rest[1] as string[],\n                targets: rest[2] as string[],\n                subject: rest[3] as string,\n                content: rest[4] as string,\n                draft: rest[5] as boolean,\n                html: rest[6] as boolean,\n                cc: rest[7] as string[],\n                bcc: rest[8] as string[],\n                scheduledAt: rest[9] as string,\n                attachments: rest[10] as string[]            \n            };\n        }\n        \n        const messageId = params.messageId;\n        const topics = params.topics;\n        const users = params.users;\n        const targets = params.targets;\n        const subject = params.subject;\n        const content = params.content;\n        const draft = params.draft;\n        const html = params.html;\n        const cc = params.cc;\n        const bcc = params.bcc;\n        const scheduledAt = params.scheduledAt;\n        const attachments = params.attachments;\n\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        const apiPath = '/messaging/messages/email/{messageId}'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n        if (typeof subject !== 'undefined') {\n            payload['subject'] = subject;\n        }\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n        if (typeof html !== 'undefined') {\n            payload['html'] = html;\n        }\n        if (typeof cc !== 'undefined') {\n            payload['cc'] = cc;\n        }\n        if (typeof bcc !== 'undefined') {\n            payload['bcc'] = bcc;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        if (typeof attachments !== 'undefined') {\n            payload['attachments'] = attachments;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new push notification.\n     *\n     * @param {string} params.messageId - Message ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.title - Title for push notification.\n     * @param {string} params.body - Body for push notification.\n     * @param {string[]} params.topics - List of Topic IDs.\n     * @param {string[]} params.users - List of User IDs.\n     * @param {string[]} params.targets - List of Targets IDs.\n     * @param {object} params.data - Additional key-value pair data for push notification.\n     * @param {string} params.action - Action for push notification.\n     * @param {string} params.image - Image for push notification. Must be a compound bucket ID to file ID of a jpeg, png, or bmp image in Appwrite Storage. It should be formatted as <BUCKET_ID>:<FILE_ID>.\n     * @param {string} params.icon - Icon for push notification. Available only for Android and Web Platform.\n     * @param {string} params.sound - Sound for push notification. Available only for Android and iOS Platform.\n     * @param {string} params.color - Color for push notification. Available only for Android Platform.\n     * @param {string} params.tag - Tag for push notification. Available only for Android Platform.\n     * @param {number} params.badge - Badge for push notification. Available only for iOS Platform.\n     * @param {boolean} params.draft - Is message a draft\n     * @param {string} params.scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @param {boolean} params.contentAvailable - If set to true, the notification will be delivered in the background. Available only for iOS Platform.\n     * @param {boolean} params.critical - If set to true, the notification will be marked as critical. This requires the app to have the critical notification entitlement. Available only for iOS Platform.\n     * @param {MessagePriority} params.priority - Set the notification priority. \"normal\" will consider device state and may not deliver notifications immediately. \"high\" will always attempt to immediately deliver the notification.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     */\n    createPush(params: { messageId: string, title?: string, body?: string, topics?: string[], users?: string[], targets?: string[], data?: object, action?: string, image?: string, icon?: string, sound?: string, color?: string, tag?: string, badge?: number, draft?: boolean, scheduledAt?: string, contentAvailable?: boolean, critical?: boolean, priority?: MessagePriority  }): Promise<Models.Message>;\n    /**\n     * Create a new push notification.\n     *\n     * @param {string} messageId - Message ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} title - Title for push notification.\n     * @param {string} body - Body for push notification.\n     * @param {string[]} topics - List of Topic IDs.\n     * @param {string[]} users - List of User IDs.\n     * @param {string[]} targets - List of Targets IDs.\n     * @param {object} data - Additional key-value pair data for push notification.\n     * @param {string} action - Action for push notification.\n     * @param {string} image - Image for push notification. Must be a compound bucket ID to file ID of a jpeg, png, or bmp image in Appwrite Storage. It should be formatted as <BUCKET_ID>:<FILE_ID>.\n     * @param {string} icon - Icon for push notification. Available only for Android and Web Platform.\n     * @param {string} sound - Sound for push notification. Available only for Android and iOS Platform.\n     * @param {string} color - Color for push notification. Available only for Android Platform.\n     * @param {string} tag - Tag for push notification. Available only for Android Platform.\n     * @param {number} badge - Badge for push notification. Available only for iOS Platform.\n     * @param {boolean} draft - Is message a draft\n     * @param {string} scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @param {boolean} contentAvailable - If set to true, the notification will be delivered in the background. Available only for iOS Platform.\n     * @param {boolean} critical - If set to true, the notification will be marked as critical. This requires the app to have the critical notification entitlement. Available only for iOS Platform.\n     * @param {MessagePriority} priority - Set the notification priority. \"normal\" will consider device state and may not deliver notifications immediately. \"high\" will always attempt to immediately deliver the notification.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createPush(messageId: string, title?: string, body?: string, topics?: string[], users?: string[], targets?: string[], data?: object, action?: string, image?: string, icon?: string, sound?: string, color?: string, tag?: string, badge?: number, draft?: boolean, scheduledAt?: string, contentAvailable?: boolean, critical?: boolean, priority?: MessagePriority): Promise<Models.Message>;\n    createPush(\n        paramsOrFirst: { messageId: string, title?: string, body?: string, topics?: string[], users?: string[], targets?: string[], data?: object, action?: string, image?: string, icon?: string, sound?: string, color?: string, tag?: string, badge?: number, draft?: boolean, scheduledAt?: string, contentAvailable?: boolean, critical?: boolean, priority?: MessagePriority } | string,\n        ...rest: [(string)?, (string)?, (string[])?, (string[])?, (string[])?, (object)?, (string)?, (string)?, (string)?, (string)?, (string)?, (string)?, (number)?, (boolean)?, (string)?, (boolean)?, (boolean)?, (MessagePriority)?]    \n    ): Promise<Models.Message> {\n        let params: { messageId: string, title?: string, body?: string, topics?: string[], users?: string[], targets?: string[], data?: object, action?: string, image?: string, icon?: string, sound?: string, color?: string, tag?: string, badge?: number, draft?: boolean, scheduledAt?: string, contentAvailable?: boolean, critical?: boolean, priority?: MessagePriority };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { messageId: string, title?: string, body?: string, topics?: string[], users?: string[], targets?: string[], data?: object, action?: string, image?: string, icon?: string, sound?: string, color?: string, tag?: string, badge?: number, draft?: boolean, scheduledAt?: string, contentAvailable?: boolean, critical?: boolean, priority?: MessagePriority };\n        } else {\n            params = {\n                messageId: paramsOrFirst as string,\n                title: rest[0] as string,\n                body: rest[1] as string,\n                topics: rest[2] as string[],\n                users: rest[3] as string[],\n                targets: rest[4] as string[],\n                data: rest[5] as object,\n                action: rest[6] as string,\n                image: rest[7] as string,\n                icon: rest[8] as string,\n                sound: rest[9] as string,\n                color: rest[10] as string,\n                tag: rest[11] as string,\n                badge: rest[12] as number,\n                draft: rest[13] as boolean,\n                scheduledAt: rest[14] as string,\n                contentAvailable: rest[15] as boolean,\n                critical: rest[16] as boolean,\n                priority: rest[17] as MessagePriority            \n            };\n        }\n        \n        const messageId = params.messageId;\n        const title = params.title;\n        const body = params.body;\n        const topics = params.topics;\n        const users = params.users;\n        const targets = params.targets;\n        const data = params.data;\n        const action = params.action;\n        const image = params.image;\n        const icon = params.icon;\n        const sound = params.sound;\n        const color = params.color;\n        const tag = params.tag;\n        const badge = params.badge;\n        const draft = params.draft;\n        const scheduledAt = params.scheduledAt;\n        const contentAvailable = params.contentAvailable;\n        const critical = params.critical;\n        const priority = params.priority;\n\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        const apiPath = '/messaging/messages/push';\n        const payload: Payload = {};\n        if (typeof messageId !== 'undefined') {\n            payload['messageId'] = messageId;\n        }\n        if (typeof title !== 'undefined') {\n            payload['title'] = title;\n        }\n        if (typeof body !== 'undefined') {\n            payload['body'] = body;\n        }\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n        if (typeof action !== 'undefined') {\n            payload['action'] = action;\n        }\n        if (typeof image !== 'undefined') {\n            payload['image'] = image;\n        }\n        if (typeof icon !== 'undefined') {\n            payload['icon'] = icon;\n        }\n        if (typeof sound !== 'undefined') {\n            payload['sound'] = sound;\n        }\n        if (typeof color !== 'undefined') {\n            payload['color'] = color;\n        }\n        if (typeof tag !== 'undefined') {\n            payload['tag'] = tag;\n        }\n        if (typeof badge !== 'undefined') {\n            payload['badge'] = badge;\n        }\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        if (typeof contentAvailable !== 'undefined') {\n            payload['contentAvailable'] = contentAvailable;\n        }\n        if (typeof critical !== 'undefined') {\n            payload['critical'] = critical;\n        }\n        if (typeof priority !== 'undefined') {\n            payload['priority'] = priority;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a push notification by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.\n     * \n     *\n     * @param {string} params.messageId - Message ID.\n     * @param {string[]} params.topics - List of Topic IDs.\n     * @param {string[]} params.users - List of User IDs.\n     * @param {string[]} params.targets - List of Targets IDs.\n     * @param {string} params.title - Title for push notification.\n     * @param {string} params.body - Body for push notification.\n     * @param {object} params.data - Additional Data for push notification.\n     * @param {string} params.action - Action for push notification.\n     * @param {string} params.image - Image for push notification. Must be a compound bucket ID to file ID of a jpeg, png, or bmp image in Appwrite Storage. It should be formatted as <BUCKET_ID>:<FILE_ID>.\n     * @param {string} params.icon - Icon for push notification. Available only for Android and Web platforms.\n     * @param {string} params.sound - Sound for push notification. Available only for Android and iOS platforms.\n     * @param {string} params.color - Color for push notification. Available only for Android platforms.\n     * @param {string} params.tag - Tag for push notification. Available only for Android platforms.\n     * @param {number} params.badge - Badge for push notification. Available only for iOS platforms.\n     * @param {boolean} params.draft - Is message a draft\n     * @param {string} params.scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @param {boolean} params.contentAvailable - If set to true, the notification will be delivered in the background. Available only for iOS Platform.\n     * @param {boolean} params.critical - If set to true, the notification will be marked as critical. This requires the app to have the critical notification entitlement. Available only for iOS Platform.\n     * @param {MessagePriority} params.priority - Set the notification priority. \"normal\" will consider device battery state and may send notifications later. \"high\" will always attempt to immediately deliver the notification.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     */\n    updatePush(params: { messageId: string, topics?: string[], users?: string[], targets?: string[], title?: string, body?: string, data?: object, action?: string, image?: string, icon?: string, sound?: string, color?: string, tag?: string, badge?: number, draft?: boolean, scheduledAt?: string, contentAvailable?: boolean, critical?: boolean, priority?: MessagePriority  }): Promise<Models.Message>;\n    /**\n     * Update a push notification by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.\n     * \n     *\n     * @param {string} messageId - Message ID.\n     * @param {string[]} topics - List of Topic IDs.\n     * @param {string[]} users - List of User IDs.\n     * @param {string[]} targets - List of Targets IDs.\n     * @param {string} title - Title for push notification.\n     * @param {string} body - Body for push notification.\n     * @param {object} data - Additional Data for push notification.\n     * @param {string} action - Action for push notification.\n     * @param {string} image - Image for push notification. Must be a compound bucket ID to file ID of a jpeg, png, or bmp image in Appwrite Storage. It should be formatted as <BUCKET_ID>:<FILE_ID>.\n     * @param {string} icon - Icon for push notification. Available only for Android and Web platforms.\n     * @param {string} sound - Sound for push notification. Available only for Android and iOS platforms.\n     * @param {string} color - Color for push notification. Available only for Android platforms.\n     * @param {string} tag - Tag for push notification. Available only for Android platforms.\n     * @param {number} badge - Badge for push notification. Available only for iOS platforms.\n     * @param {boolean} draft - Is message a draft\n     * @param {string} scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @param {boolean} contentAvailable - If set to true, the notification will be delivered in the background. Available only for iOS Platform.\n     * @param {boolean} critical - If set to true, the notification will be marked as critical. This requires the app to have the critical notification entitlement. Available only for iOS Platform.\n     * @param {MessagePriority} priority - Set the notification priority. \"normal\" will consider device battery state and may send notifications later. \"high\" will always attempt to immediately deliver the notification.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePush(messageId: string, topics?: string[], users?: string[], targets?: string[], title?: string, body?: string, data?: object, action?: string, image?: string, icon?: string, sound?: string, color?: string, tag?: string, badge?: number, draft?: boolean, scheduledAt?: string, contentAvailable?: boolean, critical?: boolean, priority?: MessagePriority): Promise<Models.Message>;\n    updatePush(\n        paramsOrFirst: { messageId: string, topics?: string[], users?: string[], targets?: string[], title?: string, body?: string, data?: object, action?: string, image?: string, icon?: string, sound?: string, color?: string, tag?: string, badge?: number, draft?: boolean, scheduledAt?: string, contentAvailable?: boolean, critical?: boolean, priority?: MessagePriority } | string,\n        ...rest: [(string[])?, (string[])?, (string[])?, (string)?, (string)?, (object)?, (string)?, (string)?, (string)?, (string)?, (string)?, (string)?, (number)?, (boolean)?, (string)?, (boolean)?, (boolean)?, (MessagePriority)?]    \n    ): Promise<Models.Message> {\n        let params: { messageId: string, topics?: string[], users?: string[], targets?: string[], title?: string, body?: string, data?: object, action?: string, image?: string, icon?: string, sound?: string, color?: string, tag?: string, badge?: number, draft?: boolean, scheduledAt?: string, contentAvailable?: boolean, critical?: boolean, priority?: MessagePriority };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { messageId: string, topics?: string[], users?: string[], targets?: string[], title?: string, body?: string, data?: object, action?: string, image?: string, icon?: string, sound?: string, color?: string, tag?: string, badge?: number, draft?: boolean, scheduledAt?: string, contentAvailable?: boolean, critical?: boolean, priority?: MessagePriority };\n        } else {\n            params = {\n                messageId: paramsOrFirst as string,\n                topics: rest[0] as string[],\n                users: rest[1] as string[],\n                targets: rest[2] as string[],\n                title: rest[3] as string,\n                body: rest[4] as string,\n                data: rest[5] as object,\n                action: rest[6] as string,\n                image: rest[7] as string,\n                icon: rest[8] as string,\n                sound: rest[9] as string,\n                color: rest[10] as string,\n                tag: rest[11] as string,\n                badge: rest[12] as number,\n                draft: rest[13] as boolean,\n                scheduledAt: rest[14] as string,\n                contentAvailable: rest[15] as boolean,\n                critical: rest[16] as boolean,\n                priority: rest[17] as MessagePriority            \n            };\n        }\n        \n        const messageId = params.messageId;\n        const topics = params.topics;\n        const users = params.users;\n        const targets = params.targets;\n        const title = params.title;\n        const body = params.body;\n        const data = params.data;\n        const action = params.action;\n        const image = params.image;\n        const icon = params.icon;\n        const sound = params.sound;\n        const color = params.color;\n        const tag = params.tag;\n        const badge = params.badge;\n        const draft = params.draft;\n        const scheduledAt = params.scheduledAt;\n        const contentAvailable = params.contentAvailable;\n        const critical = params.critical;\n        const priority = params.priority;\n\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        const apiPath = '/messaging/messages/push/{messageId}'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n        if (typeof title !== 'undefined') {\n            payload['title'] = title;\n        }\n        if (typeof body !== 'undefined') {\n            payload['body'] = body;\n        }\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n        if (typeof action !== 'undefined') {\n            payload['action'] = action;\n        }\n        if (typeof image !== 'undefined') {\n            payload['image'] = image;\n        }\n        if (typeof icon !== 'undefined') {\n            payload['icon'] = icon;\n        }\n        if (typeof sound !== 'undefined') {\n            payload['sound'] = sound;\n        }\n        if (typeof color !== 'undefined') {\n            payload['color'] = color;\n        }\n        if (typeof tag !== 'undefined') {\n            payload['tag'] = tag;\n        }\n        if (typeof badge !== 'undefined') {\n            payload['badge'] = badge;\n        }\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        if (typeof contentAvailable !== 'undefined') {\n            payload['contentAvailable'] = contentAvailable;\n        }\n        if (typeof critical !== 'undefined') {\n            payload['critical'] = critical;\n        }\n        if (typeof priority !== 'undefined') {\n            payload['priority'] = priority;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new SMS message.\n     *\n     * @param {string} params.messageId - Message ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.content - SMS Content.\n     * @param {string[]} params.topics - List of Topic IDs.\n     * @param {string[]} params.users - List of User IDs.\n     * @param {string[]} params.targets - List of Targets IDs.\n     * @param {boolean} params.draft - Is message a draft\n     * @param {string} params.scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Messaging.createSMS` instead.\n     */\n    createSms(params: { messageId: string, content: string, topics?: string[], users?: string[], targets?: string[], draft?: boolean, scheduledAt?: string  }): Promise<Models.Message>;\n    /**\n     * Create a new SMS message.\n     *\n     * @param {string} messageId - Message ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} content - SMS Content.\n     * @param {string[]} topics - List of Topic IDs.\n     * @param {string[]} users - List of User IDs.\n     * @param {string[]} targets - List of Targets IDs.\n     * @param {boolean} draft - Is message a draft\n     * @param {string} scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createSms(messageId: string, content: string, topics?: string[], users?: string[], targets?: string[], draft?: boolean, scheduledAt?: string): Promise<Models.Message>;\n    createSms(\n        paramsOrFirst: { messageId: string, content: string, topics?: string[], users?: string[], targets?: string[], draft?: boolean, scheduledAt?: string } | string,\n        ...rest: [(string)?, (string[])?, (string[])?, (string[])?, (boolean)?, (string)?]    \n    ): Promise<Models.Message> {\n        let params: { messageId: string, content: string, topics?: string[], users?: string[], targets?: string[], draft?: boolean, scheduledAt?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { messageId: string, content: string, topics?: string[], users?: string[], targets?: string[], draft?: boolean, scheduledAt?: string };\n        } else {\n            params = {\n                messageId: paramsOrFirst as string,\n                content: rest[0] as string,\n                topics: rest[1] as string[],\n                users: rest[2] as string[],\n                targets: rest[3] as string[],\n                draft: rest[4] as boolean,\n                scheduledAt: rest[5] as string            \n            };\n        }\n        \n        const messageId = params.messageId;\n        const content = params.content;\n        const topics = params.topics;\n        const users = params.users;\n        const targets = params.targets;\n        const draft = params.draft;\n        const scheduledAt = params.scheduledAt;\n\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        if (typeof content === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"content\"');\n        }\n\n        const apiPath = '/messaging/messages/sms';\n        const payload: Payload = {};\n        if (typeof messageId !== 'undefined') {\n            payload['messageId'] = messageId;\n        }\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new SMS message.\n     *\n     * @param {string} params.messageId - Message ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.content - SMS Content.\n     * @param {string[]} params.topics - List of Topic IDs.\n     * @param {string[]} params.users - List of User IDs.\n     * @param {string[]} params.targets - List of Targets IDs.\n     * @param {boolean} params.draft - Is message a draft\n     * @param {string} params.scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     */\n    createSMS(params: { messageId: string, content: string, topics?: string[], users?: string[], targets?: string[], draft?: boolean, scheduledAt?: string  }): Promise<Models.Message>;\n    /**\n     * Create a new SMS message.\n     *\n     * @param {string} messageId - Message ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} content - SMS Content.\n     * @param {string[]} topics - List of Topic IDs.\n     * @param {string[]} users - List of User IDs.\n     * @param {string[]} targets - List of Targets IDs.\n     * @param {boolean} draft - Is message a draft\n     * @param {string} scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createSMS(messageId: string, content: string, topics?: string[], users?: string[], targets?: string[], draft?: boolean, scheduledAt?: string): Promise<Models.Message>;\n    createSMS(\n        paramsOrFirst: { messageId: string, content: string, topics?: string[], users?: string[], targets?: string[], draft?: boolean, scheduledAt?: string } | string,\n        ...rest: [(string)?, (string[])?, (string[])?, (string[])?, (boolean)?, (string)?]    \n    ): Promise<Models.Message> {\n        let params: { messageId: string, content: string, topics?: string[], users?: string[], targets?: string[], draft?: boolean, scheduledAt?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { messageId: string, content: string, topics?: string[], users?: string[], targets?: string[], draft?: boolean, scheduledAt?: string };\n        } else {\n            params = {\n                messageId: paramsOrFirst as string,\n                content: rest[0] as string,\n                topics: rest[1] as string[],\n                users: rest[2] as string[],\n                targets: rest[3] as string[],\n                draft: rest[4] as boolean,\n                scheduledAt: rest[5] as string            \n            };\n        }\n        \n        const messageId = params.messageId;\n        const content = params.content;\n        const topics = params.topics;\n        const users = params.users;\n        const targets = params.targets;\n        const draft = params.draft;\n        const scheduledAt = params.scheduledAt;\n\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        if (typeof content === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"content\"');\n        }\n\n        const apiPath = '/messaging/messages/sms';\n        const payload: Payload = {};\n        if (typeof messageId !== 'undefined') {\n            payload['messageId'] = messageId;\n        }\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update an SMS message by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.\n     * \n     *\n     * @param {string} params.messageId - Message ID.\n     * @param {string[]} params.topics - List of Topic IDs.\n     * @param {string[]} params.users - List of User IDs.\n     * @param {string[]} params.targets - List of Targets IDs.\n     * @param {string} params.content - Email Content.\n     * @param {boolean} params.draft - Is message a draft\n     * @param {string} params.scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Messaging.updateSMS` instead.\n     */\n    updateSms(params: { messageId: string, topics?: string[], users?: string[], targets?: string[], content?: string, draft?: boolean, scheduledAt?: string  }): Promise<Models.Message>;\n    /**\n     * Update an SMS message by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.\n     * \n     *\n     * @param {string} messageId - Message ID.\n     * @param {string[]} topics - List of Topic IDs.\n     * @param {string[]} users - List of User IDs.\n     * @param {string[]} targets - List of Targets IDs.\n     * @param {string} content - Email Content.\n     * @param {boolean} draft - Is message a draft\n     * @param {string} scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateSms(messageId: string, topics?: string[], users?: string[], targets?: string[], content?: string, draft?: boolean, scheduledAt?: string): Promise<Models.Message>;\n    updateSms(\n        paramsOrFirst: { messageId: string, topics?: string[], users?: string[], targets?: string[], content?: string, draft?: boolean, scheduledAt?: string } | string,\n        ...rest: [(string[])?, (string[])?, (string[])?, (string)?, (boolean)?, (string)?]    \n    ): Promise<Models.Message> {\n        let params: { messageId: string, topics?: string[], users?: string[], targets?: string[], content?: string, draft?: boolean, scheduledAt?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { messageId: string, topics?: string[], users?: string[], targets?: string[], content?: string, draft?: boolean, scheduledAt?: string };\n        } else {\n            params = {\n                messageId: paramsOrFirst as string,\n                topics: rest[0] as string[],\n                users: rest[1] as string[],\n                targets: rest[2] as string[],\n                content: rest[3] as string,\n                draft: rest[4] as boolean,\n                scheduledAt: rest[5] as string            \n            };\n        }\n        \n        const messageId = params.messageId;\n        const topics = params.topics;\n        const users = params.users;\n        const targets = params.targets;\n        const content = params.content;\n        const draft = params.draft;\n        const scheduledAt = params.scheduledAt;\n\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        const apiPath = '/messaging/messages/sms/{messageId}'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update an SMS message by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.\n     * \n     *\n     * @param {string} params.messageId - Message ID.\n     * @param {string[]} params.topics - List of Topic IDs.\n     * @param {string[]} params.users - List of User IDs.\n     * @param {string[]} params.targets - List of Targets IDs.\n     * @param {string} params.content - Email Content.\n     * @param {boolean} params.draft - Is message a draft\n     * @param {string} params.scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     */\n    updateSMS(params: { messageId: string, topics?: string[], users?: string[], targets?: string[], content?: string, draft?: boolean, scheduledAt?: string  }): Promise<Models.Message>;\n    /**\n     * Update an SMS message by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.\n     * \n     *\n     * @param {string} messageId - Message ID.\n     * @param {string[]} topics - List of Topic IDs.\n     * @param {string[]} users - List of User IDs.\n     * @param {string[]} targets - List of Targets IDs.\n     * @param {string} content - Email Content.\n     * @param {boolean} draft - Is message a draft\n     * @param {string} scheduledAt - Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateSMS(messageId: string, topics?: string[], users?: string[], targets?: string[], content?: string, draft?: boolean, scheduledAt?: string): Promise<Models.Message>;\n    updateSMS(\n        paramsOrFirst: { messageId: string, topics?: string[], users?: string[], targets?: string[], content?: string, draft?: boolean, scheduledAt?: string } | string,\n        ...rest: [(string[])?, (string[])?, (string[])?, (string)?, (boolean)?, (string)?]    \n    ): Promise<Models.Message> {\n        let params: { messageId: string, topics?: string[], users?: string[], targets?: string[], content?: string, draft?: boolean, scheduledAt?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { messageId: string, topics?: string[], users?: string[], targets?: string[], content?: string, draft?: boolean, scheduledAt?: string };\n        } else {\n            params = {\n                messageId: paramsOrFirst as string,\n                topics: rest[0] as string[],\n                users: rest[1] as string[],\n                targets: rest[2] as string[],\n                content: rest[3] as string,\n                draft: rest[4] as boolean,\n                scheduledAt: rest[5] as string            \n            };\n        }\n        \n        const messageId = params.messageId;\n        const topics = params.topics;\n        const users = params.users;\n        const targets = params.targets;\n        const content = params.content;\n        const draft = params.draft;\n        const scheduledAt = params.scheduledAt;\n\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        const apiPath = '/messaging/messages/sms/{messageId}'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a message by its unique ID.\n     * \n     *\n     * @param {string} params.messageId - Message ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     */\n    getMessage(params: { messageId: string  }): Promise<Models.Message>;\n    /**\n     * Get a message by its unique ID.\n     * \n     *\n     * @param {string} messageId - Message ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getMessage(messageId: string): Promise<Models.Message>;\n    getMessage(\n        paramsOrFirst: { messageId: string } | string    \n    ): Promise<Models.Message> {\n        let params: { messageId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { messageId: string };\n        } else {\n            params = {\n                messageId: paramsOrFirst as string            \n            };\n        }\n        \n        const messageId = params.messageId;\n\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        const apiPath = '/messaging/messages/{messageId}'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a message. If the message is not a draft or scheduled, but has been sent, this will not recall the message.\n     *\n     * @param {string} params.messageId - Message ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    delete(params: { messageId: string  }): Promise<{}>;\n    /**\n     * Delete a message. If the message is not a draft or scheduled, but has been sent, this will not recall the message.\n     *\n     * @param {string} messageId - Message ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    delete(messageId: string): Promise<{}>;\n    delete(\n        paramsOrFirst: { messageId: string } | string    \n    ): Promise<{}> {\n        let params: { messageId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { messageId: string };\n        } else {\n            params = {\n                messageId: paramsOrFirst as string            \n            };\n        }\n        \n        const messageId = params.messageId;\n\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        const apiPath = '/messaging/messages/{messageId}'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the message activity logs listed by its unique ID.\n     *\n     * @param {string} params.messageId - Message ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     */\n    listMessageLogs(params: { messageId: string, queries?: string[]  }): Promise<Models.LogList>;\n    /**\n     * Get the message activity logs listed by its unique ID.\n     *\n     * @param {string} messageId - Message ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listMessageLogs(messageId: string, queries?: string[]): Promise<Models.LogList>;\n    listMessageLogs(\n        paramsOrFirst: { messageId: string, queries?: string[] } | string,\n        ...rest: [(string[])?]    \n    ): Promise<Models.LogList> {\n        let params: { messageId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { messageId: string, queries?: string[] };\n        } else {\n            params = {\n                messageId: paramsOrFirst as string,\n                queries: rest[0] as string[]            \n            };\n        }\n        \n        const messageId = params.messageId;\n        const queries = params.queries;\n\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        const apiPath = '/messaging/messages/{messageId}/logs'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of the targets associated with a message.\n     *\n     * @param {string} params.messageId - Message ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, providerId, identifier, providerType\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.TargetList>}\n     */\n    listTargets(params: { messageId: string, queries?: string[]  }): Promise<Models.TargetList>;\n    /**\n     * Get a list of the targets associated with a message.\n     *\n     * @param {string} messageId - Message ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, providerId, identifier, providerType\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.TargetList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listTargets(messageId: string, queries?: string[]): Promise<Models.TargetList>;\n    listTargets(\n        paramsOrFirst: { messageId: string, queries?: string[] } | string,\n        ...rest: [(string[])?]    \n    ): Promise<Models.TargetList> {\n        let params: { messageId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { messageId: string, queries?: string[] };\n        } else {\n            params = {\n                messageId: paramsOrFirst as string,\n                queries: rest[0] as string[]            \n            };\n        }\n        \n        const messageId = params.messageId;\n        const queries = params.queries;\n\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        const apiPath = '/messaging/messages/{messageId}/targets'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all providers from the current Appwrite project.\n     *\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, provider, type, enabled\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ProviderList>}\n     */\n    listProviders(params?: { queries?: string[], search?: string  }): Promise<Models.ProviderList>;\n    /**\n     * Get a list of all providers from the current Appwrite project.\n     *\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, provider, type, enabled\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ProviderList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listProviders(queries?: string[], search?: string): Promise<Models.ProviderList>;\n    listProviders(\n        paramsOrFirst?: { queries?: string[], search?: string } | string[],\n        ...rest: [(string)?]    \n    ): Promise<Models.ProviderList> {\n        let params: { queries?: string[], search?: string };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { queries?: string[], search?: string };\n        } else {\n            params = {\n                queries: paramsOrFirst as string[],\n                search: rest[0] as string            \n            };\n        }\n        \n        const queries = params.queries;\n        const search = params.search;\n\n\n        const apiPath = '/messaging/providers';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Apple Push Notification service provider.\n     *\n     * @param {string} params.providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Provider name.\n     * @param {string} params.authKey - APNS authentication key.\n     * @param {string} params.authKeyId - APNS authentication key ID.\n     * @param {string} params.teamId - APNS team ID.\n     * @param {string} params.bundleId - APNS bundle ID.\n     * @param {boolean} params.sandbox - Use APNS sandbox environment.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Messaging.createAPNSProvider` instead.\n     */\n    createApnsProvider(params: { providerId: string, name: string, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Create a new Apple Push Notification service provider.\n     *\n     * @param {string} providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Provider name.\n     * @param {string} authKey - APNS authentication key.\n     * @param {string} authKeyId - APNS authentication key ID.\n     * @param {string} teamId - APNS team ID.\n     * @param {string} bundleId - APNS bundle ID.\n     * @param {boolean} sandbox - Use APNS sandbox environment.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createApnsProvider(providerId: string, name: string, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean, enabled?: boolean): Promise<Models.Provider>;\n    createApnsProvider(\n        paramsOrFirst: { providerId: string, name: string, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string)?, (string)?, (string)?, (boolean)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name: string, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name: string, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                authKey: rest[1] as string,\n                authKeyId: rest[2] as string,\n                teamId: rest[3] as string,\n                bundleId: rest[4] as string,\n                sandbox: rest[5] as boolean,\n                enabled: rest[6] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const authKey = params.authKey;\n        const authKeyId = params.authKeyId;\n        const teamId = params.teamId;\n        const bundleId = params.bundleId;\n        const sandbox = params.sandbox;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/messaging/providers/apns';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n        if (typeof authKeyId !== 'undefined') {\n            payload['authKeyId'] = authKeyId;\n        }\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n        if (typeof bundleId !== 'undefined') {\n            payload['bundleId'] = bundleId;\n        }\n        if (typeof sandbox !== 'undefined') {\n            payload['sandbox'] = sandbox;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Apple Push Notification service provider.\n     *\n     * @param {string} params.providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Provider name.\n     * @param {string} params.authKey - APNS authentication key.\n     * @param {string} params.authKeyId - APNS authentication key ID.\n     * @param {string} params.teamId - APNS team ID.\n     * @param {string} params.bundleId - APNS bundle ID.\n     * @param {boolean} params.sandbox - Use APNS sandbox environment.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    createAPNSProvider(params: { providerId: string, name: string, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Create a new Apple Push Notification service provider.\n     *\n     * @param {string} providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Provider name.\n     * @param {string} authKey - APNS authentication key.\n     * @param {string} authKeyId - APNS authentication key ID.\n     * @param {string} teamId - APNS team ID.\n     * @param {string} bundleId - APNS bundle ID.\n     * @param {boolean} sandbox - Use APNS sandbox environment.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createAPNSProvider(providerId: string, name: string, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean, enabled?: boolean): Promise<Models.Provider>;\n    createAPNSProvider(\n        paramsOrFirst: { providerId: string, name: string, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string)?, (string)?, (string)?, (boolean)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name: string, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name: string, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                authKey: rest[1] as string,\n                authKeyId: rest[2] as string,\n                teamId: rest[3] as string,\n                bundleId: rest[4] as string,\n                sandbox: rest[5] as boolean,\n                enabled: rest[6] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const authKey = params.authKey;\n        const authKeyId = params.authKeyId;\n        const teamId = params.teamId;\n        const bundleId = params.bundleId;\n        const sandbox = params.sandbox;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/messaging/providers/apns';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n        if (typeof authKeyId !== 'undefined') {\n            payload['authKeyId'] = authKeyId;\n        }\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n        if (typeof bundleId !== 'undefined') {\n            payload['bundleId'] = bundleId;\n        }\n        if (typeof sandbox !== 'undefined') {\n            payload['sandbox'] = sandbox;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a Apple Push Notification service provider by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @param {string} params.name - Provider name.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @param {string} params.authKey - APNS authentication key.\n     * @param {string} params.authKeyId - APNS authentication key ID.\n     * @param {string} params.teamId - APNS team ID.\n     * @param {string} params.bundleId - APNS bundle ID.\n     * @param {boolean} params.sandbox - Use APNS sandbox environment.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Messaging.updateAPNSProvider` instead.\n     */\n    updateApnsProvider(params: { providerId: string, name?: string, enabled?: boolean, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Update a Apple Push Notification service provider by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @param {string} name - Provider name.\n     * @param {boolean} enabled - Set as enabled.\n     * @param {string} authKey - APNS authentication key.\n     * @param {string} authKeyId - APNS authentication key ID.\n     * @param {string} teamId - APNS team ID.\n     * @param {string} bundleId - APNS bundle ID.\n     * @param {boolean} sandbox - Use APNS sandbox environment.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateApnsProvider(providerId: string, name?: string, enabled?: boolean, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean): Promise<Models.Provider>;\n    updateApnsProvider(\n        paramsOrFirst: { providerId: string, name?: string, enabled?: boolean, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean } | string,\n        ...rest: [(string)?, (boolean)?, (string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name?: string, enabled?: boolean, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name?: string, enabled?: boolean, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                enabled: rest[1] as boolean,\n                authKey: rest[2] as string,\n                authKeyId: rest[3] as string,\n                teamId: rest[4] as string,\n                bundleId: rest[5] as string,\n                sandbox: rest[6] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const enabled = params.enabled;\n        const authKey = params.authKey;\n        const authKeyId = params.authKeyId;\n        const teamId = params.teamId;\n        const bundleId = params.bundleId;\n        const sandbox = params.sandbox;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/apns/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n        if (typeof authKeyId !== 'undefined') {\n            payload['authKeyId'] = authKeyId;\n        }\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n        if (typeof bundleId !== 'undefined') {\n            payload['bundleId'] = bundleId;\n        }\n        if (typeof sandbox !== 'undefined') {\n            payload['sandbox'] = sandbox;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a Apple Push Notification service provider by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @param {string} params.name - Provider name.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @param {string} params.authKey - APNS authentication key.\n     * @param {string} params.authKeyId - APNS authentication key ID.\n     * @param {string} params.teamId - APNS team ID.\n     * @param {string} params.bundleId - APNS bundle ID.\n     * @param {boolean} params.sandbox - Use APNS sandbox environment.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    updateAPNSProvider(params: { providerId: string, name?: string, enabled?: boolean, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Update a Apple Push Notification service provider by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @param {string} name - Provider name.\n     * @param {boolean} enabled - Set as enabled.\n     * @param {string} authKey - APNS authentication key.\n     * @param {string} authKeyId - APNS authentication key ID.\n     * @param {string} teamId - APNS team ID.\n     * @param {string} bundleId - APNS bundle ID.\n     * @param {boolean} sandbox - Use APNS sandbox environment.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateAPNSProvider(providerId: string, name?: string, enabled?: boolean, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean): Promise<Models.Provider>;\n    updateAPNSProvider(\n        paramsOrFirst: { providerId: string, name?: string, enabled?: boolean, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean } | string,\n        ...rest: [(string)?, (boolean)?, (string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name?: string, enabled?: boolean, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name?: string, enabled?: boolean, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                enabled: rest[1] as boolean,\n                authKey: rest[2] as string,\n                authKeyId: rest[3] as string,\n                teamId: rest[4] as string,\n                bundleId: rest[5] as string,\n                sandbox: rest[6] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const enabled = params.enabled;\n        const authKey = params.authKey;\n        const authKeyId = params.authKeyId;\n        const teamId = params.teamId;\n        const bundleId = params.bundleId;\n        const sandbox = params.sandbox;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/apns/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n        if (typeof authKeyId !== 'undefined') {\n            payload['authKeyId'] = authKeyId;\n        }\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n        if (typeof bundleId !== 'undefined') {\n            payload['bundleId'] = bundleId;\n        }\n        if (typeof sandbox !== 'undefined') {\n            payload['sandbox'] = sandbox;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Firebase Cloud Messaging provider.\n     *\n     * @param {string} params.providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Provider name.\n     * @param {object} params.serviceAccountJSON - FCM service account JSON.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Messaging.createFCMProvider` instead.\n     */\n    createFcmProvider(params: { providerId: string, name: string, serviceAccountJSON?: object, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Create a new Firebase Cloud Messaging provider.\n     *\n     * @param {string} providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Provider name.\n     * @param {object} serviceAccountJSON - FCM service account JSON.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createFcmProvider(providerId: string, name: string, serviceAccountJSON?: object, enabled?: boolean): Promise<Models.Provider>;\n    createFcmProvider(\n        paramsOrFirst: { providerId: string, name: string, serviceAccountJSON?: object, enabled?: boolean } | string,\n        ...rest: [(string)?, (object)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name: string, serviceAccountJSON?: object, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name: string, serviceAccountJSON?: object, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                serviceAccountJSON: rest[1] as object,\n                enabled: rest[2] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const serviceAccountJSON = params.serviceAccountJSON;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/messaging/providers/fcm';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof serviceAccountJSON !== 'undefined') {\n            payload['serviceAccountJSON'] = serviceAccountJSON;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Firebase Cloud Messaging provider.\n     *\n     * @param {string} params.providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Provider name.\n     * @param {object} params.serviceAccountJSON - FCM service account JSON.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    createFCMProvider(params: { providerId: string, name: string, serviceAccountJSON?: object, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Create a new Firebase Cloud Messaging provider.\n     *\n     * @param {string} providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Provider name.\n     * @param {object} serviceAccountJSON - FCM service account JSON.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createFCMProvider(providerId: string, name: string, serviceAccountJSON?: object, enabled?: boolean): Promise<Models.Provider>;\n    createFCMProvider(\n        paramsOrFirst: { providerId: string, name: string, serviceAccountJSON?: object, enabled?: boolean } | string,\n        ...rest: [(string)?, (object)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name: string, serviceAccountJSON?: object, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name: string, serviceAccountJSON?: object, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                serviceAccountJSON: rest[1] as object,\n                enabled: rest[2] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const serviceAccountJSON = params.serviceAccountJSON;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/messaging/providers/fcm';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof serviceAccountJSON !== 'undefined') {\n            payload['serviceAccountJSON'] = serviceAccountJSON;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a Firebase Cloud Messaging provider by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @param {string} params.name - Provider name.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @param {object} params.serviceAccountJSON - FCM service account JSON.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Messaging.updateFCMProvider` instead.\n     */\n    updateFcmProvider(params: { providerId: string, name?: string, enabled?: boolean, serviceAccountJSON?: object  }): Promise<Models.Provider>;\n    /**\n     * Update a Firebase Cloud Messaging provider by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @param {string} name - Provider name.\n     * @param {boolean} enabled - Set as enabled.\n     * @param {object} serviceAccountJSON - FCM service account JSON.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateFcmProvider(providerId: string, name?: string, enabled?: boolean, serviceAccountJSON?: object): Promise<Models.Provider>;\n    updateFcmProvider(\n        paramsOrFirst: { providerId: string, name?: string, enabled?: boolean, serviceAccountJSON?: object } | string,\n        ...rest: [(string)?, (boolean)?, (object)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name?: string, enabled?: boolean, serviceAccountJSON?: object };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name?: string, enabled?: boolean, serviceAccountJSON?: object };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                enabled: rest[1] as boolean,\n                serviceAccountJSON: rest[2] as object            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const enabled = params.enabled;\n        const serviceAccountJSON = params.serviceAccountJSON;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/fcm/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof serviceAccountJSON !== 'undefined') {\n            payload['serviceAccountJSON'] = serviceAccountJSON;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a Firebase Cloud Messaging provider by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @param {string} params.name - Provider name.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @param {object} params.serviceAccountJSON - FCM service account JSON.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    updateFCMProvider(params: { providerId: string, name?: string, enabled?: boolean, serviceAccountJSON?: object  }): Promise<Models.Provider>;\n    /**\n     * Update a Firebase Cloud Messaging provider by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @param {string} name - Provider name.\n     * @param {boolean} enabled - Set as enabled.\n     * @param {object} serviceAccountJSON - FCM service account JSON.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateFCMProvider(providerId: string, name?: string, enabled?: boolean, serviceAccountJSON?: object): Promise<Models.Provider>;\n    updateFCMProvider(\n        paramsOrFirst: { providerId: string, name?: string, enabled?: boolean, serviceAccountJSON?: object } | string,\n        ...rest: [(string)?, (boolean)?, (object)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name?: string, enabled?: boolean, serviceAccountJSON?: object };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name?: string, enabled?: boolean, serviceAccountJSON?: object };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                enabled: rest[1] as boolean,\n                serviceAccountJSON: rest[2] as object            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const enabled = params.enabled;\n        const serviceAccountJSON = params.serviceAccountJSON;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/fcm/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof serviceAccountJSON !== 'undefined') {\n            payload['serviceAccountJSON'] = serviceAccountJSON;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Mailgun provider.\n     *\n     * @param {string} params.providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Provider name.\n     * @param {string} params.apiKey - Mailgun API Key.\n     * @param {string} params.domain - Mailgun Domain.\n     * @param {boolean} params.isEuRegion - Set as EU region.\n     * @param {string} params.fromName - Sender Name.\n     * @param {string} params.fromEmail - Sender email address.\n     * @param {string} params.replyToName - Name set in the reply to field for the mail. Default value is sender name. Reply to name must have reply to email as well.\n     * @param {string} params.replyToEmail - Email set in the reply to field for the mail. Default value is sender email. Reply to email must have reply to name as well.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    createMailgunProvider(params: { providerId: string, name: string, apiKey?: string, domain?: string, isEuRegion?: boolean, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Create a new Mailgun provider.\n     *\n     * @param {string} providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Provider name.\n     * @param {string} apiKey - Mailgun API Key.\n     * @param {string} domain - Mailgun Domain.\n     * @param {boolean} isEuRegion - Set as EU region.\n     * @param {string} fromName - Sender Name.\n     * @param {string} fromEmail - Sender email address.\n     * @param {string} replyToName - Name set in the reply to field for the mail. Default value is sender name. Reply to name must have reply to email as well.\n     * @param {string} replyToEmail - Email set in the reply to field for the mail. Default value is sender email. Reply to email must have reply to name as well.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createMailgunProvider(providerId: string, name: string, apiKey?: string, domain?: string, isEuRegion?: boolean, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean): Promise<Models.Provider>;\n    createMailgunProvider(\n        paramsOrFirst: { providerId: string, name: string, apiKey?: string, domain?: string, isEuRegion?: boolean, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string)?, (boolean)?, (string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name: string, apiKey?: string, domain?: string, isEuRegion?: boolean, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name: string, apiKey?: string, domain?: string, isEuRegion?: boolean, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                apiKey: rest[1] as string,\n                domain: rest[2] as string,\n                isEuRegion: rest[3] as boolean,\n                fromName: rest[4] as string,\n                fromEmail: rest[5] as string,\n                replyToName: rest[6] as string,\n                replyToEmail: rest[7] as string,\n                enabled: rest[8] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const apiKey = params.apiKey;\n        const domain = params.domain;\n        const isEuRegion = params.isEuRegion;\n        const fromName = params.fromName;\n        const fromEmail = params.fromEmail;\n        const replyToName = params.replyToName;\n        const replyToEmail = params.replyToEmail;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/messaging/providers/mailgun';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof domain !== 'undefined') {\n            payload['domain'] = domain;\n        }\n        if (typeof isEuRegion !== 'undefined') {\n            payload['isEuRegion'] = isEuRegion;\n        }\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a Mailgun provider by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @param {string} params.name - Provider name.\n     * @param {string} params.apiKey - Mailgun API Key.\n     * @param {string} params.domain - Mailgun Domain.\n     * @param {boolean} params.isEuRegion - Set as EU region.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @param {string} params.fromName - Sender Name.\n     * @param {string} params.fromEmail - Sender email address.\n     * @param {string} params.replyToName - Name set in the reply to field for the mail. Default value is sender name.\n     * @param {string} params.replyToEmail - Email set in the reply to field for the mail. Default value is sender email.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    updateMailgunProvider(params: { providerId: string, name?: string, apiKey?: string, domain?: string, isEuRegion?: boolean, enabled?: boolean, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string  }): Promise<Models.Provider>;\n    /**\n     * Update a Mailgun provider by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @param {string} name - Provider name.\n     * @param {string} apiKey - Mailgun API Key.\n     * @param {string} domain - Mailgun Domain.\n     * @param {boolean} isEuRegion - Set as EU region.\n     * @param {boolean} enabled - Set as enabled.\n     * @param {string} fromName - Sender Name.\n     * @param {string} fromEmail - Sender email address.\n     * @param {string} replyToName - Name set in the reply to field for the mail. Default value is sender name.\n     * @param {string} replyToEmail - Email set in the reply to field for the mail. Default value is sender email.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateMailgunProvider(providerId: string, name?: string, apiKey?: string, domain?: string, isEuRegion?: boolean, enabled?: boolean, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string): Promise<Models.Provider>;\n    updateMailgunProvider(\n        paramsOrFirst: { providerId: string, name?: string, apiKey?: string, domain?: string, isEuRegion?: boolean, enabled?: boolean, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string } | string,\n        ...rest: [(string)?, (string)?, (string)?, (boolean)?, (boolean)?, (string)?, (string)?, (string)?, (string)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name?: string, apiKey?: string, domain?: string, isEuRegion?: boolean, enabled?: boolean, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name?: string, apiKey?: string, domain?: string, isEuRegion?: boolean, enabled?: boolean, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                apiKey: rest[1] as string,\n                domain: rest[2] as string,\n                isEuRegion: rest[3] as boolean,\n                enabled: rest[4] as boolean,\n                fromName: rest[5] as string,\n                fromEmail: rest[6] as string,\n                replyToName: rest[7] as string,\n                replyToEmail: rest[8] as string            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const apiKey = params.apiKey;\n        const domain = params.domain;\n        const isEuRegion = params.isEuRegion;\n        const enabled = params.enabled;\n        const fromName = params.fromName;\n        const fromEmail = params.fromEmail;\n        const replyToName = params.replyToName;\n        const replyToEmail = params.replyToEmail;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/mailgun/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof domain !== 'undefined') {\n            payload['domain'] = domain;\n        }\n        if (typeof isEuRegion !== 'undefined') {\n            payload['isEuRegion'] = isEuRegion;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new MSG91 provider.\n     *\n     * @param {string} params.providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Provider name.\n     * @param {string} params.templateId - Msg91 template ID\n     * @param {string} params.senderId - Msg91 sender ID.\n     * @param {string} params.authKey - Msg91 auth key.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    createMsg91Provider(params: { providerId: string, name: string, templateId?: string, senderId?: string, authKey?: string, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Create a new MSG91 provider.\n     *\n     * @param {string} providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Provider name.\n     * @param {string} templateId - Msg91 template ID\n     * @param {string} senderId - Msg91 sender ID.\n     * @param {string} authKey - Msg91 auth key.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createMsg91Provider(providerId: string, name: string, templateId?: string, senderId?: string, authKey?: string, enabled?: boolean): Promise<Models.Provider>;\n    createMsg91Provider(\n        paramsOrFirst: { providerId: string, name: string, templateId?: string, senderId?: string, authKey?: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name: string, templateId?: string, senderId?: string, authKey?: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name: string, templateId?: string, senderId?: string, authKey?: string, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                templateId: rest[1] as string,\n                senderId: rest[2] as string,\n                authKey: rest[3] as string,\n                enabled: rest[4] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const templateId = params.templateId;\n        const senderId = params.senderId;\n        const authKey = params.authKey;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/messaging/providers/msg91';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof templateId !== 'undefined') {\n            payload['templateId'] = templateId;\n        }\n        if (typeof senderId !== 'undefined') {\n            payload['senderId'] = senderId;\n        }\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a MSG91 provider by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @param {string} params.name - Provider name.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @param {string} params.templateId - Msg91 template ID.\n     * @param {string} params.senderId - Msg91 sender ID.\n     * @param {string} params.authKey - Msg91 auth key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    updateMsg91Provider(params: { providerId: string, name?: string, enabled?: boolean, templateId?: string, senderId?: string, authKey?: string  }): Promise<Models.Provider>;\n    /**\n     * Update a MSG91 provider by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @param {string} name - Provider name.\n     * @param {boolean} enabled - Set as enabled.\n     * @param {string} templateId - Msg91 template ID.\n     * @param {string} senderId - Msg91 sender ID.\n     * @param {string} authKey - Msg91 auth key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateMsg91Provider(providerId: string, name?: string, enabled?: boolean, templateId?: string, senderId?: string, authKey?: string): Promise<Models.Provider>;\n    updateMsg91Provider(\n        paramsOrFirst: { providerId: string, name?: string, enabled?: boolean, templateId?: string, senderId?: string, authKey?: string } | string,\n        ...rest: [(string)?, (boolean)?, (string)?, (string)?, (string)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name?: string, enabled?: boolean, templateId?: string, senderId?: string, authKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name?: string, enabled?: boolean, templateId?: string, senderId?: string, authKey?: string };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                enabled: rest[1] as boolean,\n                templateId: rest[2] as string,\n                senderId: rest[3] as string,\n                authKey: rest[4] as string            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const enabled = params.enabled;\n        const templateId = params.templateId;\n        const senderId = params.senderId;\n        const authKey = params.authKey;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/msg91/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof templateId !== 'undefined') {\n            payload['templateId'] = templateId;\n        }\n        if (typeof senderId !== 'undefined') {\n            payload['senderId'] = senderId;\n        }\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Sendgrid provider.\n     *\n     * @param {string} params.providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Provider name.\n     * @param {string} params.apiKey - Sendgrid API key.\n     * @param {string} params.fromName - Sender Name.\n     * @param {string} params.fromEmail - Sender email address.\n     * @param {string} params.replyToName - Name set in the reply to field for the mail. Default value is sender name.\n     * @param {string} params.replyToEmail - Email set in the reply to field for the mail. Default value is sender email.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    createSendgridProvider(params: { providerId: string, name: string, apiKey?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Create a new Sendgrid provider.\n     *\n     * @param {string} providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Provider name.\n     * @param {string} apiKey - Sendgrid API key.\n     * @param {string} fromName - Sender Name.\n     * @param {string} fromEmail - Sender email address.\n     * @param {string} replyToName - Name set in the reply to field for the mail. Default value is sender name.\n     * @param {string} replyToEmail - Email set in the reply to field for the mail. Default value is sender email.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createSendgridProvider(providerId: string, name: string, apiKey?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean): Promise<Models.Provider>;\n    createSendgridProvider(\n        paramsOrFirst: { providerId: string, name: string, apiKey?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name: string, apiKey?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name: string, apiKey?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                apiKey: rest[1] as string,\n                fromName: rest[2] as string,\n                fromEmail: rest[3] as string,\n                replyToName: rest[4] as string,\n                replyToEmail: rest[5] as string,\n                enabled: rest[6] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const apiKey = params.apiKey;\n        const fromName = params.fromName;\n        const fromEmail = params.fromEmail;\n        const replyToName = params.replyToName;\n        const replyToEmail = params.replyToEmail;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/messaging/providers/sendgrid';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a Sendgrid provider by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @param {string} params.name - Provider name.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @param {string} params.apiKey - Sendgrid API key.\n     * @param {string} params.fromName - Sender Name.\n     * @param {string} params.fromEmail - Sender email address.\n     * @param {string} params.replyToName - Name set in the Reply To field for the mail. Default value is Sender Name.\n     * @param {string} params.replyToEmail - Email set in the Reply To field for the mail. Default value is Sender Email.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    updateSendgridProvider(params: { providerId: string, name?: string, enabled?: boolean, apiKey?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string  }): Promise<Models.Provider>;\n    /**\n     * Update a Sendgrid provider by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @param {string} name - Provider name.\n     * @param {boolean} enabled - Set as enabled.\n     * @param {string} apiKey - Sendgrid API key.\n     * @param {string} fromName - Sender Name.\n     * @param {string} fromEmail - Sender email address.\n     * @param {string} replyToName - Name set in the Reply To field for the mail. Default value is Sender Name.\n     * @param {string} replyToEmail - Email set in the Reply To field for the mail. Default value is Sender Email.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateSendgridProvider(providerId: string, name?: string, enabled?: boolean, apiKey?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string): Promise<Models.Provider>;\n    updateSendgridProvider(\n        paramsOrFirst: { providerId: string, name?: string, enabled?: boolean, apiKey?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string } | string,\n        ...rest: [(string)?, (boolean)?, (string)?, (string)?, (string)?, (string)?, (string)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name?: string, enabled?: boolean, apiKey?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name?: string, enabled?: boolean, apiKey?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                enabled: rest[1] as boolean,\n                apiKey: rest[2] as string,\n                fromName: rest[3] as string,\n                fromEmail: rest[4] as string,\n                replyToName: rest[5] as string,\n                replyToEmail: rest[6] as string            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const enabled = params.enabled;\n        const apiKey = params.apiKey;\n        const fromName = params.fromName;\n        const fromEmail = params.fromEmail;\n        const replyToName = params.replyToName;\n        const replyToEmail = params.replyToEmail;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/sendgrid/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new SMTP provider.\n     *\n     * @param {string} params.providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Provider name.\n     * @param {string} params.host - SMTP hosts. Either a single hostname or multiple semicolon-delimited hostnames. You can also specify a different port for each host such as `smtp1.example.com:25;smtp2.example.com`. You can also specify encryption type, for example: `tls://smtp1.example.com:587;ssl://smtp2.example.com:465\"`. Hosts will be tried in order.\n     * @param {number} params.port - The default SMTP server port.\n     * @param {string} params.username - Authentication username.\n     * @param {string} params.password - Authentication password.\n     * @param {SmtpEncryption} params.encryption - Encryption type. Can be omitted, 'ssl', or 'tls'\n     * @param {boolean} params.autoTLS - Enable SMTP AutoTLS feature.\n     * @param {string} params.mailer - The value to use for the X-Mailer header.\n     * @param {string} params.fromName - Sender Name.\n     * @param {string} params.fromEmail - Sender email address.\n     * @param {string} params.replyToName - Name set in the reply to field for the mail. Default value is sender name.\n     * @param {string} params.replyToEmail - Email set in the reply to field for the mail. Default value is sender email.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Messaging.createSMTPProvider` instead.\n     */\n    createSmtpProvider(params: { providerId: string, name: string, host: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Create a new SMTP provider.\n     *\n     * @param {string} providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Provider name.\n     * @param {string} host - SMTP hosts. Either a single hostname or multiple semicolon-delimited hostnames. You can also specify a different port for each host such as `smtp1.example.com:25;smtp2.example.com`. You can also specify encryption type, for example: `tls://smtp1.example.com:587;ssl://smtp2.example.com:465\"`. Hosts will be tried in order.\n     * @param {number} port - The default SMTP server port.\n     * @param {string} username - Authentication username.\n     * @param {string} password - Authentication password.\n     * @param {SmtpEncryption} encryption - Encryption type. Can be omitted, 'ssl', or 'tls'\n     * @param {boolean} autoTLS - Enable SMTP AutoTLS feature.\n     * @param {string} mailer - The value to use for the X-Mailer header.\n     * @param {string} fromName - Sender Name.\n     * @param {string} fromEmail - Sender email address.\n     * @param {string} replyToName - Name set in the reply to field for the mail. Default value is sender name.\n     * @param {string} replyToEmail - Email set in the reply to field for the mail. Default value is sender email.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createSmtpProvider(providerId: string, name: string, host: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean): Promise<Models.Provider>;\n    createSmtpProvider(\n        paramsOrFirst: { providerId: string, name: string, host: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (number)?, (string)?, (string)?, (SmtpEncryption)?, (boolean)?, (string)?, (string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name: string, host: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name: string, host: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                host: rest[1] as string,\n                port: rest[2] as number,\n                username: rest[3] as string,\n                password: rest[4] as string,\n                encryption: rest[5] as SmtpEncryption,\n                autoTLS: rest[6] as boolean,\n                mailer: rest[7] as string,\n                fromName: rest[8] as string,\n                fromEmail: rest[9] as string,\n                replyToName: rest[10] as string,\n                replyToEmail: rest[11] as string,\n                enabled: rest[12] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const host = params.host;\n        const port = params.port;\n        const username = params.username;\n        const password = params.password;\n        const encryption = params.encryption;\n        const autoTLS = params.autoTLS;\n        const mailer = params.mailer;\n        const fromName = params.fromName;\n        const fromEmail = params.fromEmail;\n        const replyToName = params.replyToName;\n        const replyToEmail = params.replyToEmail;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof host === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"host\"');\n        }\n\n        const apiPath = '/messaging/providers/smtp';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof host !== 'undefined') {\n            payload['host'] = host;\n        }\n        if (typeof port !== 'undefined') {\n            payload['port'] = port;\n        }\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n        if (typeof autoTLS !== 'undefined') {\n            payload['autoTLS'] = autoTLS;\n        }\n        if (typeof mailer !== 'undefined') {\n            payload['mailer'] = mailer;\n        }\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new SMTP provider.\n     *\n     * @param {string} params.providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Provider name.\n     * @param {string} params.host - SMTP hosts. Either a single hostname or multiple semicolon-delimited hostnames. You can also specify a different port for each host such as `smtp1.example.com:25;smtp2.example.com`. You can also specify encryption type, for example: `tls://smtp1.example.com:587;ssl://smtp2.example.com:465\"`. Hosts will be tried in order.\n     * @param {number} params.port - The default SMTP server port.\n     * @param {string} params.username - Authentication username.\n     * @param {string} params.password - Authentication password.\n     * @param {SmtpEncryption} params.encryption - Encryption type. Can be omitted, 'ssl', or 'tls'\n     * @param {boolean} params.autoTLS - Enable SMTP AutoTLS feature.\n     * @param {string} params.mailer - The value to use for the X-Mailer header.\n     * @param {string} params.fromName - Sender Name.\n     * @param {string} params.fromEmail - Sender email address.\n     * @param {string} params.replyToName - Name set in the reply to field for the mail. Default value is sender name.\n     * @param {string} params.replyToEmail - Email set in the reply to field for the mail. Default value is sender email.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    createSMTPProvider(params: { providerId: string, name: string, host: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Create a new SMTP provider.\n     *\n     * @param {string} providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Provider name.\n     * @param {string} host - SMTP hosts. Either a single hostname or multiple semicolon-delimited hostnames. You can also specify a different port for each host such as `smtp1.example.com:25;smtp2.example.com`. You can also specify encryption type, for example: `tls://smtp1.example.com:587;ssl://smtp2.example.com:465\"`. Hosts will be tried in order.\n     * @param {number} port - The default SMTP server port.\n     * @param {string} username - Authentication username.\n     * @param {string} password - Authentication password.\n     * @param {SmtpEncryption} encryption - Encryption type. Can be omitted, 'ssl', or 'tls'\n     * @param {boolean} autoTLS - Enable SMTP AutoTLS feature.\n     * @param {string} mailer - The value to use for the X-Mailer header.\n     * @param {string} fromName - Sender Name.\n     * @param {string} fromEmail - Sender email address.\n     * @param {string} replyToName - Name set in the reply to field for the mail. Default value is sender name.\n     * @param {string} replyToEmail - Email set in the reply to field for the mail. Default value is sender email.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createSMTPProvider(providerId: string, name: string, host: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean): Promise<Models.Provider>;\n    createSMTPProvider(\n        paramsOrFirst: { providerId: string, name: string, host: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (number)?, (string)?, (string)?, (SmtpEncryption)?, (boolean)?, (string)?, (string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name: string, host: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name: string, host: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                host: rest[1] as string,\n                port: rest[2] as number,\n                username: rest[3] as string,\n                password: rest[4] as string,\n                encryption: rest[5] as SmtpEncryption,\n                autoTLS: rest[6] as boolean,\n                mailer: rest[7] as string,\n                fromName: rest[8] as string,\n                fromEmail: rest[9] as string,\n                replyToName: rest[10] as string,\n                replyToEmail: rest[11] as string,\n                enabled: rest[12] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const host = params.host;\n        const port = params.port;\n        const username = params.username;\n        const password = params.password;\n        const encryption = params.encryption;\n        const autoTLS = params.autoTLS;\n        const mailer = params.mailer;\n        const fromName = params.fromName;\n        const fromEmail = params.fromEmail;\n        const replyToName = params.replyToName;\n        const replyToEmail = params.replyToEmail;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof host === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"host\"');\n        }\n\n        const apiPath = '/messaging/providers/smtp';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof host !== 'undefined') {\n            payload['host'] = host;\n        }\n        if (typeof port !== 'undefined') {\n            payload['port'] = port;\n        }\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n        if (typeof autoTLS !== 'undefined') {\n            payload['autoTLS'] = autoTLS;\n        }\n        if (typeof mailer !== 'undefined') {\n            payload['mailer'] = mailer;\n        }\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a SMTP provider by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @param {string} params.name - Provider name.\n     * @param {string} params.host - SMTP hosts. Either a single hostname or multiple semicolon-delimited hostnames. You can also specify a different port for each host such as `smtp1.example.com:25;smtp2.example.com`. You can also specify encryption type, for example: `tls://smtp1.example.com:587;ssl://smtp2.example.com:465\"`. Hosts will be tried in order.\n     * @param {number} params.port - SMTP port.\n     * @param {string} params.username - Authentication username.\n     * @param {string} params.password - Authentication password.\n     * @param {SmtpEncryption} params.encryption - Encryption type. Can be 'ssl' or 'tls'\n     * @param {boolean} params.autoTLS - Enable SMTP AutoTLS feature.\n     * @param {string} params.mailer - The value to use for the X-Mailer header.\n     * @param {string} params.fromName - Sender Name.\n     * @param {string} params.fromEmail - Sender email address.\n     * @param {string} params.replyToName - Name set in the Reply To field for the mail. Default value is Sender Name.\n     * @param {string} params.replyToEmail - Email set in the Reply To field for the mail. Default value is Sender Email.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Messaging.updateSMTPProvider` instead.\n     */\n    updateSmtpProvider(params: { providerId: string, name?: string, host?: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Update a SMTP provider by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @param {string} name - Provider name.\n     * @param {string} host - SMTP hosts. Either a single hostname or multiple semicolon-delimited hostnames. You can also specify a different port for each host such as `smtp1.example.com:25;smtp2.example.com`. You can also specify encryption type, for example: `tls://smtp1.example.com:587;ssl://smtp2.example.com:465\"`. Hosts will be tried in order.\n     * @param {number} port - SMTP port.\n     * @param {string} username - Authentication username.\n     * @param {string} password - Authentication password.\n     * @param {SmtpEncryption} encryption - Encryption type. Can be 'ssl' or 'tls'\n     * @param {boolean} autoTLS - Enable SMTP AutoTLS feature.\n     * @param {string} mailer - The value to use for the X-Mailer header.\n     * @param {string} fromName - Sender Name.\n     * @param {string} fromEmail - Sender email address.\n     * @param {string} replyToName - Name set in the Reply To field for the mail. Default value is Sender Name.\n     * @param {string} replyToEmail - Email set in the Reply To field for the mail. Default value is Sender Email.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateSmtpProvider(providerId: string, name?: string, host?: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean): Promise<Models.Provider>;\n    updateSmtpProvider(\n        paramsOrFirst: { providerId: string, name?: string, host?: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (number)?, (string)?, (string)?, (SmtpEncryption)?, (boolean)?, (string)?, (string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name?: string, host?: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name?: string, host?: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                host: rest[1] as string,\n                port: rest[2] as number,\n                username: rest[3] as string,\n                password: rest[4] as string,\n                encryption: rest[5] as SmtpEncryption,\n                autoTLS: rest[6] as boolean,\n                mailer: rest[7] as string,\n                fromName: rest[8] as string,\n                fromEmail: rest[9] as string,\n                replyToName: rest[10] as string,\n                replyToEmail: rest[11] as string,\n                enabled: rest[12] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const host = params.host;\n        const port = params.port;\n        const username = params.username;\n        const password = params.password;\n        const encryption = params.encryption;\n        const autoTLS = params.autoTLS;\n        const mailer = params.mailer;\n        const fromName = params.fromName;\n        const fromEmail = params.fromEmail;\n        const replyToName = params.replyToName;\n        const replyToEmail = params.replyToEmail;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/smtp/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof host !== 'undefined') {\n            payload['host'] = host;\n        }\n        if (typeof port !== 'undefined') {\n            payload['port'] = port;\n        }\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n        if (typeof autoTLS !== 'undefined') {\n            payload['autoTLS'] = autoTLS;\n        }\n        if (typeof mailer !== 'undefined') {\n            payload['mailer'] = mailer;\n        }\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a SMTP provider by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @param {string} params.name - Provider name.\n     * @param {string} params.host - SMTP hosts. Either a single hostname or multiple semicolon-delimited hostnames. You can also specify a different port for each host such as `smtp1.example.com:25;smtp2.example.com`. You can also specify encryption type, for example: `tls://smtp1.example.com:587;ssl://smtp2.example.com:465\"`. Hosts will be tried in order.\n     * @param {number} params.port - SMTP port.\n     * @param {string} params.username - Authentication username.\n     * @param {string} params.password - Authentication password.\n     * @param {SmtpEncryption} params.encryption - Encryption type. Can be 'ssl' or 'tls'\n     * @param {boolean} params.autoTLS - Enable SMTP AutoTLS feature.\n     * @param {string} params.mailer - The value to use for the X-Mailer header.\n     * @param {string} params.fromName - Sender Name.\n     * @param {string} params.fromEmail - Sender email address.\n     * @param {string} params.replyToName - Name set in the Reply To field for the mail. Default value is Sender Name.\n     * @param {string} params.replyToEmail - Email set in the Reply To field for the mail. Default value is Sender Email.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    updateSMTPProvider(params: { providerId: string, name?: string, host?: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Update a SMTP provider by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @param {string} name - Provider name.\n     * @param {string} host - SMTP hosts. Either a single hostname or multiple semicolon-delimited hostnames. You can also specify a different port for each host such as `smtp1.example.com:25;smtp2.example.com`. You can also specify encryption type, for example: `tls://smtp1.example.com:587;ssl://smtp2.example.com:465\"`. Hosts will be tried in order.\n     * @param {number} port - SMTP port.\n     * @param {string} username - Authentication username.\n     * @param {string} password - Authentication password.\n     * @param {SmtpEncryption} encryption - Encryption type. Can be 'ssl' or 'tls'\n     * @param {boolean} autoTLS - Enable SMTP AutoTLS feature.\n     * @param {string} mailer - The value to use for the X-Mailer header.\n     * @param {string} fromName - Sender Name.\n     * @param {string} fromEmail - Sender email address.\n     * @param {string} replyToName - Name set in the Reply To field for the mail. Default value is Sender Name.\n     * @param {string} replyToEmail - Email set in the Reply To field for the mail. Default value is Sender Email.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateSMTPProvider(providerId: string, name?: string, host?: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean): Promise<Models.Provider>;\n    updateSMTPProvider(\n        paramsOrFirst: { providerId: string, name?: string, host?: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (number)?, (string)?, (string)?, (SmtpEncryption)?, (boolean)?, (string)?, (string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name?: string, host?: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name?: string, host?: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                host: rest[1] as string,\n                port: rest[2] as number,\n                username: rest[3] as string,\n                password: rest[4] as string,\n                encryption: rest[5] as SmtpEncryption,\n                autoTLS: rest[6] as boolean,\n                mailer: rest[7] as string,\n                fromName: rest[8] as string,\n                fromEmail: rest[9] as string,\n                replyToName: rest[10] as string,\n                replyToEmail: rest[11] as string,\n                enabled: rest[12] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const host = params.host;\n        const port = params.port;\n        const username = params.username;\n        const password = params.password;\n        const encryption = params.encryption;\n        const autoTLS = params.autoTLS;\n        const mailer = params.mailer;\n        const fromName = params.fromName;\n        const fromEmail = params.fromEmail;\n        const replyToName = params.replyToName;\n        const replyToEmail = params.replyToEmail;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/smtp/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof host !== 'undefined') {\n            payload['host'] = host;\n        }\n        if (typeof port !== 'undefined') {\n            payload['port'] = port;\n        }\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n        if (typeof autoTLS !== 'undefined') {\n            payload['autoTLS'] = autoTLS;\n        }\n        if (typeof mailer !== 'undefined') {\n            payload['mailer'] = mailer;\n        }\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Telesign provider.\n     *\n     * @param {string} params.providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Provider name.\n     * @param {string} params.from - Sender Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @param {string} params.customerId - Telesign customer ID.\n     * @param {string} params.apiKey - Telesign API key.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    createTelesignProvider(params: { providerId: string, name: string, from?: string, customerId?: string, apiKey?: string, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Create a new Telesign provider.\n     *\n     * @param {string} providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Provider name.\n     * @param {string} from - Sender Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @param {string} customerId - Telesign customer ID.\n     * @param {string} apiKey - Telesign API key.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createTelesignProvider(providerId: string, name: string, from?: string, customerId?: string, apiKey?: string, enabled?: boolean): Promise<Models.Provider>;\n    createTelesignProvider(\n        paramsOrFirst: { providerId: string, name: string, from?: string, customerId?: string, apiKey?: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name: string, from?: string, customerId?: string, apiKey?: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name: string, from?: string, customerId?: string, apiKey?: string, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                from: rest[1] as string,\n                customerId: rest[2] as string,\n                apiKey: rest[3] as string,\n                enabled: rest[4] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const from = params.from;\n        const customerId = params.customerId;\n        const apiKey = params.apiKey;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/messaging/providers/telesign';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        if (typeof customerId !== 'undefined') {\n            payload['customerId'] = customerId;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a Telesign provider by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @param {string} params.name - Provider name.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @param {string} params.customerId - Telesign customer ID.\n     * @param {string} params.apiKey - Telesign API key.\n     * @param {string} params.from - Sender number.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    updateTelesignProvider(params: { providerId: string, name?: string, enabled?: boolean, customerId?: string, apiKey?: string, from?: string  }): Promise<Models.Provider>;\n    /**\n     * Update a Telesign provider by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @param {string} name - Provider name.\n     * @param {boolean} enabled - Set as enabled.\n     * @param {string} customerId - Telesign customer ID.\n     * @param {string} apiKey - Telesign API key.\n     * @param {string} from - Sender number.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateTelesignProvider(providerId: string, name?: string, enabled?: boolean, customerId?: string, apiKey?: string, from?: string): Promise<Models.Provider>;\n    updateTelesignProvider(\n        paramsOrFirst: { providerId: string, name?: string, enabled?: boolean, customerId?: string, apiKey?: string, from?: string } | string,\n        ...rest: [(string)?, (boolean)?, (string)?, (string)?, (string)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name?: string, enabled?: boolean, customerId?: string, apiKey?: string, from?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name?: string, enabled?: boolean, customerId?: string, apiKey?: string, from?: string };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                enabled: rest[1] as boolean,\n                customerId: rest[2] as string,\n                apiKey: rest[3] as string,\n                from: rest[4] as string            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const enabled = params.enabled;\n        const customerId = params.customerId;\n        const apiKey = params.apiKey;\n        const from = params.from;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/telesign/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof customerId !== 'undefined') {\n            payload['customerId'] = customerId;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Textmagic provider.\n     *\n     * @param {string} params.providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Provider name.\n     * @param {string} params.from - Sender Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @param {string} params.username - Textmagic username.\n     * @param {string} params.apiKey - Textmagic apiKey.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    createTextmagicProvider(params: { providerId: string, name: string, from?: string, username?: string, apiKey?: string, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Create a new Textmagic provider.\n     *\n     * @param {string} providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Provider name.\n     * @param {string} from - Sender Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @param {string} username - Textmagic username.\n     * @param {string} apiKey - Textmagic apiKey.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createTextmagicProvider(providerId: string, name: string, from?: string, username?: string, apiKey?: string, enabled?: boolean): Promise<Models.Provider>;\n    createTextmagicProvider(\n        paramsOrFirst: { providerId: string, name: string, from?: string, username?: string, apiKey?: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name: string, from?: string, username?: string, apiKey?: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name: string, from?: string, username?: string, apiKey?: string, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                from: rest[1] as string,\n                username: rest[2] as string,\n                apiKey: rest[3] as string,\n                enabled: rest[4] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const from = params.from;\n        const username = params.username;\n        const apiKey = params.apiKey;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/messaging/providers/textmagic';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a Textmagic provider by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @param {string} params.name - Provider name.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @param {string} params.username - Textmagic username.\n     * @param {string} params.apiKey - Textmagic apiKey.\n     * @param {string} params.from - Sender number.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    updateTextmagicProvider(params: { providerId: string, name?: string, enabled?: boolean, username?: string, apiKey?: string, from?: string  }): Promise<Models.Provider>;\n    /**\n     * Update a Textmagic provider by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @param {string} name - Provider name.\n     * @param {boolean} enabled - Set as enabled.\n     * @param {string} username - Textmagic username.\n     * @param {string} apiKey - Textmagic apiKey.\n     * @param {string} from - Sender number.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateTextmagicProvider(providerId: string, name?: string, enabled?: boolean, username?: string, apiKey?: string, from?: string): Promise<Models.Provider>;\n    updateTextmagicProvider(\n        paramsOrFirst: { providerId: string, name?: string, enabled?: boolean, username?: string, apiKey?: string, from?: string } | string,\n        ...rest: [(string)?, (boolean)?, (string)?, (string)?, (string)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name?: string, enabled?: boolean, username?: string, apiKey?: string, from?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name?: string, enabled?: boolean, username?: string, apiKey?: string, from?: string };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                enabled: rest[1] as boolean,\n                username: rest[2] as string,\n                apiKey: rest[3] as string,\n                from: rest[4] as string            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const enabled = params.enabled;\n        const username = params.username;\n        const apiKey = params.apiKey;\n        const from = params.from;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/textmagic/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Twilio provider.\n     *\n     * @param {string} params.providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Provider name.\n     * @param {string} params.from - Sender Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @param {string} params.accountSid - Twilio account secret ID.\n     * @param {string} params.authToken - Twilio authentication token.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    createTwilioProvider(params: { providerId: string, name: string, from?: string, accountSid?: string, authToken?: string, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Create a new Twilio provider.\n     *\n     * @param {string} providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Provider name.\n     * @param {string} from - Sender Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @param {string} accountSid - Twilio account secret ID.\n     * @param {string} authToken - Twilio authentication token.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createTwilioProvider(providerId: string, name: string, from?: string, accountSid?: string, authToken?: string, enabled?: boolean): Promise<Models.Provider>;\n    createTwilioProvider(\n        paramsOrFirst: { providerId: string, name: string, from?: string, accountSid?: string, authToken?: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name: string, from?: string, accountSid?: string, authToken?: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name: string, from?: string, accountSid?: string, authToken?: string, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                from: rest[1] as string,\n                accountSid: rest[2] as string,\n                authToken: rest[3] as string,\n                enabled: rest[4] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const from = params.from;\n        const accountSid = params.accountSid;\n        const authToken = params.authToken;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/messaging/providers/twilio';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        if (typeof accountSid !== 'undefined') {\n            payload['accountSid'] = accountSid;\n        }\n        if (typeof authToken !== 'undefined') {\n            payload['authToken'] = authToken;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a Twilio provider by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @param {string} params.name - Provider name.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @param {string} params.accountSid - Twilio account secret ID.\n     * @param {string} params.authToken - Twilio authentication token.\n     * @param {string} params.from - Sender number.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    updateTwilioProvider(params: { providerId: string, name?: string, enabled?: boolean, accountSid?: string, authToken?: string, from?: string  }): Promise<Models.Provider>;\n    /**\n     * Update a Twilio provider by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @param {string} name - Provider name.\n     * @param {boolean} enabled - Set as enabled.\n     * @param {string} accountSid - Twilio account secret ID.\n     * @param {string} authToken - Twilio authentication token.\n     * @param {string} from - Sender number.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateTwilioProvider(providerId: string, name?: string, enabled?: boolean, accountSid?: string, authToken?: string, from?: string): Promise<Models.Provider>;\n    updateTwilioProvider(\n        paramsOrFirst: { providerId: string, name?: string, enabled?: boolean, accountSid?: string, authToken?: string, from?: string } | string,\n        ...rest: [(string)?, (boolean)?, (string)?, (string)?, (string)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name?: string, enabled?: boolean, accountSid?: string, authToken?: string, from?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name?: string, enabled?: boolean, accountSid?: string, authToken?: string, from?: string };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                enabled: rest[1] as boolean,\n                accountSid: rest[2] as string,\n                authToken: rest[3] as string,\n                from: rest[4] as string            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const enabled = params.enabled;\n        const accountSid = params.accountSid;\n        const authToken = params.authToken;\n        const from = params.from;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/twilio/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof accountSid !== 'undefined') {\n            payload['accountSid'] = accountSid;\n        }\n        if (typeof authToken !== 'undefined') {\n            payload['authToken'] = authToken;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Vonage provider.\n     *\n     * @param {string} params.providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Provider name.\n     * @param {string} params.from - Sender Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @param {string} params.apiKey - Vonage API key.\n     * @param {string} params.apiSecret - Vonage API secret.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    createVonageProvider(params: { providerId: string, name: string, from?: string, apiKey?: string, apiSecret?: string, enabled?: boolean  }): Promise<Models.Provider>;\n    /**\n     * Create a new Vonage provider.\n     *\n     * @param {string} providerId - Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Provider name.\n     * @param {string} from - Sender Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @param {string} apiKey - Vonage API key.\n     * @param {string} apiSecret - Vonage API secret.\n     * @param {boolean} enabled - Set as enabled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createVonageProvider(providerId: string, name: string, from?: string, apiKey?: string, apiSecret?: string, enabled?: boolean): Promise<Models.Provider>;\n    createVonageProvider(\n        paramsOrFirst: { providerId: string, name: string, from?: string, apiKey?: string, apiSecret?: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name: string, from?: string, apiKey?: string, apiSecret?: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name: string, from?: string, apiKey?: string, apiSecret?: string, enabled?: boolean };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                from: rest[1] as string,\n                apiKey: rest[2] as string,\n                apiSecret: rest[3] as string,\n                enabled: rest[4] as boolean            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const from = params.from;\n        const apiKey = params.apiKey;\n        const apiSecret = params.apiSecret;\n        const enabled = params.enabled;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/messaging/providers/vonage';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof apiSecret !== 'undefined') {\n            payload['apiSecret'] = apiSecret;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a Vonage provider by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @param {string} params.name - Provider name.\n     * @param {boolean} params.enabled - Set as enabled.\n     * @param {string} params.apiKey - Vonage API key.\n     * @param {string} params.apiSecret - Vonage API secret.\n     * @param {string} params.from - Sender number.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    updateVonageProvider(params: { providerId: string, name?: string, enabled?: boolean, apiKey?: string, apiSecret?: string, from?: string  }): Promise<Models.Provider>;\n    /**\n     * Update a Vonage provider by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @param {string} name - Provider name.\n     * @param {boolean} enabled - Set as enabled.\n     * @param {string} apiKey - Vonage API key.\n     * @param {string} apiSecret - Vonage API secret.\n     * @param {string} from - Sender number.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateVonageProvider(providerId: string, name?: string, enabled?: boolean, apiKey?: string, apiSecret?: string, from?: string): Promise<Models.Provider>;\n    updateVonageProvider(\n        paramsOrFirst: { providerId: string, name?: string, enabled?: boolean, apiKey?: string, apiSecret?: string, from?: string } | string,\n        ...rest: [(string)?, (boolean)?, (string)?, (string)?, (string)?]    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string, name?: string, enabled?: boolean, apiKey?: string, apiSecret?: string, from?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, name?: string, enabled?: boolean, apiKey?: string, apiSecret?: string, from?: string };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                name: rest[0] as string,\n                enabled: rest[1] as boolean,\n                apiKey: rest[2] as string,\n                apiSecret: rest[3] as string,\n                from: rest[4] as string            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const name = params.name;\n        const enabled = params.enabled;\n        const apiKey = params.apiKey;\n        const apiSecret = params.apiSecret;\n        const from = params.from;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/vonage/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof apiSecret !== 'undefined') {\n            payload['apiSecret'] = apiSecret;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a provider by its unique ID.\n     * \n     *\n     * @param {string} params.providerId - Provider ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    getProvider(params: { providerId: string  }): Promise<Models.Provider>;\n    /**\n     * Get a provider by its unique ID.\n     * \n     *\n     * @param {string} providerId - Provider ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getProvider(providerId: string): Promise<Models.Provider>;\n    getProvider(\n        paramsOrFirst: { providerId: string } | string    \n    ): Promise<Models.Provider> {\n        let params: { providerId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string            \n            };\n        }\n        \n        const providerId = params.providerId;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a provider by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteProvider(params: { providerId: string  }): Promise<{}>;\n    /**\n     * Delete a provider by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteProvider(providerId: string): Promise<{}>;\n    deleteProvider(\n        paramsOrFirst: { providerId: string } | string    \n    ): Promise<{}> {\n        let params: { providerId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string            \n            };\n        }\n        \n        const providerId = params.providerId;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the provider activity logs listed by its unique ID.\n     *\n     * @param {string} params.providerId - Provider ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     */\n    listProviderLogs(params: { providerId: string, queries?: string[]  }): Promise<Models.LogList>;\n    /**\n     * Get the provider activity logs listed by its unique ID.\n     *\n     * @param {string} providerId - Provider ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listProviderLogs(providerId: string, queries?: string[]): Promise<Models.LogList>;\n    listProviderLogs(\n        paramsOrFirst: { providerId: string, queries?: string[] } | string,\n        ...rest: [(string[])?]    \n    ): Promise<Models.LogList> {\n        let params: { providerId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { providerId: string, queries?: string[] };\n        } else {\n            params = {\n                providerId: paramsOrFirst as string,\n                queries: rest[0] as string[]            \n            };\n        }\n        \n        const providerId = params.providerId;\n        const queries = params.queries;\n\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        const apiPath = '/messaging/providers/{providerId}/logs'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the subscriber activity logs listed by its unique ID.\n     *\n     * @param {string} params.subscriberId - Subscriber ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     */\n    listSubscriberLogs(params: { subscriberId: string, queries?: string[]  }): Promise<Models.LogList>;\n    /**\n     * Get the subscriber activity logs listed by its unique ID.\n     *\n     * @param {string} subscriberId - Subscriber ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listSubscriberLogs(subscriberId: string, queries?: string[]): Promise<Models.LogList>;\n    listSubscriberLogs(\n        paramsOrFirst: { subscriberId: string, queries?: string[] } | string,\n        ...rest: [(string[])?]    \n    ): Promise<Models.LogList> {\n        let params: { subscriberId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { subscriberId: string, queries?: string[] };\n        } else {\n            params = {\n                subscriberId: paramsOrFirst as string,\n                queries: rest[0] as string[]            \n            };\n        }\n        \n        const subscriberId = params.subscriberId;\n        const queries = params.queries;\n\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n        const apiPath = '/messaging/subscribers/{subscriberId}/logs'.replace('{subscriberId}', subscriberId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all topics from the current Appwrite project.\n     *\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, description, emailTotal, smsTotal, pushTotal\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.TopicList>}\n     */\n    listTopics(params?: { queries?: string[], search?: string  }): Promise<Models.TopicList>;\n    /**\n     * Get a list of all topics from the current Appwrite project.\n     *\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, description, emailTotal, smsTotal, pushTotal\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.TopicList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listTopics(queries?: string[], search?: string): Promise<Models.TopicList>;\n    listTopics(\n        paramsOrFirst?: { queries?: string[], search?: string } | string[],\n        ...rest: [(string)?]    \n    ): Promise<Models.TopicList> {\n        let params: { queries?: string[], search?: string };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { queries?: string[], search?: string };\n        } else {\n            params = {\n                queries: paramsOrFirst as string[],\n                search: rest[0] as string            \n            };\n        }\n        \n        const queries = params.queries;\n        const search = params.search;\n\n\n        const apiPath = '/messaging/topics';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new topic.\n     *\n     * @param {string} params.topicId - Topic ID. Choose a custom Topic ID or a new Topic ID.\n     * @param {string} params.name - Topic Name.\n     * @param {string[]} params.subscribe - An array of role strings with subscribe permission. By default all users are granted with any subscribe permission. [learn more about roles](https://appwrite.io/docs/permissions#permission-roles). Maximum of 100 roles are allowed, each 64 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Topic>}\n     */\n    createTopic(params: { topicId: string, name: string, subscribe?: string[]  }): Promise<Models.Topic>;\n    /**\n     * Create a new topic.\n     *\n     * @param {string} topicId - Topic ID. Choose a custom Topic ID or a new Topic ID.\n     * @param {string} name - Topic Name.\n     * @param {string[]} subscribe - An array of role strings with subscribe permission. By default all users are granted with any subscribe permission. [learn more about roles](https://appwrite.io/docs/permissions#permission-roles). Maximum of 100 roles are allowed, each 64 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Topic>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createTopic(topicId: string, name: string, subscribe?: string[]): Promise<Models.Topic>;\n    createTopic(\n        paramsOrFirst: { topicId: string, name: string, subscribe?: string[] } | string,\n        ...rest: [(string)?, (string[])?]    \n    ): Promise<Models.Topic> {\n        let params: { topicId: string, name: string, subscribe?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { topicId: string, name: string, subscribe?: string[] };\n        } else {\n            params = {\n                topicId: paramsOrFirst as string,\n                name: rest[0] as string,\n                subscribe: rest[1] as string[]            \n            };\n        }\n        \n        const topicId = params.topicId;\n        const name = params.name;\n        const subscribe = params.subscribe;\n\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/messaging/topics';\n        const payload: Payload = {};\n        if (typeof topicId !== 'undefined') {\n            payload['topicId'] = topicId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof subscribe !== 'undefined') {\n            payload['subscribe'] = subscribe;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a topic by its unique ID.\n     * \n     *\n     * @param {string} params.topicId - Topic ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Topic>}\n     */\n    getTopic(params: { topicId: string  }): Promise<Models.Topic>;\n    /**\n     * Get a topic by its unique ID.\n     * \n     *\n     * @param {string} topicId - Topic ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Topic>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getTopic(topicId: string): Promise<Models.Topic>;\n    getTopic(\n        paramsOrFirst: { topicId: string } | string    \n    ): Promise<Models.Topic> {\n        let params: { topicId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { topicId: string };\n        } else {\n            params = {\n                topicId: paramsOrFirst as string            \n            };\n        }\n        \n        const topicId = params.topicId;\n\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        const apiPath = '/messaging/topics/{topicId}'.replace('{topicId}', topicId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a topic by its unique ID.\n     * \n     *\n     * @param {string} params.topicId - Topic ID.\n     * @param {string} params.name - Topic Name.\n     * @param {string[]} params.subscribe - An array of role strings with subscribe permission. By default all users are granted with any subscribe permission. [learn more about roles](https://appwrite.io/docs/permissions#permission-roles). Maximum of 100 roles are allowed, each 64 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Topic>}\n     */\n    updateTopic(params: { topicId: string, name?: string, subscribe?: string[]  }): Promise<Models.Topic>;\n    /**\n     * Update a topic by its unique ID.\n     * \n     *\n     * @param {string} topicId - Topic ID.\n     * @param {string} name - Topic Name.\n     * @param {string[]} subscribe - An array of role strings with subscribe permission. By default all users are granted with any subscribe permission. [learn more about roles](https://appwrite.io/docs/permissions#permission-roles). Maximum of 100 roles are allowed, each 64 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Topic>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateTopic(topicId: string, name?: string, subscribe?: string[]): Promise<Models.Topic>;\n    updateTopic(\n        paramsOrFirst: { topicId: string, name?: string, subscribe?: string[] } | string,\n        ...rest: [(string)?, (string[])?]    \n    ): Promise<Models.Topic> {\n        let params: { topicId: string, name?: string, subscribe?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { topicId: string, name?: string, subscribe?: string[] };\n        } else {\n            params = {\n                topicId: paramsOrFirst as string,\n                name: rest[0] as string,\n                subscribe: rest[1] as string[]            \n            };\n        }\n        \n        const topicId = params.topicId;\n        const name = params.name;\n        const subscribe = params.subscribe;\n\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        const apiPath = '/messaging/topics/{topicId}'.replace('{topicId}', topicId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof subscribe !== 'undefined') {\n            payload['subscribe'] = subscribe;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a topic by its unique ID.\n     *\n     * @param {string} params.topicId - Topic ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteTopic(params: { topicId: string  }): Promise<{}>;\n    /**\n     * Delete a topic by its unique ID.\n     *\n     * @param {string} topicId - Topic ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteTopic(topicId: string): Promise<{}>;\n    deleteTopic(\n        paramsOrFirst: { topicId: string } | string    \n    ): Promise<{}> {\n        let params: { topicId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { topicId: string };\n        } else {\n            params = {\n                topicId: paramsOrFirst as string            \n            };\n        }\n        \n        const topicId = params.topicId;\n\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        const apiPath = '/messaging/topics/{topicId}'.replace('{topicId}', topicId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the topic activity logs listed by its unique ID.\n     *\n     * @param {string} params.topicId - Topic ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     */\n    listTopicLogs(params: { topicId: string, queries?: string[]  }): Promise<Models.LogList>;\n    /**\n     * Get the topic activity logs listed by its unique ID.\n     *\n     * @param {string} topicId - Topic ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listTopicLogs(topicId: string, queries?: string[]): Promise<Models.LogList>;\n    listTopicLogs(\n        paramsOrFirst: { topicId: string, queries?: string[] } | string,\n        ...rest: [(string[])?]    \n    ): Promise<Models.LogList> {\n        let params: { topicId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { topicId: string, queries?: string[] };\n        } else {\n            params = {\n                topicId: paramsOrFirst as string,\n                queries: rest[0] as string[]            \n            };\n        }\n        \n        const topicId = params.topicId;\n        const queries = params.queries;\n\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        const apiPath = '/messaging/topics/{topicId}/logs'.replace('{topicId}', topicId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all subscribers from the current Appwrite project.\n     *\n     * @param {string} params.topicId - Topic ID. The topic ID subscribed to.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, provider, type, enabled\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.SubscriberList>}\n     */\n    listSubscribers(params: { topicId: string, queries?: string[], search?: string  }): Promise<Models.SubscriberList>;\n    /**\n     * Get a list of all subscribers from the current Appwrite project.\n     *\n     * @param {string} topicId - Topic ID. The topic ID subscribed to.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, provider, type, enabled\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.SubscriberList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listSubscribers(topicId: string, queries?: string[], search?: string): Promise<Models.SubscriberList>;\n    listSubscribers(\n        paramsOrFirst: { topicId: string, queries?: string[], search?: string } | string,\n        ...rest: [(string[])?, (string)?]    \n    ): Promise<Models.SubscriberList> {\n        let params: { topicId: string, queries?: string[], search?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { topicId: string, queries?: string[], search?: string };\n        } else {\n            params = {\n                topicId: paramsOrFirst as string,\n                queries: rest[0] as string[],\n                search: rest[1] as string            \n            };\n        }\n        \n        const topicId = params.topicId;\n        const queries = params.queries;\n        const search = params.search;\n\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        const apiPath = '/messaging/topics/{topicId}/subscribers'.replace('{topicId}', topicId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new subscriber.\n     *\n     * @param {string} params.topicId - Topic ID. The topic ID to subscribe to.\n     * @param {string} params.subscriberId - Subscriber ID. Choose a custom Subscriber ID or a new Subscriber ID.\n     * @param {string} params.targetId - Target ID. The target ID to link to the specified Topic ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Subscriber>}\n     */\n    createSubscriber(params: { topicId: string, subscriberId: string, targetId: string  }): Promise<Models.Subscriber>;\n    /**\n     * Create a new subscriber.\n     *\n     * @param {string} topicId - Topic ID. The topic ID to subscribe to.\n     * @param {string} subscriberId - Subscriber ID. Choose a custom Subscriber ID or a new Subscriber ID.\n     * @param {string} targetId - Target ID. The target ID to link to the specified Topic ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Subscriber>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createSubscriber(topicId: string, subscriberId: string, targetId: string): Promise<Models.Subscriber>;\n    createSubscriber(\n        paramsOrFirst: { topicId: string, subscriberId: string, targetId: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<Models.Subscriber> {\n        let params: { topicId: string, subscriberId: string, targetId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { topicId: string, subscriberId: string, targetId: string };\n        } else {\n            params = {\n                topicId: paramsOrFirst as string,\n                subscriberId: rest[0] as string,\n                targetId: rest[1] as string            \n            };\n        }\n        \n        const topicId = params.topicId;\n        const subscriberId = params.subscriberId;\n        const targetId = params.targetId;\n\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n        const apiPath = '/messaging/topics/{topicId}/subscribers'.replace('{topicId}', topicId);\n        const payload: Payload = {};\n        if (typeof subscriberId !== 'undefined') {\n            payload['subscriberId'] = subscriberId;\n        }\n        if (typeof targetId !== 'undefined') {\n            payload['targetId'] = targetId;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a subscriber by its unique ID.\n     * \n     *\n     * @param {string} params.topicId - Topic ID. The topic ID subscribed to.\n     * @param {string} params.subscriberId - Subscriber ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Subscriber>}\n     */\n    getSubscriber(params: { topicId: string, subscriberId: string  }): Promise<Models.Subscriber>;\n    /**\n     * Get a subscriber by its unique ID.\n     * \n     *\n     * @param {string} topicId - Topic ID. The topic ID subscribed to.\n     * @param {string} subscriberId - Subscriber ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Subscriber>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getSubscriber(topicId: string, subscriberId: string): Promise<Models.Subscriber>;\n    getSubscriber(\n        paramsOrFirst: { topicId: string, subscriberId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Subscriber> {\n        let params: { topicId: string, subscriberId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { topicId: string, subscriberId: string };\n        } else {\n            params = {\n                topicId: paramsOrFirst as string,\n                subscriberId: rest[0] as string            \n            };\n        }\n        \n        const topicId = params.topicId;\n        const subscriberId = params.subscriberId;\n\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n        const apiPath = '/messaging/topics/{topicId}/subscribers/{subscriberId}'.replace('{topicId}', topicId).replace('{subscriberId}', subscriberId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a subscriber by its unique ID.\n     *\n     * @param {string} params.topicId - Topic ID. The topic ID subscribed to.\n     * @param {string} params.subscriberId - Subscriber ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteSubscriber(params: { topicId: string, subscriberId: string  }): Promise<{}>;\n    /**\n     * Delete a subscriber by its unique ID.\n     *\n     * @param {string} topicId - Topic ID. The topic ID subscribed to.\n     * @param {string} subscriberId - Subscriber ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteSubscriber(topicId: string, subscriberId: string): Promise<{}>;\n    deleteSubscriber(\n        paramsOrFirst: { topicId: string, subscriberId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<{}> {\n        let params: { topicId: string, subscriberId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { topicId: string, subscriberId: string };\n        } else {\n            params = {\n                topicId: paramsOrFirst as string,\n                subscriberId: rest[0] as string            \n            };\n        }\n        \n        const topicId = params.topicId;\n        const subscriberId = params.subscriberId;\n\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n        const apiPath = '/messaging/topics/{topicId}/subscribers/{subscriberId}'.replace('{topicId}', topicId).replace('{subscriberId}', subscriberId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n", "import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\nimport { Framework } from '../enums/framework';\nimport { BuildRuntime } from '../enums/build-runtime';\nimport { Adapter } from '../enums/adapter';\nimport { VCSDeploymentType } from '../enums/vcs-deployment-type';\nimport { DeploymentDownloadType } from '../enums/deployment-download-type';\n\nexport class Sites {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Get a list of all the project's sites. You can use the query params to filter your results.\n     *\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, enabled, framework, deploymentId, buildCommand, installCommand, outputDirectory, installationId\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.SiteList>}\n     */\n    list(params?: { queries?: string[], search?: string  }): Promise<Models.SiteList>;\n    /**\n     * Get a list of all the project's sites. You can use the query params to filter your results.\n     *\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, enabled, framework, deploymentId, buildCommand, installCommand, outputDirectory, installationId\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.SiteList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    list(queries?: string[], search?: string): Promise<Models.SiteList>;\n    list(\n        paramsOrFirst?: { queries?: string[], search?: string } | string[],\n        ...rest: [(string)?]    \n    ): Promise<Models.SiteList> {\n        let params: { queries?: string[], search?: string };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { queries?: string[], search?: string };\n        } else {\n            params = {\n                queries: paramsOrFirst as string[],\n                search: rest[0] as string            \n            };\n        }\n        \n        const queries = params.queries;\n        const search = params.search;\n\n\n        const apiPath = '/sites';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new site.\n     *\n     * @param {string} params.siteId - Site ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Site name. Max length: 128 chars.\n     * @param {Framework} params.framework - Sites framework.\n     * @param {BuildRuntime} params.buildRuntime - Runtime to use during build step.\n     * @param {boolean} params.enabled - Is site enabled? When set to 'disabled', users cannot access the site but Server SDKs with and API key can still access the site. No data is lost when this is toggled.\n     * @param {boolean} params.logging - When disabled, request logs will exclude logs and errors, and site responses will be slightly faster.\n     * @param {number} params.timeout - Maximum request time in seconds.\n     * @param {string} params.installCommand - Install Command.\n     * @param {string} params.buildCommand - Build Command.\n     * @param {string} params.outputDirectory - Output Directory for site.\n     * @param {Adapter} params.adapter - Framework adapter defining rendering strategy. Allowed values are: static, ssr\n     * @param {string} params.installationId - Appwrite Installation ID for VCS (Version Control System) deployment.\n     * @param {string} params.fallbackFile - Fallback file for single page application sites.\n     * @param {string} params.providerRepositoryId - Repository ID of the repo linked to the site.\n     * @param {string} params.providerBranch - Production branch for the repo linked to the site.\n     * @param {boolean} params.providerSilentMode - Is the VCS (Version Control System) connection in silent mode for the repo linked to the site? In silent mode, comments will not be made on commits and pull requests.\n     * @param {string} params.providerRootDirectory - Path to site code in the linked repo.\n     * @param {string} params.specification - Framework specification for the site and builds.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Site>}\n     */\n    create(params: { siteId: string, name: string, framework: Framework, buildRuntime: BuildRuntime, enabled?: boolean, logging?: boolean, timeout?: number, installCommand?: string, buildCommand?: string, outputDirectory?: string, adapter?: Adapter, installationId?: string, fallbackFile?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string  }): Promise<Models.Site>;\n    /**\n     * Create a new site.\n     *\n     * @param {string} siteId - Site ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Site name. Max length: 128 chars.\n     * @param {Framework} framework - Sites framework.\n     * @param {BuildRuntime} buildRuntime - Runtime to use during build step.\n     * @param {boolean} enabled - Is site enabled? When set to 'disabled', users cannot access the site but Server SDKs with and API key can still access the site. No data is lost when this is toggled.\n     * @param {boolean} logging - When disabled, request logs will exclude logs and errors, and site responses will be slightly faster.\n     * @param {number} timeout - Maximum request time in seconds.\n     * @param {string} installCommand - Install Command.\n     * @param {string} buildCommand - Build Command.\n     * @param {string} outputDirectory - Output Directory for site.\n     * @param {Adapter} adapter - Framework adapter defining rendering strategy. Allowed values are: static, ssr\n     * @param {string} installationId - Appwrite Installation ID for VCS (Version Control System) deployment.\n     * @param {string} fallbackFile - Fallback file for single page application sites.\n     * @param {string} providerRepositoryId - Repository ID of the repo linked to the site.\n     * @param {string} providerBranch - Production branch for the repo linked to the site.\n     * @param {boolean} providerSilentMode - Is the VCS (Version Control System) connection in silent mode for the repo linked to the site? In silent mode, comments will not be made on commits and pull requests.\n     * @param {string} providerRootDirectory - Path to site code in the linked repo.\n     * @param {string} specification - Framework specification for the site and builds.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Site>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    create(siteId: string, name: string, framework: Framework, buildRuntime: BuildRuntime, enabled?: boolean, logging?: boolean, timeout?: number, installCommand?: string, buildCommand?: string, outputDirectory?: string, adapter?: Adapter, installationId?: string, fallbackFile?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string): Promise<Models.Site>;\n    create(\n        paramsOrFirst: { siteId: string, name: string, framework: Framework, buildRuntime: BuildRuntime, enabled?: boolean, logging?: boolean, timeout?: number, installCommand?: string, buildCommand?: string, outputDirectory?: string, adapter?: Adapter, installationId?: string, fallbackFile?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string } | string,\n        ...rest: [(string)?, (Framework)?, (BuildRuntime)?, (boolean)?, (boolean)?, (number)?, (string)?, (string)?, (string)?, (Adapter)?, (string)?, (string)?, (string)?, (string)?, (boolean)?, (string)?, (string)?]    \n    ): Promise<Models.Site> {\n        let params: { siteId: string, name: string, framework: Framework, buildRuntime: BuildRuntime, enabled?: boolean, logging?: boolean, timeout?: number, installCommand?: string, buildCommand?: string, outputDirectory?: string, adapter?: Adapter, installationId?: string, fallbackFile?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, name: string, framework: Framework, buildRuntime: BuildRuntime, enabled?: boolean, logging?: boolean, timeout?: number, installCommand?: string, buildCommand?: string, outputDirectory?: string, adapter?: Adapter, installationId?: string, fallbackFile?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                name: rest[0] as string,\n                framework: rest[1] as Framework,\n                buildRuntime: rest[2] as BuildRuntime,\n                enabled: rest[3] as boolean,\n                logging: rest[4] as boolean,\n                timeout: rest[5] as number,\n                installCommand: rest[6] as string,\n                buildCommand: rest[7] as string,\n                outputDirectory: rest[8] as string,\n                adapter: rest[9] as Adapter,\n                installationId: rest[10] as string,\n                fallbackFile: rest[11] as string,\n                providerRepositoryId: rest[12] as string,\n                providerBranch: rest[13] as string,\n                providerSilentMode: rest[14] as boolean,\n                providerRootDirectory: rest[15] as string,\n                specification: rest[16] as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const name = params.name;\n        const framework = params.framework;\n        const buildRuntime = params.buildRuntime;\n        const enabled = params.enabled;\n        const logging = params.logging;\n        const timeout = params.timeout;\n        const installCommand = params.installCommand;\n        const buildCommand = params.buildCommand;\n        const outputDirectory = params.outputDirectory;\n        const adapter = params.adapter;\n        const installationId = params.installationId;\n        const fallbackFile = params.fallbackFile;\n        const providerRepositoryId = params.providerRepositoryId;\n        const providerBranch = params.providerBranch;\n        const providerSilentMode = params.providerSilentMode;\n        const providerRootDirectory = params.providerRootDirectory;\n        const specification = params.specification;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof framework === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"framework\"');\n        }\n        if (typeof buildRuntime === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"buildRuntime\"');\n        }\n\n        const apiPath = '/sites';\n        const payload: Payload = {};\n        if (typeof siteId !== 'undefined') {\n            payload['siteId'] = siteId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof framework !== 'undefined') {\n            payload['framework'] = framework;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof logging !== 'undefined') {\n            payload['logging'] = logging;\n        }\n        if (typeof timeout !== 'undefined') {\n            payload['timeout'] = timeout;\n        }\n        if (typeof installCommand !== 'undefined') {\n            payload['installCommand'] = installCommand;\n        }\n        if (typeof buildCommand !== 'undefined') {\n            payload['buildCommand'] = buildCommand;\n        }\n        if (typeof outputDirectory !== 'undefined') {\n            payload['outputDirectory'] = outputDirectory;\n        }\n        if (typeof buildRuntime !== 'undefined') {\n            payload['buildRuntime'] = buildRuntime;\n        }\n        if (typeof adapter !== 'undefined') {\n            payload['adapter'] = adapter;\n        }\n        if (typeof installationId !== 'undefined') {\n            payload['installationId'] = installationId;\n        }\n        if (typeof fallbackFile !== 'undefined') {\n            payload['fallbackFile'] = fallbackFile;\n        }\n        if (typeof providerRepositoryId !== 'undefined') {\n            payload['providerRepositoryId'] = providerRepositoryId;\n        }\n        if (typeof providerBranch !== 'undefined') {\n            payload['providerBranch'] = providerBranch;\n        }\n        if (typeof providerSilentMode !== 'undefined') {\n            payload['providerSilentMode'] = providerSilentMode;\n        }\n        if (typeof providerRootDirectory !== 'undefined') {\n            payload['providerRootDirectory'] = providerRootDirectory;\n        }\n        if (typeof specification !== 'undefined') {\n            payload['specification'] = specification;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all frameworks that are currently available on the server instance.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.FrameworkList>}\n     */\n    listFrameworks(): Promise<Models.FrameworkList> {\n\n        const apiPath = '/sites/frameworks';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List allowed site specifications for this instance.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.SpecificationList>}\n     */\n    listSpecifications(): Promise<Models.SpecificationList> {\n\n        const apiPath = '/sites/specifications';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a site by its unique ID.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Site>}\n     */\n    get(params: { siteId: string  }): Promise<Models.Site>;\n    /**\n     * Get a site by its unique ID.\n     *\n     * @param {string} siteId - Site ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Site>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    get(siteId: string): Promise<Models.Site>;\n    get(\n        paramsOrFirst: { siteId: string } | string    \n    ): Promise<Models.Site> {\n        let params: { siteId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n\n        const apiPath = '/sites/{siteId}'.replace('{siteId}', siteId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update site by its unique ID.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @param {string} params.name - Site name. Max length: 128 chars.\n     * @param {Framework} params.framework - Sites framework.\n     * @param {boolean} params.enabled - Is site enabled? When set to 'disabled', users cannot access the site but Server SDKs with and API key can still access the site. No data is lost when this is toggled.\n     * @param {boolean} params.logging - When disabled, request logs will exclude logs and errors, and site responses will be slightly faster.\n     * @param {number} params.timeout - Maximum request time in seconds.\n     * @param {string} params.installCommand - Install Command.\n     * @param {string} params.buildCommand - Build Command.\n     * @param {string} params.outputDirectory - Output Directory for site.\n     * @param {BuildRuntime} params.buildRuntime - Runtime to use during build step.\n     * @param {Adapter} params.adapter - Framework adapter defining rendering strategy. Allowed values are: static, ssr\n     * @param {string} params.fallbackFile - Fallback file for single page application sites.\n     * @param {string} params.installationId - Appwrite Installation ID for VCS (Version Control System) deployment.\n     * @param {string} params.providerRepositoryId - Repository ID of the repo linked to the site.\n     * @param {string} params.providerBranch - Production branch for the repo linked to the site.\n     * @param {boolean} params.providerSilentMode - Is the VCS (Version Control System) connection in silent mode for the repo linked to the site? In silent mode, comments will not be made on commits and pull requests.\n     * @param {string} params.providerRootDirectory - Path to site code in the linked repo.\n     * @param {string} params.specification - Framework specification for the site and builds.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Site>}\n     */\n    update(params: { siteId: string, name: string, framework: Framework, enabled?: boolean, logging?: boolean, timeout?: number, installCommand?: string, buildCommand?: string, outputDirectory?: string, buildRuntime?: BuildRuntime, adapter?: Adapter, fallbackFile?: string, installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string  }): Promise<Models.Site>;\n    /**\n     * Update site by its unique ID.\n     *\n     * @param {string} siteId - Site ID.\n     * @param {string} name - Site name. Max length: 128 chars.\n     * @param {Framework} framework - Sites framework.\n     * @param {boolean} enabled - Is site enabled? When set to 'disabled', users cannot access the site but Server SDKs with and API key can still access the site. No data is lost when this is toggled.\n     * @param {boolean} logging - When disabled, request logs will exclude logs and errors, and site responses will be slightly faster.\n     * @param {number} timeout - Maximum request time in seconds.\n     * @param {string} installCommand - Install Command.\n     * @param {string} buildCommand - Build Command.\n     * @param {string} outputDirectory - Output Directory for site.\n     * @param {BuildRuntime} buildRuntime - Runtime to use during build step.\n     * @param {Adapter} adapter - Framework adapter defining rendering strategy. Allowed values are: static, ssr\n     * @param {string} fallbackFile - Fallback file for single page application sites.\n     * @param {string} installationId - Appwrite Installation ID for VCS (Version Control System) deployment.\n     * @param {string} providerRepositoryId - Repository ID of the repo linked to the site.\n     * @param {string} providerBranch - Production branch for the repo linked to the site.\n     * @param {boolean} providerSilentMode - Is the VCS (Version Control System) connection in silent mode for the repo linked to the site? In silent mode, comments will not be made on commits and pull requests.\n     * @param {string} providerRootDirectory - Path to site code in the linked repo.\n     * @param {string} specification - Framework specification for the site and builds.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Site>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    update(siteId: string, name: string, framework: Framework, enabled?: boolean, logging?: boolean, timeout?: number, installCommand?: string, buildCommand?: string, outputDirectory?: string, buildRuntime?: BuildRuntime, adapter?: Adapter, fallbackFile?: string, installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string): Promise<Models.Site>;\n    update(\n        paramsOrFirst: { siteId: string, name: string, framework: Framework, enabled?: boolean, logging?: boolean, timeout?: number, installCommand?: string, buildCommand?: string, outputDirectory?: string, buildRuntime?: BuildRuntime, adapter?: Adapter, fallbackFile?: string, installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string } | string,\n        ...rest: [(string)?, (Framework)?, (boolean)?, (boolean)?, (number)?, (string)?, (string)?, (string)?, (BuildRuntime)?, (Adapter)?, (string)?, (string)?, (string)?, (string)?, (boolean)?, (string)?, (string)?]    \n    ): Promise<Models.Site> {\n        let params: { siteId: string, name: string, framework: Framework, enabled?: boolean, logging?: boolean, timeout?: number, installCommand?: string, buildCommand?: string, outputDirectory?: string, buildRuntime?: BuildRuntime, adapter?: Adapter, fallbackFile?: string, installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, name: string, framework: Framework, enabled?: boolean, logging?: boolean, timeout?: number, installCommand?: string, buildCommand?: string, outputDirectory?: string, buildRuntime?: BuildRuntime, adapter?: Adapter, fallbackFile?: string, installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                name: rest[0] as string,\n                framework: rest[1] as Framework,\n                enabled: rest[2] as boolean,\n                logging: rest[3] as boolean,\n                timeout: rest[4] as number,\n                installCommand: rest[5] as string,\n                buildCommand: rest[6] as string,\n                outputDirectory: rest[7] as string,\n                buildRuntime: rest[8] as BuildRuntime,\n                adapter: rest[9] as Adapter,\n                fallbackFile: rest[10] as string,\n                installationId: rest[11] as string,\n                providerRepositoryId: rest[12] as string,\n                providerBranch: rest[13] as string,\n                providerSilentMode: rest[14] as boolean,\n                providerRootDirectory: rest[15] as string,\n                specification: rest[16] as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const name = params.name;\n        const framework = params.framework;\n        const enabled = params.enabled;\n        const logging = params.logging;\n        const timeout = params.timeout;\n        const installCommand = params.installCommand;\n        const buildCommand = params.buildCommand;\n        const outputDirectory = params.outputDirectory;\n        const buildRuntime = params.buildRuntime;\n        const adapter = params.adapter;\n        const fallbackFile = params.fallbackFile;\n        const installationId = params.installationId;\n        const providerRepositoryId = params.providerRepositoryId;\n        const providerBranch = params.providerBranch;\n        const providerSilentMode = params.providerSilentMode;\n        const providerRootDirectory = params.providerRootDirectory;\n        const specification = params.specification;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof framework === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"framework\"');\n        }\n\n        const apiPath = '/sites/{siteId}'.replace('{siteId}', siteId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof framework !== 'undefined') {\n            payload['framework'] = framework;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof logging !== 'undefined') {\n            payload['logging'] = logging;\n        }\n        if (typeof timeout !== 'undefined') {\n            payload['timeout'] = timeout;\n        }\n        if (typeof installCommand !== 'undefined') {\n            payload['installCommand'] = installCommand;\n        }\n        if (typeof buildCommand !== 'undefined') {\n            payload['buildCommand'] = buildCommand;\n        }\n        if (typeof outputDirectory !== 'undefined') {\n            payload['outputDirectory'] = outputDirectory;\n        }\n        if (typeof buildRuntime !== 'undefined') {\n            payload['buildRuntime'] = buildRuntime;\n        }\n        if (typeof adapter !== 'undefined') {\n            payload['adapter'] = adapter;\n        }\n        if (typeof fallbackFile !== 'undefined') {\n            payload['fallbackFile'] = fallbackFile;\n        }\n        if (typeof installationId !== 'undefined') {\n            payload['installationId'] = installationId;\n        }\n        if (typeof providerRepositoryId !== 'undefined') {\n            payload['providerRepositoryId'] = providerRepositoryId;\n        }\n        if (typeof providerBranch !== 'undefined') {\n            payload['providerBranch'] = providerBranch;\n        }\n        if (typeof providerSilentMode !== 'undefined') {\n            payload['providerSilentMode'] = providerSilentMode;\n        }\n        if (typeof providerRootDirectory !== 'undefined') {\n            payload['providerRootDirectory'] = providerRootDirectory;\n        }\n        if (typeof specification !== 'undefined') {\n            payload['specification'] = specification;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a site by its unique ID.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    delete(params: { siteId: string  }): Promise<{}>;\n    /**\n     * Delete a site by its unique ID.\n     *\n     * @param {string} siteId - Site ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    delete(siteId: string): Promise<{}>;\n    delete(\n        paramsOrFirst: { siteId: string } | string    \n    ): Promise<{}> {\n        let params: { siteId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n\n        const apiPath = '/sites/{siteId}'.replace('{siteId}', siteId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update the site active deployment. Use this endpoint to switch the code deployment that should be used when visitor opens your site.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @param {string} params.deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Site>}\n     */\n    updateSiteDeployment(params: { siteId: string, deploymentId: string  }): Promise<Models.Site>;\n    /**\n     * Update the site active deployment. Use this endpoint to switch the code deployment that should be used when visitor opens your site.\n     *\n     * @param {string} siteId - Site ID.\n     * @param {string} deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Site>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateSiteDeployment(siteId: string, deploymentId: string): Promise<Models.Site>;\n    updateSiteDeployment(\n        paramsOrFirst: { siteId: string, deploymentId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Site> {\n        let params: { siteId: string, deploymentId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, deploymentId: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                deploymentId: rest[0] as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const deploymentId = params.deploymentId;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n        const apiPath = '/sites/{siteId}/deployment'.replace('{siteId}', siteId);\n        const payload: Payload = {};\n        if (typeof deploymentId !== 'undefined') {\n            payload['deploymentId'] = deploymentId;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all the site's code deployments. You can use the query params to filter your results.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: buildSize, sourceSize, totalSize, buildDuration, status, activate, type\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DeploymentList>}\n     */\n    listDeployments(params: { siteId: string, queries?: string[], search?: string  }): Promise<Models.DeploymentList>;\n    /**\n     * Get a list of all the site's code deployments. You can use the query params to filter your results.\n     *\n     * @param {string} siteId - Site ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: buildSize, sourceSize, totalSize, buildDuration, status, activate, type\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DeploymentList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listDeployments(siteId: string, queries?: string[], search?: string): Promise<Models.DeploymentList>;\n    listDeployments(\n        paramsOrFirst: { siteId: string, queries?: string[], search?: string } | string,\n        ...rest: [(string[])?, (string)?]    \n    ): Promise<Models.DeploymentList> {\n        let params: { siteId: string, queries?: string[], search?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, queries?: string[], search?: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                queries: rest[0] as string[],\n                search: rest[1] as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const queries = params.queries;\n        const search = params.search;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n\n        const apiPath = '/sites/{siteId}/deployments'.replace('{siteId}', siteId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new site code deployment. Use this endpoint to upload a new version of your site code. To activate your newly uploaded code, you'll need to update the function's deployment to use your new deployment ID.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @param {File} params.code - Gzip file with your code package. When used with the Appwrite CLI, pass the path to your code directory, and the CLI will automatically package your code. Use a path that is within the current directory.\n     * @param {boolean} params.activate - Automatically activate the deployment when it is finished building.\n     * @param {string} params.installCommand - Install Commands.\n     * @param {string} params.buildCommand - Build Commands.\n     * @param {string} params.outputDirectory - Output Directory.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     */\n    createDeployment(params: { siteId: string, code: File, activate: boolean, installCommand?: string, buildCommand?: string, outputDirectory?: string , onProgress?: (progress: UploadProgress) => void }): Promise<Models.Deployment>;\n    /**\n     * Create a new site code deployment. Use this endpoint to upload a new version of your site code. To activate your newly uploaded code, you'll need to update the function's deployment to use your new deployment ID.\n     *\n     * @param {string} siteId - Site ID.\n     * @param {File} code - Gzip file with your code package. When used with the Appwrite CLI, pass the path to your code directory, and the CLI will automatically package your code. Use a path that is within the current directory.\n     * @param {boolean} activate - Automatically activate the deployment when it is finished building.\n     * @param {string} installCommand - Install Commands.\n     * @param {string} buildCommand - Build Commands.\n     * @param {string} outputDirectory - Output Directory.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createDeployment(siteId: string, code: File, activate: boolean, installCommand?: string, buildCommand?: string, outputDirectory?: string, onProgress?: (progress: UploadProgress) => void): Promise<Models.Deployment>;\n    createDeployment(\n        paramsOrFirst: { siteId: string, code: File, activate: boolean, installCommand?: string, buildCommand?: string, outputDirectory?: string, onProgress?: (progress: UploadProgress) => void  } | string,\n        ...rest: [(File)?, (boolean)?, (string)?, (string)?, (string)?,((progress: UploadProgress) => void)?]    \n    ): Promise<Models.Deployment> {\n        let params: { siteId: string, code: File, activate: boolean, installCommand?: string, buildCommand?: string, outputDirectory?: string };\n        let onProgress: ((progress: UploadProgress) => void);\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, code: File, activate: boolean, installCommand?: string, buildCommand?: string, outputDirectory?: string };\n            onProgress = paramsOrFirst?.onProgress as ((progress: UploadProgress) => void);\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                code: rest[0] as File,\n                activate: rest[1] as boolean,\n                installCommand: rest[2] as string,\n                buildCommand: rest[3] as string,\n                outputDirectory: rest[4] as string            \n            };\n            onProgress = rest[5] as ((progress: UploadProgress) => void);\n        }\n        \n        const siteId = params.siteId;\n        const code = params.code;\n        const activate = params.activate;\n        const installCommand = params.installCommand;\n        const buildCommand = params.buildCommand;\n        const outputDirectory = params.outputDirectory;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n        if (typeof activate === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"activate\"');\n        }\n\n        const apiPath = '/sites/{siteId}/deployments'.replace('{siteId}', siteId);\n        const payload: Payload = {};\n        if (typeof installCommand !== 'undefined') {\n            payload['installCommand'] = installCommand;\n        }\n        if (typeof buildCommand !== 'undefined') {\n            payload['buildCommand'] = buildCommand;\n        }\n        if (typeof outputDirectory !== 'undefined') {\n            payload['outputDirectory'] = outputDirectory;\n        }\n        if (typeof code !== 'undefined') {\n            payload['code'] = code;\n        }\n        if (typeof activate !== 'undefined') {\n            payload['activate'] = activate;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'multipart/form-data',\n        }\n\n        return this.client.chunkedUpload(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n            onProgress\n        );\n    }\n\n    /**\n     * Create a new build for an existing site deployment. This endpoint allows you to rebuild a deployment with the updated site configuration, including its commands and output directory if they have been modified. The build process will be queued and executed asynchronously. The original deployment's code will be preserved and used for the new build.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @param {string} params.deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     */\n    createDuplicateDeployment(params: { siteId: string, deploymentId: string  }): Promise<Models.Deployment>;\n    /**\n     * Create a new build for an existing site deployment. This endpoint allows you to rebuild a deployment with the updated site configuration, including its commands and output directory if they have been modified. The build process will be queued and executed asynchronously. The original deployment's code will be preserved and used for the new build.\n     *\n     * @param {string} siteId - Site ID.\n     * @param {string} deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createDuplicateDeployment(siteId: string, deploymentId: string): Promise<Models.Deployment>;\n    createDuplicateDeployment(\n        paramsOrFirst: { siteId: string, deploymentId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Deployment> {\n        let params: { siteId: string, deploymentId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, deploymentId: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                deploymentId: rest[0] as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const deploymentId = params.deploymentId;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n        const apiPath = '/sites/{siteId}/deployments/duplicate'.replace('{siteId}', siteId);\n        const payload: Payload = {};\n        if (typeof deploymentId !== 'undefined') {\n            payload['deploymentId'] = deploymentId;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a deployment based on a template.\n     * \n     * Use this endpoint with combination of [listTemplates](https://appwrite.io/docs/server/sites#listTemplates) to find the template details.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @param {string} params.repository - Repository name of the template.\n     * @param {string} params.owner - The name of the owner of the template.\n     * @param {string} params.rootDirectory - Path to site code in the template repo.\n     * @param {string} params.version - Version (tag) for the repo linked to the site template.\n     * @param {boolean} params.activate - Automatically activate the deployment when it is finished building.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     */\n    createTemplateDeployment(params: { siteId: string, repository: string, owner: string, rootDirectory: string, version: string, activate?: boolean  }): Promise<Models.Deployment>;\n    /**\n     * Create a deployment based on a template.\n     * \n     * Use this endpoint with combination of [listTemplates](https://appwrite.io/docs/server/sites#listTemplates) to find the template details.\n     *\n     * @param {string} siteId - Site ID.\n     * @param {string} repository - Repository name of the template.\n     * @param {string} owner - The name of the owner of the template.\n     * @param {string} rootDirectory - Path to site code in the template repo.\n     * @param {string} version - Version (tag) for the repo linked to the site template.\n     * @param {boolean} activate - Automatically activate the deployment when it is finished building.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createTemplateDeployment(siteId: string, repository: string, owner: string, rootDirectory: string, version: string, activate?: boolean): Promise<Models.Deployment>;\n    createTemplateDeployment(\n        paramsOrFirst: { siteId: string, repository: string, owner: string, rootDirectory: string, version: string, activate?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Deployment> {\n        let params: { siteId: string, repository: string, owner: string, rootDirectory: string, version: string, activate?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, repository: string, owner: string, rootDirectory: string, version: string, activate?: boolean };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                repository: rest[0] as string,\n                owner: rest[1] as string,\n                rootDirectory: rest[2] as string,\n                version: rest[3] as string,\n                activate: rest[4] as boolean            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const repository = params.repository;\n        const owner = params.owner;\n        const rootDirectory = params.rootDirectory;\n        const version = params.version;\n        const activate = params.activate;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof repository === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"repository\"');\n        }\n        if (typeof owner === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"owner\"');\n        }\n        if (typeof rootDirectory === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"rootDirectory\"');\n        }\n        if (typeof version === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"version\"');\n        }\n\n        const apiPath = '/sites/{siteId}/deployments/template'.replace('{siteId}', siteId);\n        const payload: Payload = {};\n        if (typeof repository !== 'undefined') {\n            payload['repository'] = repository;\n        }\n        if (typeof owner !== 'undefined') {\n            payload['owner'] = owner;\n        }\n        if (typeof rootDirectory !== 'undefined') {\n            payload['rootDirectory'] = rootDirectory;\n        }\n        if (typeof version !== 'undefined') {\n            payload['version'] = version;\n        }\n        if (typeof activate !== 'undefined') {\n            payload['activate'] = activate;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a deployment when a site is connected to VCS.\n     * \n     * This endpoint lets you create deployment from a branch, commit, or a tag.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @param {VCSDeploymentType} params.type - Type of reference passed. Allowed values are: branch, commit\n     * @param {string} params.reference - VCS reference to create deployment from. Depending on type this can be: branch name, commit hash\n     * @param {boolean} params.activate - Automatically activate the deployment when it is finished building.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     */\n    createVcsDeployment(params: { siteId: string, type: VCSDeploymentType, reference: string, activate?: boolean  }): Promise<Models.Deployment>;\n    /**\n     * Create a deployment when a site is connected to VCS.\n     * \n     * This endpoint lets you create deployment from a branch, commit, or a tag.\n     *\n     * @param {string} siteId - Site ID.\n     * @param {VCSDeploymentType} type - Type of reference passed. Allowed values are: branch, commit\n     * @param {string} reference - VCS reference to create deployment from. Depending on type this can be: branch name, commit hash\n     * @param {boolean} activate - Automatically activate the deployment when it is finished building.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createVcsDeployment(siteId: string, type: VCSDeploymentType, reference: string, activate?: boolean): Promise<Models.Deployment>;\n    createVcsDeployment(\n        paramsOrFirst: { siteId: string, type: VCSDeploymentType, reference: string, activate?: boolean } | string,\n        ...rest: [(VCSDeploymentType)?, (string)?, (boolean)?]    \n    ): Promise<Models.Deployment> {\n        let params: { siteId: string, type: VCSDeploymentType, reference: string, activate?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, type: VCSDeploymentType, reference: string, activate?: boolean };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                type: rest[0] as VCSDeploymentType,\n                reference: rest[1] as string,\n                activate: rest[2] as boolean            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const type = params.type;\n        const reference = params.reference;\n        const activate = params.activate;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n        if (typeof reference === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"reference\"');\n        }\n\n        const apiPath = '/sites/{siteId}/deployments/vcs'.replace('{siteId}', siteId);\n        const payload: Payload = {};\n        if (typeof type !== 'undefined') {\n            payload['type'] = type;\n        }\n        if (typeof reference !== 'undefined') {\n            payload['reference'] = reference;\n        }\n        if (typeof activate !== 'undefined') {\n            payload['activate'] = activate;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a site deployment by its unique ID.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @param {string} params.deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     */\n    getDeployment(params: { siteId: string, deploymentId: string  }): Promise<Models.Deployment>;\n    /**\n     * Get a site deployment by its unique ID.\n     *\n     * @param {string} siteId - Site ID.\n     * @param {string} deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getDeployment(siteId: string, deploymentId: string): Promise<Models.Deployment>;\n    getDeployment(\n        paramsOrFirst: { siteId: string, deploymentId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Deployment> {\n        let params: { siteId: string, deploymentId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, deploymentId: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                deploymentId: rest[0] as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const deploymentId = params.deploymentId;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n        const apiPath = '/sites/{siteId}/deployments/{deploymentId}'.replace('{siteId}', siteId).replace('{deploymentId}', deploymentId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a site deployment by its unique ID.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @param {string} params.deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteDeployment(params: { siteId: string, deploymentId: string  }): Promise<{}>;\n    /**\n     * Delete a site deployment by its unique ID.\n     *\n     * @param {string} siteId - Site ID.\n     * @param {string} deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteDeployment(siteId: string, deploymentId: string): Promise<{}>;\n    deleteDeployment(\n        paramsOrFirst: { siteId: string, deploymentId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<{}> {\n        let params: { siteId: string, deploymentId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, deploymentId: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                deploymentId: rest[0] as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const deploymentId = params.deploymentId;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n        const apiPath = '/sites/{siteId}/deployments/{deploymentId}'.replace('{siteId}', siteId).replace('{deploymentId}', deploymentId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a site deployment content by its unique ID. The endpoint response return with a 'Content-Disposition: attachment' header that tells the browser to start downloading the file to user downloads directory.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @param {string} params.deploymentId - Deployment ID.\n     * @param {DeploymentDownloadType} params.type - Deployment file to download. Can be: \"source\", \"output\".\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    getDeploymentDownload(params: { siteId: string, deploymentId: string, type?: DeploymentDownloadType  }): Promise<ArrayBuffer>;\n    /**\n     * Get a site deployment content by its unique ID. The endpoint response return with a 'Content-Disposition: attachment' header that tells the browser to start downloading the file to user downloads directory.\n     *\n     * @param {string} siteId - Site ID.\n     * @param {string} deploymentId - Deployment ID.\n     * @param {DeploymentDownloadType} type - Deployment file to download. Can be: \"source\", \"output\".\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getDeploymentDownload(siteId: string, deploymentId: string, type?: DeploymentDownloadType): Promise<ArrayBuffer>;\n    getDeploymentDownload(\n        paramsOrFirst: { siteId: string, deploymentId: string, type?: DeploymentDownloadType } | string,\n        ...rest: [(string)?, (DeploymentDownloadType)?]    \n    ): Promise<ArrayBuffer> {\n        let params: { siteId: string, deploymentId: string, type?: DeploymentDownloadType };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, deploymentId: string, type?: DeploymentDownloadType };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                deploymentId: rest[0] as string,\n                type: rest[1] as DeploymentDownloadType            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const deploymentId = params.deploymentId;\n        const type = params.type;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n        const apiPath = '/sites/{siteId}/deployments/{deploymentId}/download'.replace('{siteId}', siteId).replace('{deploymentId}', deploymentId);\n        const payload: Payload = {};\n        if (typeof type !== 'undefined') {\n            payload['type'] = type;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n\n    /**\n     * Cancel an ongoing site deployment build. If the build is already in progress, it will be stopped and marked as canceled. If the build hasn't started yet, it will be marked as canceled without executing. You cannot cancel builds that have already completed (status 'ready') or failed. The response includes the final build status and details.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @param {string} params.deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     */\n    updateDeploymentStatus(params: { siteId: string, deploymentId: string  }): Promise<Models.Deployment>;\n    /**\n     * Cancel an ongoing site deployment build. If the build is already in progress, it will be stopped and marked as canceled. If the build hasn't started yet, it will be marked as canceled without executing. You cannot cancel builds that have already completed (status 'ready') or failed. The response includes the final build status and details.\n     *\n     * @param {string} siteId - Site ID.\n     * @param {string} deploymentId - Deployment ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateDeploymentStatus(siteId: string, deploymentId: string): Promise<Models.Deployment>;\n    updateDeploymentStatus(\n        paramsOrFirst: { siteId: string, deploymentId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Deployment> {\n        let params: { siteId: string, deploymentId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, deploymentId: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                deploymentId: rest[0] as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const deploymentId = params.deploymentId;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n        const apiPath = '/sites/{siteId}/deployments/{deploymentId}/status'.replace('{siteId}', siteId).replace('{deploymentId}', deploymentId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all site logs. You can use the query params to filter your results.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: trigger, status, responseStatusCode, duration, requestMethod, requestPath, deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ExecutionList>}\n     */\n    listLogs(params: { siteId: string, queries?: string[]  }): Promise<Models.ExecutionList>;\n    /**\n     * Get a list of all site logs. You can use the query params to filter your results.\n     *\n     * @param {string} siteId - Site ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: trigger, status, responseStatusCode, duration, requestMethod, requestPath, deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ExecutionList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listLogs(siteId: string, queries?: string[]): Promise<Models.ExecutionList>;\n    listLogs(\n        paramsOrFirst: { siteId: string, queries?: string[] } | string,\n        ...rest: [(string[])?]    \n    ): Promise<Models.ExecutionList> {\n        let params: { siteId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, queries?: string[] };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                queries: rest[0] as string[]            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const queries = params.queries;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n\n        const apiPath = '/sites/{siteId}/logs'.replace('{siteId}', siteId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a site request log by its unique ID.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @param {string} params.logId - Log ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Execution>}\n     */\n    getLog(params: { siteId: string, logId: string  }): Promise<Models.Execution>;\n    /**\n     * Get a site request log by its unique ID.\n     *\n     * @param {string} siteId - Site ID.\n     * @param {string} logId - Log ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Execution>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getLog(siteId: string, logId: string): Promise<Models.Execution>;\n    getLog(\n        paramsOrFirst: { siteId: string, logId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Execution> {\n        let params: { siteId: string, logId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, logId: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                logId: rest[0] as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const logId = params.logId;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof logId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"logId\"');\n        }\n\n        const apiPath = '/sites/{siteId}/logs/{logId}'.replace('{siteId}', siteId).replace('{logId}', logId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a site log by its unique ID.\n     *\n     * @param {string} params.siteId - Site ID.\n     * @param {string} params.logId - Log ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteLog(params: { siteId: string, logId: string  }): Promise<{}>;\n    /**\n     * Delete a site log by its unique ID.\n     *\n     * @param {string} siteId - Site ID.\n     * @param {string} logId - Log ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteLog(siteId: string, logId: string): Promise<{}>;\n    deleteLog(\n        paramsOrFirst: { siteId: string, logId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<{}> {\n        let params: { siteId: string, logId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, logId: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                logId: rest[0] as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const logId = params.logId;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof logId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"logId\"');\n        }\n\n        const apiPath = '/sites/{siteId}/logs/{logId}'.replace('{siteId}', siteId).replace('{logId}', logId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all variables of a specific site.\n     *\n     * @param {string} params.siteId - Site unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.VariableList>}\n     */\n    listVariables(params: { siteId: string  }): Promise<Models.VariableList>;\n    /**\n     * Get a list of all variables of a specific site.\n     *\n     * @param {string} siteId - Site unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.VariableList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listVariables(siteId: string): Promise<Models.VariableList>;\n    listVariables(\n        paramsOrFirst: { siteId: string } | string    \n    ): Promise<Models.VariableList> {\n        let params: { siteId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n\n        const apiPath = '/sites/{siteId}/variables'.replace('{siteId}', siteId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new site variable. These variables can be accessed during build and runtime (server-side rendering) as environment variables.\n     *\n     * @param {string} params.siteId - Site unique ID.\n     * @param {string} params.key - Variable key. Max length: 255 chars.\n     * @param {string} params.value - Variable value. Max length: 8192 chars.\n     * @param {boolean} params.secret - Secret variables can be updated or deleted, but only sites can read them during build and runtime.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     */\n    createVariable(params: { siteId: string, key: string, value: string, secret?: boolean  }): Promise<Models.Variable>;\n    /**\n     * Create a new site variable. These variables can be accessed during build and runtime (server-side rendering) as environment variables.\n     *\n     * @param {string} siteId - Site unique ID.\n     * @param {string} key - Variable key. Max length: 255 chars.\n     * @param {string} value - Variable value. Max length: 8192 chars.\n     * @param {boolean} secret - Secret variables can be updated or deleted, but only sites can read them during build and runtime.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createVariable(siteId: string, key: string, value: string, secret?: boolean): Promise<Models.Variable>;\n    createVariable(\n        paramsOrFirst: { siteId: string, key: string, value: string, secret?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Variable> {\n        let params: { siteId: string, key: string, value: string, secret?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, key: string, value: string, secret?: boolean };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                key: rest[0] as string,\n                value: rest[1] as string,\n                secret: rest[2] as boolean            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const key = params.key;\n        const value = params.value;\n        const secret = params.secret;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof value === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"value\"');\n        }\n\n        const apiPath = '/sites/{siteId}/variables'.replace('{siteId}', siteId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof value !== 'undefined') {\n            payload['value'] = value;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a variable by its unique ID.\n     *\n     * @param {string} params.siteId - Site unique ID.\n     * @param {string} params.variableId - Variable unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     */\n    getVariable(params: { siteId: string, variableId: string  }): Promise<Models.Variable>;\n    /**\n     * Get a variable by its unique ID.\n     *\n     * @param {string} siteId - Site unique ID.\n     * @param {string} variableId - Variable unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getVariable(siteId: string, variableId: string): Promise<Models.Variable>;\n    getVariable(\n        paramsOrFirst: { siteId: string, variableId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Variable> {\n        let params: { siteId: string, variableId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, variableId: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                variableId: rest[0] as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const variableId = params.variableId;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n\n        const apiPath = '/sites/{siteId}/variables/{variableId}'.replace('{siteId}', siteId).replace('{variableId}', variableId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update variable by its unique ID.\n     *\n     * @param {string} params.siteId - Site unique ID.\n     * @param {string} params.variableId - Variable unique ID.\n     * @param {string} params.key - Variable key. Max length: 255 chars.\n     * @param {string} params.value - Variable value. Max length: 8192 chars.\n     * @param {boolean} params.secret - Secret variables can be updated or deleted, but only sites can read them during build and runtime.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     */\n    updateVariable(params: { siteId: string, variableId: string, key: string, value?: string, secret?: boolean  }): Promise<Models.Variable>;\n    /**\n     * Update variable by its unique ID.\n     *\n     * @param {string} siteId - Site unique ID.\n     * @param {string} variableId - Variable unique ID.\n     * @param {string} key - Variable key. Max length: 255 chars.\n     * @param {string} value - Variable value. Max length: 8192 chars.\n     * @param {boolean} secret - Secret variables can be updated or deleted, but only sites can read them during build and runtime.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateVariable(siteId: string, variableId: string, key: string, value?: string, secret?: boolean): Promise<Models.Variable>;\n    updateVariable(\n        paramsOrFirst: { siteId: string, variableId: string, key: string, value?: string, secret?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string)?, (boolean)?]    \n    ): Promise<Models.Variable> {\n        let params: { siteId: string, variableId: string, key: string, value?: string, secret?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, variableId: string, key: string, value?: string, secret?: boolean };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                variableId: rest[0] as string,\n                key: rest[1] as string,\n                value: rest[2] as string,\n                secret: rest[3] as boolean            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const variableId = params.variableId;\n        const key = params.key;\n        const value = params.value;\n        const secret = params.secret;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        const apiPath = '/sites/{siteId}/variables/{variableId}'.replace('{siteId}', siteId).replace('{variableId}', variableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof value !== 'undefined') {\n            payload['value'] = value;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a variable by its unique ID.\n     *\n     * @param {string} params.siteId - Site unique ID.\n     * @param {string} params.variableId - Variable unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteVariable(params: { siteId: string, variableId: string  }): Promise<{}>;\n    /**\n     * Delete a variable by its unique ID.\n     *\n     * @param {string} siteId - Site unique ID.\n     * @param {string} variableId - Variable unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteVariable(siteId: string, variableId: string): Promise<{}>;\n    deleteVariable(\n        paramsOrFirst: { siteId: string, variableId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<{}> {\n        let params: { siteId: string, variableId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { siteId: string, variableId: string };\n        } else {\n            params = {\n                siteId: paramsOrFirst as string,\n                variableId: rest[0] as string            \n            };\n        }\n        \n        const siteId = params.siteId;\n        const variableId = params.variableId;\n\n        if (typeof siteId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"siteId\"');\n        }\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n\n        const apiPath = '/sites/{siteId}/variables/{variableId}'.replace('{siteId}', siteId).replace('{variableId}', variableId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n", "import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\nimport { Compression } from '../enums/compression';\nimport { ImageGravity } from '../enums/image-gravity';\nimport { ImageFormat } from '../enums/image-format';\n\nexport class Storage {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Get a list of all the storage buckets. You can use the query params to filter your results.\n     *\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: enabled, name, fileSecurity, maximumFileSize, encryption, antivirus\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.BucketList>}\n     */\n    listBuckets(params?: { queries?: string[], search?: string  }): Promise<Models.BucketList>;\n    /**\n     * Get a list of all the storage buckets. You can use the query params to filter your results.\n     *\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: enabled, name, fileSecurity, maximumFileSize, encryption, antivirus\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.BucketList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listBuckets(queries?: string[], search?: string): Promise<Models.BucketList>;\n    listBuckets(\n        paramsOrFirst?: { queries?: string[], search?: string } | string[],\n        ...rest: [(string)?]    \n    ): Promise<Models.BucketList> {\n        let params: { queries?: string[], search?: string };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { queries?: string[], search?: string };\n        } else {\n            params = {\n                queries: paramsOrFirst as string[],\n                search: rest[0] as string            \n            };\n        }\n        \n        const queries = params.queries;\n        const search = params.search;\n\n\n        const apiPath = '/storage/buckets';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new storage bucket.\n     *\n     * @param {string} params.bucketId - Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Bucket name\n     * @param {string[]} params.permissions - An array of permission strings. By default, no user is granted with any permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} params.fileSecurity - Enables configuring permissions for individual file. A user needs one of file or bucket level permissions to access a file. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} params.enabled - Is bucket enabled? When set to 'disabled', users cannot access the files in this bucket but Server SDKs with and API key can still access the bucket. No files are lost when this is toggled.\n     * @param {number} params.maximumFileSize - Maximum file size allowed in bytes. Maximum allowed value is 30MB.\n     * @param {string[]} params.allowedFileExtensions - Allowed file extensions. Maximum of 100 extensions are allowed, each 64 characters long.\n     * @param {Compression} params.compression - Compression algorithm choosen for compression. Can be one of none,  [gzip](https://en.wikipedia.org/wiki/Gzip), or [zstd](https://en.wikipedia.org/wiki/Zstd), For file size above 20MB compression is skipped even if it's enabled\n     * @param {boolean} params.encryption - Is encryption enabled? For file size above 20MB encryption is skipped even if it's enabled\n     * @param {boolean} params.antivirus - Is virus scanning enabled? For file size above 20MB AntiVirus scanning is skipped even if it's enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Bucket>}\n     */\n    createBucket(params: { bucketId: string, name: string, permissions?: string[], fileSecurity?: boolean, enabled?: boolean, maximumFileSize?: number, allowedFileExtensions?: string[], compression?: Compression, encryption?: boolean, antivirus?: boolean  }): Promise<Models.Bucket>;\n    /**\n     * Create a new storage bucket.\n     *\n     * @param {string} bucketId - Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Bucket name\n     * @param {string[]} permissions - An array of permission strings. By default, no user is granted with any permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} fileSecurity - Enables configuring permissions for individual file. A user needs one of file or bucket level permissions to access a file. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} enabled - Is bucket enabled? When set to 'disabled', users cannot access the files in this bucket but Server SDKs with and API key can still access the bucket. No files are lost when this is toggled.\n     * @param {number} maximumFileSize - Maximum file size allowed in bytes. Maximum allowed value is 30MB.\n     * @param {string[]} allowedFileExtensions - Allowed file extensions. Maximum of 100 extensions are allowed, each 64 characters long.\n     * @param {Compression} compression - Compression algorithm choosen for compression. Can be one of none,  [gzip](https://en.wikipedia.org/wiki/Gzip), or [zstd](https://en.wikipedia.org/wiki/Zstd), For file size above 20MB compression is skipped even if it's enabled\n     * @param {boolean} encryption - Is encryption enabled? For file size above 20MB encryption is skipped even if it's enabled\n     * @param {boolean} antivirus - Is virus scanning enabled? For file size above 20MB AntiVirus scanning is skipped even if it's enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Bucket>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createBucket(bucketId: string, name: string, permissions?: string[], fileSecurity?: boolean, enabled?: boolean, maximumFileSize?: number, allowedFileExtensions?: string[], compression?: Compression, encryption?: boolean, antivirus?: boolean): Promise<Models.Bucket>;\n    createBucket(\n        paramsOrFirst: { bucketId: string, name: string, permissions?: string[], fileSecurity?: boolean, enabled?: boolean, maximumFileSize?: number, allowedFileExtensions?: string[], compression?: Compression, encryption?: boolean, antivirus?: boolean } | string,\n        ...rest: [(string)?, (string[])?, (boolean)?, (boolean)?, (number)?, (string[])?, (Compression)?, (boolean)?, (boolean)?]    \n    ): Promise<Models.Bucket> {\n        let params: { bucketId: string, name: string, permissions?: string[], fileSecurity?: boolean, enabled?: boolean, maximumFileSize?: number, allowedFileExtensions?: string[], compression?: Compression, encryption?: boolean, antivirus?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { bucketId: string, name: string, permissions?: string[], fileSecurity?: boolean, enabled?: boolean, maximumFileSize?: number, allowedFileExtensions?: string[], compression?: Compression, encryption?: boolean, antivirus?: boolean };\n        } else {\n            params = {\n                bucketId: paramsOrFirst as string,\n                name: rest[0] as string,\n                permissions: rest[1] as string[],\n                fileSecurity: rest[2] as boolean,\n                enabled: rest[3] as boolean,\n                maximumFileSize: rest[4] as number,\n                allowedFileExtensions: rest[5] as string[],\n                compression: rest[6] as Compression,\n                encryption: rest[7] as boolean,\n                antivirus: rest[8] as boolean            \n            };\n        }\n        \n        const bucketId = params.bucketId;\n        const name = params.name;\n        const permissions = params.permissions;\n        const fileSecurity = params.fileSecurity;\n        const enabled = params.enabled;\n        const maximumFileSize = params.maximumFileSize;\n        const allowedFileExtensions = params.allowedFileExtensions;\n        const compression = params.compression;\n        const encryption = params.encryption;\n        const antivirus = params.antivirus;\n\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/storage/buckets';\n        const payload: Payload = {};\n        if (typeof bucketId !== 'undefined') {\n            payload['bucketId'] = bucketId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        if (typeof fileSecurity !== 'undefined') {\n            payload['fileSecurity'] = fileSecurity;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof maximumFileSize !== 'undefined') {\n            payload['maximumFileSize'] = maximumFileSize;\n        }\n        if (typeof allowedFileExtensions !== 'undefined') {\n            payload['allowedFileExtensions'] = allowedFileExtensions;\n        }\n        if (typeof compression !== 'undefined') {\n            payload['compression'] = compression;\n        }\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n        if (typeof antivirus !== 'undefined') {\n            payload['antivirus'] = antivirus;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a storage bucket by its unique ID. This endpoint response returns a JSON object with the storage bucket metadata.\n     *\n     * @param {string} params.bucketId - Bucket unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Bucket>}\n     */\n    getBucket(params: { bucketId: string  }): Promise<Models.Bucket>;\n    /**\n     * Get a storage bucket by its unique ID. This endpoint response returns a JSON object with the storage bucket metadata.\n     *\n     * @param {string} bucketId - Bucket unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Bucket>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getBucket(bucketId: string): Promise<Models.Bucket>;\n    getBucket(\n        paramsOrFirst: { bucketId: string } | string    \n    ): Promise<Models.Bucket> {\n        let params: { bucketId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { bucketId: string };\n        } else {\n            params = {\n                bucketId: paramsOrFirst as string            \n            };\n        }\n        \n        const bucketId = params.bucketId;\n\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}'.replace('{bucketId}', bucketId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a storage bucket by its unique ID.\n     *\n     * @param {string} params.bucketId - Bucket unique ID.\n     * @param {string} params.name - Bucket name\n     * @param {string[]} params.permissions - An array of permission strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} params.fileSecurity - Enables configuring permissions for individual file. A user needs one of file or bucket level permissions to access a file. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} params.enabled - Is bucket enabled? When set to 'disabled', users cannot access the files in this bucket but Server SDKs with and API key can still access the bucket. No files are lost when this is toggled.\n     * @param {number} params.maximumFileSize - Maximum file size allowed in bytes. Maximum allowed value is 30MB.\n     * @param {string[]} params.allowedFileExtensions - Allowed file extensions. Maximum of 100 extensions are allowed, each 64 characters long.\n     * @param {Compression} params.compression - Compression algorithm choosen for compression. Can be one of none, [gzip](https://en.wikipedia.org/wiki/Gzip), or [zstd](https://en.wikipedia.org/wiki/Zstd), For file size above 20MB compression is skipped even if it's enabled\n     * @param {boolean} params.encryption - Is encryption enabled? For file size above 20MB encryption is skipped even if it's enabled\n     * @param {boolean} params.antivirus - Is virus scanning enabled? For file size above 20MB AntiVirus scanning is skipped even if it's enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Bucket>}\n     */\n    updateBucket(params: { bucketId: string, name: string, permissions?: string[], fileSecurity?: boolean, enabled?: boolean, maximumFileSize?: number, allowedFileExtensions?: string[], compression?: Compression, encryption?: boolean, antivirus?: boolean  }): Promise<Models.Bucket>;\n    /**\n     * Update a storage bucket by its unique ID.\n     *\n     * @param {string} bucketId - Bucket unique ID.\n     * @param {string} name - Bucket name\n     * @param {string[]} permissions - An array of permission strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} fileSecurity - Enables configuring permissions for individual file. A user needs one of file or bucket level permissions to access a file. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} enabled - Is bucket enabled? When set to 'disabled', users cannot access the files in this bucket but Server SDKs with and API key can still access the bucket. No files are lost when this is toggled.\n     * @param {number} maximumFileSize - Maximum file size allowed in bytes. Maximum allowed value is 30MB.\n     * @param {string[]} allowedFileExtensions - Allowed file extensions. Maximum of 100 extensions are allowed, each 64 characters long.\n     * @param {Compression} compression - Compression algorithm choosen for compression. Can be one of none, [gzip](https://en.wikipedia.org/wiki/Gzip), or [zstd](https://en.wikipedia.org/wiki/Zstd), For file size above 20MB compression is skipped even if it's enabled\n     * @param {boolean} encryption - Is encryption enabled? For file size above 20MB encryption is skipped even if it's enabled\n     * @param {boolean} antivirus - Is virus scanning enabled? For file size above 20MB AntiVirus scanning is skipped even if it's enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Bucket>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateBucket(bucketId: string, name: string, permissions?: string[], fileSecurity?: boolean, enabled?: boolean, maximumFileSize?: number, allowedFileExtensions?: string[], compression?: Compression, encryption?: boolean, antivirus?: boolean): Promise<Models.Bucket>;\n    updateBucket(\n        paramsOrFirst: { bucketId: string, name: string, permissions?: string[], fileSecurity?: boolean, enabled?: boolean, maximumFileSize?: number, allowedFileExtensions?: string[], compression?: Compression, encryption?: boolean, antivirus?: boolean } | string,\n        ...rest: [(string)?, (string[])?, (boolean)?, (boolean)?, (number)?, (string[])?, (Compression)?, (boolean)?, (boolean)?]    \n    ): Promise<Models.Bucket> {\n        let params: { bucketId: string, name: string, permissions?: string[], fileSecurity?: boolean, enabled?: boolean, maximumFileSize?: number, allowedFileExtensions?: string[], compression?: Compression, encryption?: boolean, antivirus?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { bucketId: string, name: string, permissions?: string[], fileSecurity?: boolean, enabled?: boolean, maximumFileSize?: number, allowedFileExtensions?: string[], compression?: Compression, encryption?: boolean, antivirus?: boolean };\n        } else {\n            params = {\n                bucketId: paramsOrFirst as string,\n                name: rest[0] as string,\n                permissions: rest[1] as string[],\n                fileSecurity: rest[2] as boolean,\n                enabled: rest[3] as boolean,\n                maximumFileSize: rest[4] as number,\n                allowedFileExtensions: rest[5] as string[],\n                compression: rest[6] as Compression,\n                encryption: rest[7] as boolean,\n                antivirus: rest[8] as boolean            \n            };\n        }\n        \n        const bucketId = params.bucketId;\n        const name = params.name;\n        const permissions = params.permissions;\n        const fileSecurity = params.fileSecurity;\n        const enabled = params.enabled;\n        const maximumFileSize = params.maximumFileSize;\n        const allowedFileExtensions = params.allowedFileExtensions;\n        const compression = params.compression;\n        const encryption = params.encryption;\n        const antivirus = params.antivirus;\n\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}'.replace('{bucketId}', bucketId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        if (typeof fileSecurity !== 'undefined') {\n            payload['fileSecurity'] = fileSecurity;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof maximumFileSize !== 'undefined') {\n            payload['maximumFileSize'] = maximumFileSize;\n        }\n        if (typeof allowedFileExtensions !== 'undefined') {\n            payload['allowedFileExtensions'] = allowedFileExtensions;\n        }\n        if (typeof compression !== 'undefined') {\n            payload['compression'] = compression;\n        }\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n        if (typeof antivirus !== 'undefined') {\n            payload['antivirus'] = antivirus;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a storage bucket by its unique ID.\n     *\n     * @param {string} params.bucketId - Bucket unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteBucket(params: { bucketId: string  }): Promise<{}>;\n    /**\n     * Delete a storage bucket by its unique ID.\n     *\n     * @param {string} bucketId - Bucket unique ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteBucket(bucketId: string): Promise<{}>;\n    deleteBucket(\n        paramsOrFirst: { bucketId: string } | string    \n    ): Promise<{}> {\n        let params: { bucketId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { bucketId: string };\n        } else {\n            params = {\n                bucketId: paramsOrFirst as string            \n            };\n        }\n        \n        const bucketId = params.bucketId;\n\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}'.replace('{bucketId}', bucketId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all the user files. You can use the query params to filter your results.\n     *\n     * @param {string} params.bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, signature, mimeType, sizeOriginal, chunksTotal, chunksUploaded\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.FileList>}\n     */\n    listFiles(params: { bucketId: string, queries?: string[], search?: string  }): Promise<Models.FileList>;\n    /**\n     * Get a list of all the user files. You can use the query params to filter your results.\n     *\n     * @param {string} bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, signature, mimeType, sizeOriginal, chunksTotal, chunksUploaded\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.FileList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listFiles(bucketId: string, queries?: string[], search?: string): Promise<Models.FileList>;\n    listFiles(\n        paramsOrFirst: { bucketId: string, queries?: string[], search?: string } | string,\n        ...rest: [(string[])?, (string)?]    \n    ): Promise<Models.FileList> {\n        let params: { bucketId: string, queries?: string[], search?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { bucketId: string, queries?: string[], search?: string };\n        } else {\n            params = {\n                bucketId: paramsOrFirst as string,\n                queries: rest[0] as string[],\n                search: rest[1] as string            \n            };\n        }\n        \n        const bucketId = params.bucketId;\n        const queries = params.queries;\n        const search = params.search;\n\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files'.replace('{bucketId}', bucketId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new file. Before using this route, you should create a new bucket resource using either a [server integration](https://appwrite.io/docs/server/storage#storageCreateBucket) API or directly from your Appwrite console.\n     * \n     * Larger files should be uploaded using multiple requests with the [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range) header to send a partial request with a maximum supported chunk of `5MB`. The `content-range` header values should always be in bytes.\n     * \n     * When the first request is sent, the server will return the **File** object, and the subsequent part request must include the file's **id** in `x-appwrite-id` header to allow the server to know that the partial upload is for the existing file and not for a new one.\n     * \n     * If you're creating a new file using one of the Appwrite SDKs, all the chunking logic will be managed by the SDK internally.\n     * \n     *\n     * @param {string} params.bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} params.fileId - File ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {File} params.file - Binary file. Appwrite SDKs provide helpers to handle file input. [Learn about file input](https://appwrite.io/docs/products/storage/upload-download#input-file).\n     * @param {string[]} params.permissions - An array of permission strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.File>}\n     */\n    createFile(params: { bucketId: string, fileId: string, file: File, permissions?: string[] , onProgress?: (progress: UploadProgress) => void }): Promise<Models.File>;\n    /**\n     * Create a new file. Before using this route, you should create a new bucket resource using either a [server integration](https://appwrite.io/docs/server/storage#storageCreateBucket) API or directly from your Appwrite console.\n     * \n     * Larger files should be uploaded using multiple requests with the [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range) header to send a partial request with a maximum supported chunk of `5MB`. The `content-range` header values should always be in bytes.\n     * \n     * When the first request is sent, the server will return the **File** object, and the subsequent part request must include the file's **id** in `x-appwrite-id` header to allow the server to know that the partial upload is for the existing file and not for a new one.\n     * \n     * If you're creating a new file using one of the Appwrite SDKs, all the chunking logic will be managed by the SDK internally.\n     * \n     *\n     * @param {string} bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} fileId - File ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {File} file - Binary file. Appwrite SDKs provide helpers to handle file input. [Learn about file input](https://appwrite.io/docs/products/storage/upload-download#input-file).\n     * @param {string[]} permissions - An array of permission strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.File>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createFile(bucketId: string, fileId: string, file: File, permissions?: string[], onProgress?: (progress: UploadProgress) => void): Promise<Models.File>;\n    createFile(\n        paramsOrFirst: { bucketId: string, fileId: string, file: File, permissions?: string[], onProgress?: (progress: UploadProgress) => void  } | string,\n        ...rest: [(string)?, (File)?, (string[])?,((progress: UploadProgress) => void)?]    \n    ): Promise<Models.File> {\n        let params: { bucketId: string, fileId: string, file: File, permissions?: string[] };\n        let onProgress: ((progress: UploadProgress) => void);\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { bucketId: string, fileId: string, file: File, permissions?: string[] };\n            onProgress = paramsOrFirst?.onProgress as ((progress: UploadProgress) => void);\n        } else {\n            params = {\n                bucketId: paramsOrFirst as string,\n                fileId: rest[0] as string,\n                file: rest[1] as File,\n                permissions: rest[2] as string[]            \n            };\n            onProgress = rest[3] as ((progress: UploadProgress) => void);\n        }\n        \n        const bucketId = params.bucketId;\n        const fileId = params.fileId;\n        const file = params.file;\n        const permissions = params.permissions;\n\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        if (typeof file === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"file\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files'.replace('{bucketId}', bucketId);\n        const payload: Payload = {};\n        if (typeof fileId !== 'undefined') {\n            payload['fileId'] = fileId;\n        }\n        if (typeof file !== 'undefined') {\n            payload['file'] = file;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'multipart/form-data',\n        }\n\n        return this.client.chunkedUpload(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n            onProgress\n        );\n    }\n\n    /**\n     * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.\n     *\n     * @param {string} params.bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} params.fileId - File ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.File>}\n     */\n    getFile(params: { bucketId: string, fileId: string  }): Promise<Models.File>;\n    /**\n     * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.\n     *\n     * @param {string} bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} fileId - File ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.File>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getFile(bucketId: string, fileId: string): Promise<Models.File>;\n    getFile(\n        paramsOrFirst: { bucketId: string, fileId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.File> {\n        let params: { bucketId: string, fileId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { bucketId: string, fileId: string };\n        } else {\n            params = {\n                bucketId: paramsOrFirst as string,\n                fileId: rest[0] as string            \n            };\n        }\n        \n        const bucketId = params.bucketId;\n        const fileId = params.fileId;\n\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a file by its unique ID. Only users with write permissions have access to update this resource.\n     *\n     * @param {string} params.bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} params.fileId - File unique ID.\n     * @param {string} params.name - Name of the file\n     * @param {string[]} params.permissions - An array of permission string. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.File>}\n     */\n    updateFile(params: { bucketId: string, fileId: string, name?: string, permissions?: string[]  }): Promise<Models.File>;\n    /**\n     * Update a file by its unique ID. Only users with write permissions have access to update this resource.\n     *\n     * @param {string} bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} fileId - File unique ID.\n     * @param {string} name - Name of the file\n     * @param {string[]} permissions - An array of permission string. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.File>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateFile(bucketId: string, fileId: string, name?: string, permissions?: string[]): Promise<Models.File>;\n    updateFile(\n        paramsOrFirst: { bucketId: string, fileId: string, name?: string, permissions?: string[] } | string,\n        ...rest: [(string)?, (string)?, (string[])?]    \n    ): Promise<Models.File> {\n        let params: { bucketId: string, fileId: string, name?: string, permissions?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { bucketId: string, fileId: string, name?: string, permissions?: string[] };\n        } else {\n            params = {\n                bucketId: paramsOrFirst as string,\n                fileId: rest[0] as string,\n                name: rest[1] as string,\n                permissions: rest[2] as string[]            \n            };\n        }\n        \n        const bucketId = params.bucketId;\n        const fileId = params.fileId;\n        const name = params.name;\n        const permissions = params.permissions;\n\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.\n     *\n     * @param {string} params.bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} params.fileId - File ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteFile(params: { bucketId: string, fileId: string  }): Promise<{}>;\n    /**\n     * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.\n     *\n     * @param {string} bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} fileId - File ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteFile(bucketId: string, fileId: string): Promise<{}>;\n    deleteFile(\n        paramsOrFirst: { bucketId: string, fileId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<{}> {\n        let params: { bucketId: string, fileId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { bucketId: string, fileId: string };\n        } else {\n            params = {\n                bucketId: paramsOrFirst as string,\n                fileId: rest[0] as string            \n            };\n        }\n        \n        const bucketId = params.bucketId;\n        const fileId = params.fileId;\n\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a file content by its unique ID. The endpoint response return with a 'Content-Disposition: attachment' header that tells the browser to start downloading the file to user downloads directory.\n     *\n     * @param {string} params.bucketId - Storage bucket ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} params.fileId - File ID.\n     * @param {string} params.token - File token for accessing this file.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    getFileDownload(params: { bucketId: string, fileId: string, token?: string  }): Promise<ArrayBuffer>;\n    /**\n     * Get a file content by its unique ID. The endpoint response return with a 'Content-Disposition: attachment' header that tells the browser to start downloading the file to user downloads directory.\n     *\n     * @param {string} bucketId - Storage bucket ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} fileId - File ID.\n     * @param {string} token - File token for accessing this file.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getFileDownload(bucketId: string, fileId: string, token?: string): Promise<ArrayBuffer>;\n    getFileDownload(\n        paramsOrFirst: { bucketId: string, fileId: string, token?: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<ArrayBuffer> {\n        let params: { bucketId: string, fileId: string, token?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { bucketId: string, fileId: string, token?: string };\n        } else {\n            params = {\n                bucketId: paramsOrFirst as string,\n                fileId: rest[0] as string,\n                token: rest[1] as string            \n            };\n        }\n        \n        const bucketId = params.bucketId;\n        const fileId = params.fileId;\n        const token = params.token;\n\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/download'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n        if (typeof token !== 'undefined') {\n            payload['token'] = token;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n\n    /**\n     * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image. Preview is supported only for image files smaller than 10MB.\n     *\n     * @param {string} params.bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} params.fileId - File ID\n     * @param {number} params.width - Resize preview image width, Pass an integer between 0 to 4000.\n     * @param {number} params.height - Resize preview image height, Pass an integer between 0 to 4000.\n     * @param {ImageGravity} params.gravity - Image crop gravity. Can be one of center,top-left,top,top-right,left,right,bottom-left,bottom,bottom-right\n     * @param {number} params.quality - Preview image quality. Pass an integer between 0 to 100. Defaults to keep existing image quality.\n     * @param {number} params.borderWidth - Preview image border in pixels. Pass an integer between 0 to 100. Defaults to 0.\n     * @param {string} params.borderColor - Preview image border color. Use a valid HEX color, no # is needed for prefix.\n     * @param {number} params.borderRadius - Preview image border radius in pixels. Pass an integer between 0 to 4000.\n     * @param {number} params.opacity - Preview image opacity. Only works with images having an alpha channel (like png). Pass a number between 0 to 1.\n     * @param {number} params.rotation - Preview image rotation in degrees. Pass an integer between -360 and 360.\n     * @param {string} params.background - Preview image background color. Only works with transparent images (png). Use a valid HEX color, no # is needed for prefix.\n     * @param {ImageFormat} params.output - Output format type (jpeg, jpg, png, gif and webp).\n     * @param {string} params.token - File token for accessing this file.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    getFilePreview(params: { bucketId: string, fileId: string, width?: number, height?: number, gravity?: ImageGravity, quality?: number, borderWidth?: number, borderColor?: string, borderRadius?: number, opacity?: number, rotation?: number, background?: string, output?: ImageFormat, token?: string  }): Promise<ArrayBuffer>;\n    /**\n     * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image. Preview is supported only for image files smaller than 10MB.\n     *\n     * @param {string} bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} fileId - File ID\n     * @param {number} width - Resize preview image width, Pass an integer between 0 to 4000.\n     * @param {number} height - Resize preview image height, Pass an integer between 0 to 4000.\n     * @param {ImageGravity} gravity - Image crop gravity. Can be one of center,top-left,top,top-right,left,right,bottom-left,bottom,bottom-right\n     * @param {number} quality - Preview image quality. Pass an integer between 0 to 100. Defaults to keep existing image quality.\n     * @param {number} borderWidth - Preview image border in pixels. Pass an integer between 0 to 100. Defaults to 0.\n     * @param {string} borderColor - Preview image border color. Use a valid HEX color, no # is needed for prefix.\n     * @param {number} borderRadius - Preview image border radius in pixels. Pass an integer between 0 to 4000.\n     * @param {number} opacity - Preview image opacity. Only works with images having an alpha channel (like png). Pass a number between 0 to 1.\n     * @param {number} rotation - Preview image rotation in degrees. Pass an integer between -360 and 360.\n     * @param {string} background - Preview image background color. Only works with transparent images (png). Use a valid HEX color, no # is needed for prefix.\n     * @param {ImageFormat} output - Output format type (jpeg, jpg, png, gif and webp).\n     * @param {string} token - File token for accessing this file.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getFilePreview(bucketId: string, fileId: string, width?: number, height?: number, gravity?: ImageGravity, quality?: number, borderWidth?: number, borderColor?: string, borderRadius?: number, opacity?: number, rotation?: number, background?: string, output?: ImageFormat, token?: string): Promise<ArrayBuffer>;\n    getFilePreview(\n        paramsOrFirst: { bucketId: string, fileId: string, width?: number, height?: number, gravity?: ImageGravity, quality?: number, borderWidth?: number, borderColor?: string, borderRadius?: number, opacity?: number, rotation?: number, background?: string, output?: ImageFormat, token?: string } | string,\n        ...rest: [(string)?, (number)?, (number)?, (ImageGravity)?, (number)?, (number)?, (string)?, (number)?, (number)?, (number)?, (string)?, (ImageFormat)?, (string)?]    \n    ): Promise<ArrayBuffer> {\n        let params: { bucketId: string, fileId: string, width?: number, height?: number, gravity?: ImageGravity, quality?: number, borderWidth?: number, borderColor?: string, borderRadius?: number, opacity?: number, rotation?: number, background?: string, output?: ImageFormat, token?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { bucketId: string, fileId: string, width?: number, height?: number, gravity?: ImageGravity, quality?: number, borderWidth?: number, borderColor?: string, borderRadius?: number, opacity?: number, rotation?: number, background?: string, output?: ImageFormat, token?: string };\n        } else {\n            params = {\n                bucketId: paramsOrFirst as string,\n                fileId: rest[0] as string,\n                width: rest[1] as number,\n                height: rest[2] as number,\n                gravity: rest[3] as ImageGravity,\n                quality: rest[4] as number,\n                borderWidth: rest[5] as number,\n                borderColor: rest[6] as string,\n                borderRadius: rest[7] as number,\n                opacity: rest[8] as number,\n                rotation: rest[9] as number,\n                background: rest[10] as string,\n                output: rest[11] as ImageFormat,\n                token: rest[12] as string            \n            };\n        }\n        \n        const bucketId = params.bucketId;\n        const fileId = params.fileId;\n        const width = params.width;\n        const height = params.height;\n        const gravity = params.gravity;\n        const quality = params.quality;\n        const borderWidth = params.borderWidth;\n        const borderColor = params.borderColor;\n        const borderRadius = params.borderRadius;\n        const opacity = params.opacity;\n        const rotation = params.rotation;\n        const background = params.background;\n        const output = params.output;\n        const token = params.token;\n\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/preview'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n        if (typeof gravity !== 'undefined') {\n            payload['gravity'] = gravity;\n        }\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n        if (typeof borderWidth !== 'undefined') {\n            payload['borderWidth'] = borderWidth;\n        }\n        if (typeof borderColor !== 'undefined') {\n            payload['borderColor'] = borderColor;\n        }\n        if (typeof borderRadius !== 'undefined') {\n            payload['borderRadius'] = borderRadius;\n        }\n        if (typeof opacity !== 'undefined') {\n            payload['opacity'] = opacity;\n        }\n        if (typeof rotation !== 'undefined') {\n            payload['rotation'] = rotation;\n        }\n        if (typeof background !== 'undefined') {\n            payload['background'] = background;\n        }\n        if (typeof output !== 'undefined') {\n            payload['output'] = output;\n        }\n        if (typeof token !== 'undefined') {\n            payload['token'] = token;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n\n    /**\n     * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  'Content-Disposition: attachment' header.\n     *\n     * @param {string} params.bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} params.fileId - File ID.\n     * @param {string} params.token - File token for accessing this file.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    getFileView(params: { bucketId: string, fileId: string, token?: string  }): Promise<ArrayBuffer>;\n    /**\n     * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  'Content-Disposition: attachment' header.\n     *\n     * @param {string} bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} fileId - File ID.\n     * @param {string} token - File token for accessing this file.\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getFileView(bucketId: string, fileId: string, token?: string): Promise<ArrayBuffer>;\n    getFileView(\n        paramsOrFirst: { bucketId: string, fileId: string, token?: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<ArrayBuffer> {\n        let params: { bucketId: string, fileId: string, token?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { bucketId: string, fileId: string, token?: string };\n        } else {\n            params = {\n                bucketId: paramsOrFirst as string,\n                fileId: rest[0] as string,\n                token: rest[1] as string            \n            };\n        }\n        \n        const bucketId = params.bucketId;\n        const fileId = params.fileId;\n        const token = params.token;\n\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/view'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n        if (typeof token !== 'undefined') {\n            payload['token'] = token;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n}\n", "import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\nimport { RelationshipType } from '../enums/relationship-type';\nimport { RelationMutate } from '../enums/relation-mutate';\nimport { IndexType } from '../enums/index-type';\n\nexport class TablesDB {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Get a list of all databases from the current Appwrite project. You can use the search parameter to filter your results.\n     *\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following columns: name\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DatabaseList>}\n     */\n    list(params?: { queries?: string[], search?: string  }): Promise<Models.DatabaseList>;\n    /**\n     * Get a list of all databases from the current Appwrite project. You can use the search parameter to filter your results.\n     *\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following columns: name\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DatabaseList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    list(queries?: string[], search?: string): Promise<Models.DatabaseList>;\n    list(\n        paramsOrFirst?: { queries?: string[], search?: string } | string[],\n        ...rest: [(string)?]    \n    ): Promise<Models.DatabaseList> {\n        let params: { queries?: string[], search?: string };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { queries?: string[], search?: string };\n        } else {\n            params = {\n                queries: paramsOrFirst as string[],\n                search: rest[0] as string            \n            };\n        }\n        \n        const queries = params.queries;\n        const search = params.search;\n\n\n        const apiPath = '/tablesdb';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Database.\n     * \n     *\n     * @param {string} params.databaseId - Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Database name. Max length: 128 chars.\n     * @param {boolean} params.enabled - Is the database enabled? When set to 'disabled', users cannot access the database but Server SDKs with an API key can still read and write to the database. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     */\n    create(params: { databaseId: string, name: string, enabled?: boolean  }): Promise<Models.Database>;\n    /**\n     * Create a new Database.\n     * \n     *\n     * @param {string} databaseId - Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Database name. Max length: 128 chars.\n     * @param {boolean} enabled - Is the database enabled? When set to 'disabled', users cannot access the database but Server SDKs with an API key can still read and write to the database. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    create(databaseId: string, name: string, enabled?: boolean): Promise<Models.Database>;\n    create(\n        paramsOrFirst: { databaseId: string, name: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (boolean)?]    \n    ): Promise<Models.Database> {\n        let params: { databaseId: string, name: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, name: string, enabled?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                name: rest[0] as string,\n                enabled: rest[1] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const name = params.name;\n        const enabled = params.enabled;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/tablesdb';\n        const payload: Payload = {};\n        if (typeof databaseId !== 'undefined') {\n            payload['databaseId'] = databaseId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a database by its unique ID. This endpoint response returns a JSON object with the database metadata.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     */\n    get(params: { databaseId: string  }): Promise<Models.Database>;\n    /**\n     * Get a database by its unique ID. This endpoint response returns a JSON object with the database metadata.\n     *\n     * @param {string} databaseId - Database ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    get(databaseId: string): Promise<Models.Database>;\n    get(\n        paramsOrFirst: { databaseId: string } | string    \n    ): Promise<Models.Database> {\n        let params: { databaseId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a database by its unique ID.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.name - Database name. Max length: 128 chars.\n     * @param {boolean} params.enabled - Is database enabled? When set to 'disabled', users cannot access the database but Server SDKs with an API key can still read and write to the database. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     */\n    update(params: { databaseId: string, name: string, enabled?: boolean  }): Promise<Models.Database>;\n    /**\n     * Update a database by its unique ID.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} name - Database name. Max length: 128 chars.\n     * @param {boolean} enabled - Is database enabled? When set to 'disabled', users cannot access the database but Server SDKs with an API key can still read and write to the database. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    update(databaseId: string, name: string, enabled?: boolean): Promise<Models.Database>;\n    update(\n        paramsOrFirst: { databaseId: string, name: string, enabled?: boolean } | string,\n        ...rest: [(string)?, (boolean)?]    \n    ): Promise<Models.Database> {\n        let params: { databaseId: string, name: string, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, name: string, enabled?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                name: rest[0] as string,\n                enabled: rest[1] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const name = params.name;\n        const enabled = params.enabled;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a database by its unique ID. Only API keys with with databases.write scope can delete a database.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    delete(params: { databaseId: string  }): Promise<{}>;\n    /**\n     * Delete a database by its unique ID. Only API keys with with databases.write scope can delete a database.\n     *\n     * @param {string} databaseId - Database ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    delete(databaseId: string): Promise<{}>;\n    delete(\n        paramsOrFirst: { databaseId: string } | string    \n    ): Promise<{}> {\n        let params: { databaseId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all tables that belong to the provided databaseId. You can use the search parameter to filter your results.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following columns: name, enabled, rowSecurity\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.TableList>}\n     */\n    listTables(params: { databaseId: string, queries?: string[], search?: string  }): Promise<Models.TableList>;\n    /**\n     * Get a list of all tables that belong to the provided databaseId. You can use the search parameter to filter your results.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following columns: name, enabled, rowSecurity\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.TableList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listTables(databaseId: string, queries?: string[], search?: string): Promise<Models.TableList>;\n    listTables(\n        paramsOrFirst: { databaseId: string, queries?: string[], search?: string } | string,\n        ...rest: [(string[])?, (string)?]    \n    ): Promise<Models.TableList> {\n        let params: { databaseId: string, queries?: string[], search?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, queries?: string[], search?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                queries: rest[0] as string[],\n                search: rest[1] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const queries = params.queries;\n        const search = params.search;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Table. Before using this route, you should create a new database resource using either a [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreateTable) API or directly from your database console.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Table name. Max length: 128 chars.\n     * @param {string[]} params.permissions - An array of permissions strings. By default, no user is granted with any permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} params.rowSecurity - Enables configuring permissions for individual rows. A user needs one of row or table level permissions to access a row. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} params.enabled - Is table enabled? When set to 'disabled', users cannot access the table but Server SDKs with and API key can still read and write to the table. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Table>}\n     */\n    createTable(params: { databaseId: string, tableId: string, name: string, permissions?: string[], rowSecurity?: boolean, enabled?: boolean  }): Promise<Models.Table>;\n    /**\n     * Create a new Table. Before using this route, you should create a new database resource using either a [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreateTable) API or directly from your database console.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Table name. Max length: 128 chars.\n     * @param {string[]} permissions - An array of permissions strings. By default, no user is granted with any permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} rowSecurity - Enables configuring permissions for individual rows. A user needs one of row or table level permissions to access a row. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} enabled - Is table enabled? When set to 'disabled', users cannot access the table but Server SDKs with and API key can still read and write to the table. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Table>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createTable(databaseId: string, tableId: string, name: string, permissions?: string[], rowSecurity?: boolean, enabled?: boolean): Promise<Models.Table>;\n    createTable(\n        paramsOrFirst: { databaseId: string, tableId: string, name: string, permissions?: string[], rowSecurity?: boolean, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string[])?, (boolean)?, (boolean)?]    \n    ): Promise<Models.Table> {\n        let params: { databaseId: string, tableId: string, name: string, permissions?: string[], rowSecurity?: boolean, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, name: string, permissions?: string[], rowSecurity?: boolean, enabled?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                name: rest[1] as string,\n                permissions: rest[2] as string[],\n                rowSecurity: rest[3] as boolean,\n                enabled: rest[4] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const name = params.name;\n        const permissions = params.permissions;\n        const rowSecurity = params.rowSecurity;\n        const enabled = params.enabled;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        if (typeof tableId !== 'undefined') {\n            payload['tableId'] = tableId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        if (typeof rowSecurity !== 'undefined') {\n            payload['rowSecurity'] = rowSecurity;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a table by its unique ID. This endpoint response returns a JSON object with the table metadata.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Table>}\n     */\n    getTable(params: { databaseId: string, tableId: string  }): Promise<Models.Table>;\n    /**\n     * Get a table by its unique ID. This endpoint response returns a JSON object with the table metadata.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Table>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getTable(databaseId: string, tableId: string): Promise<Models.Table>;\n    getTable(\n        paramsOrFirst: { databaseId: string, tableId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Table> {\n        let params: { databaseId: string, tableId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a table by its unique ID.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.name - Table name. Max length: 128 chars.\n     * @param {string[]} params.permissions - An array of permission strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} params.rowSecurity - Enables configuring permissions for individual rows. A user needs one of row or table level permissions to access a document. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} params.enabled - Is table enabled? When set to 'disabled', users cannot access the table but Server SDKs with and API key can still read and write to the table. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Table>}\n     */\n    updateTable(params: { databaseId: string, tableId: string, name: string, permissions?: string[], rowSecurity?: boolean, enabled?: boolean  }): Promise<Models.Table>;\n    /**\n     * Update a table by its unique ID.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} name - Table name. Max length: 128 chars.\n     * @param {string[]} permissions - An array of permission strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} rowSecurity - Enables configuring permissions for individual rows. A user needs one of row or table level permissions to access a document. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @param {boolean} enabled - Is table enabled? When set to 'disabled', users cannot access the table but Server SDKs with and API key can still read and write to the table. No data is lost when this is toggled.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Table>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateTable(databaseId: string, tableId: string, name: string, permissions?: string[], rowSecurity?: boolean, enabled?: boolean): Promise<Models.Table>;\n    updateTable(\n        paramsOrFirst: { databaseId: string, tableId: string, name: string, permissions?: string[], rowSecurity?: boolean, enabled?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string[])?, (boolean)?, (boolean)?]    \n    ): Promise<Models.Table> {\n        let params: { databaseId: string, tableId: string, name: string, permissions?: string[], rowSecurity?: boolean, enabled?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, name: string, permissions?: string[], rowSecurity?: boolean, enabled?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                name: rest[1] as string,\n                permissions: rest[2] as string[],\n                rowSecurity: rest[3] as boolean,\n                enabled: rest[4] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const name = params.name;\n        const permissions = params.permissions;\n        const rowSecurity = params.rowSecurity;\n        const enabled = params.enabled;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        if (typeof rowSecurity !== 'undefined') {\n            payload['rowSecurity'] = rowSecurity;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a table by its unique ID. Only users with write permissions have access to delete this resource.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteTable(params: { databaseId: string, tableId: string  }): Promise<{}>;\n    /**\n     * Delete a table by its unique ID. Only users with write permissions have access to delete this resource.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteTable(databaseId: string, tableId: string): Promise<{}>;\n    deleteTable(\n        paramsOrFirst: { databaseId: string, tableId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<{}> {\n        let params: { databaseId: string, tableId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List columns in the table.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following columns: key, type, size, required, array, status, error\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnList>}\n     */\n    listColumns(params: { databaseId: string, tableId: string, queries?: string[]  }): Promise<Models.ColumnList>;\n    /**\n     * List columns in the table.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following columns: key, type, size, required, array, status, error\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listColumns(databaseId: string, tableId: string, queries?: string[]): Promise<Models.ColumnList>;\n    listColumns(\n        paramsOrFirst: { databaseId: string, tableId: string, queries?: string[] } | string,\n        ...rest: [(string)?, (string[])?]    \n    ): Promise<Models.ColumnList> {\n        let params: { databaseId: string, tableId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, queries?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                queries: rest[1] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const queries = params.queries;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a boolean column.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {boolean} params.xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {boolean} params.array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnBoolean>}\n     */\n    createBooleanColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: boolean, array?: boolean  }): Promise<Models.ColumnBoolean>;\n    /**\n     * Create a boolean column.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {boolean} xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {boolean} array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnBoolean>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createBooleanColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: boolean, array?: boolean): Promise<Models.ColumnBoolean>;\n    createBooleanColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: boolean, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (boolean)?, (boolean)?]    \n    ): Promise<Models.ColumnBoolean> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: boolean, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: boolean, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as boolean,\n                array: rest[4] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/boolean'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a boolean column. Changing the `default` value will not update already existing rows.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {boolean} params.xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {string} params.newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnBoolean>}\n     */\n    updateBooleanColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: boolean, newKey?: string  }): Promise<Models.ColumnBoolean>;\n    /**\n     * Update a boolean column. Changing the `default` value will not update already existing rows.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {boolean} xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {string} newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnBoolean>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateBooleanColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: boolean, newKey?: string): Promise<Models.ColumnBoolean>;\n    updateBooleanColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: boolean, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (boolean)?, (string)?]    \n    ): Promise<Models.ColumnBoolean> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: boolean, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: boolean, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as boolean,\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/boolean/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a date time column according to the ISO 8601 standard.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {string} params.xdefault - Default value for the column in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Cannot be set when column is required.\n     * @param {boolean} params.array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnDatetime>}\n     */\n    createDatetimeColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean  }): Promise<Models.ColumnDatetime>;\n    /**\n     * Create a date time column according to the ISO 8601 standard.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {string} xdefault - Default value for the column in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Cannot be set when column is required.\n     * @param {boolean} array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnDatetime>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createDatetimeColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean): Promise<Models.ColumnDatetime>;\n    createDatetimeColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (boolean)?]    \n    ): Promise<Models.ColumnDatetime> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                array: rest[4] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/datetime'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a date time column. Changing the `default` value will not update already existing rows.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {string} params.xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {string} params.newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnDatetime>}\n     */\n    updateDatetimeColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string  }): Promise<Models.ColumnDatetime>;\n    /**\n     * Update a date time column. Changing the `default` value will not update already existing rows.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {string} xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {string} newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnDatetime>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateDatetimeColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string): Promise<Models.ColumnDatetime>;\n    updateDatetimeColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (string)?]    \n    ): Promise<Models.ColumnDatetime> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/datetime/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create an email column.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {string} params.xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {boolean} params.array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnEmail>}\n     */\n    createEmailColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean  }): Promise<Models.ColumnEmail>;\n    /**\n     * Create an email column.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {string} xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {boolean} array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnEmail>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createEmailColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean): Promise<Models.ColumnEmail>;\n    createEmailColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (boolean)?]    \n    ): Promise<Models.ColumnEmail> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                array: rest[4] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/email'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update an email column. Changing the `default` value will not update already existing rows.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {string} params.xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {string} params.newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnEmail>}\n     */\n    updateEmailColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string  }): Promise<Models.ColumnEmail>;\n    /**\n     * Update an email column. Changing the `default` value will not update already existing rows.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {string} xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {string} newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnEmail>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateEmailColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string): Promise<Models.ColumnEmail>;\n    updateEmailColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (string)?]    \n    ): Promise<Models.ColumnEmail> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/email/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create an enumeration column. The `elements` param acts as a white-list of accepted values for this column.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {string[]} params.elements - Array of enum values.\n     * @param {boolean} params.required - Is column required?\n     * @param {string} params.xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {boolean} params.array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnEnum>}\n     */\n    createEnumColumn(params: { databaseId: string, tableId: string, key: string, elements: string[], required: boolean, xdefault?: string, array?: boolean  }): Promise<Models.ColumnEnum>;\n    /**\n     * Create an enumeration column. The `elements` param acts as a white-list of accepted values for this column.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {string[]} elements - Array of enum values.\n     * @param {boolean} required - Is column required?\n     * @param {string} xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {boolean} array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnEnum>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createEnumColumn(databaseId: string, tableId: string, key: string, elements: string[], required: boolean, xdefault?: string, array?: boolean): Promise<Models.ColumnEnum>;\n    createEnumColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, elements: string[], required: boolean, xdefault?: string, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (string[])?, (boolean)?, (string)?, (boolean)?]    \n    ): Promise<Models.ColumnEnum> {\n        let params: { databaseId: string, tableId: string, key: string, elements: string[], required: boolean, xdefault?: string, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, elements: string[], required: boolean, xdefault?: string, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                elements: rest[2] as string[],\n                required: rest[3] as boolean,\n                xdefault: rest[4] as string,\n                array: rest[5] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const elements = params.elements;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof elements === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"elements\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/enum'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof elements !== 'undefined') {\n            payload['elements'] = elements;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update an enum column. Changing the `default` value will not update already existing rows.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {string[]} params.elements - Updated list of enum values.\n     * @param {boolean} params.required - Is column required?\n     * @param {string} params.xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {string} params.newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnEnum>}\n     */\n    updateEnumColumn(params: { databaseId: string, tableId: string, key: string, elements: string[], required: boolean, xdefault?: string, newKey?: string  }): Promise<Models.ColumnEnum>;\n    /**\n     * Update an enum column. Changing the `default` value will not update already existing rows.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {string[]} elements - Updated list of enum values.\n     * @param {boolean} required - Is column required?\n     * @param {string} xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {string} newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnEnum>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateEnumColumn(databaseId: string, tableId: string, key: string, elements: string[], required: boolean, xdefault?: string, newKey?: string): Promise<Models.ColumnEnum>;\n    updateEnumColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, elements: string[], required: boolean, xdefault?: string, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (string[])?, (boolean)?, (string)?, (string)?]    \n    ): Promise<Models.ColumnEnum> {\n        let params: { databaseId: string, tableId: string, key: string, elements: string[], required: boolean, xdefault?: string, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, elements: string[], required: boolean, xdefault?: string, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                elements: rest[2] as string[],\n                required: rest[3] as boolean,\n                xdefault: rest[4] as string,\n                newKey: rest[5] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const elements = params.elements;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof elements === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"elements\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/enum/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof elements !== 'undefined') {\n            payload['elements'] = elements;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a float column. Optionally, minimum and maximum values can be provided.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {number} params.min - Minimum value\n     * @param {number} params.max - Maximum value\n     * @param {number} params.xdefault - Default value. Cannot be set when required.\n     * @param {boolean} params.array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnFloat>}\n     */\n    createFloatColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean  }): Promise<Models.ColumnFloat>;\n    /**\n     * Create a float column. Optionally, minimum and maximum values can be provided.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {number} min - Minimum value\n     * @param {number} max - Maximum value\n     * @param {number} xdefault - Default value. Cannot be set when required.\n     * @param {boolean} array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnFloat>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createFloatColumn(databaseId: string, tableId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean): Promise<Models.ColumnFloat>;\n    createFloatColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (number)?, (number)?, (number)?, (boolean)?]    \n    ): Promise<Models.ColumnFloat> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                min: rest[3] as number,\n                max: rest[4] as number,\n                xdefault: rest[5] as number,\n                array: rest[6] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const min = params.min;\n        const max = params.max;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/float'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a float column. Changing the `default` value will not update already existing rows.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {number} params.xdefault - Default value. Cannot be set when required.\n     * @param {number} params.min - Minimum value\n     * @param {number} params.max - Maximum value\n     * @param {string} params.newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnFloat>}\n     */\n    updateFloatColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string  }): Promise<Models.ColumnFloat>;\n    /**\n     * Update a float column. Changing the `default` value will not update already existing rows.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {number} xdefault - Default value. Cannot be set when required.\n     * @param {number} min - Minimum value\n     * @param {number} max - Maximum value\n     * @param {string} newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnFloat>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateFloatColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string): Promise<Models.ColumnFloat>;\n    updateFloatColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (number)?, (number)?, (number)?, (string)?]    \n    ): Promise<Models.ColumnFloat> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as number,\n                min: rest[4] as number,\n                max: rest[5] as number,\n                newKey: rest[6] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const min = params.min;\n        const max = params.max;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/float/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create an integer column. Optionally, minimum and maximum values can be provided.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {number} params.min - Minimum value\n     * @param {number} params.max - Maximum value\n     * @param {number} params.xdefault - Default value. Cannot be set when column is required.\n     * @param {boolean} params.array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnInteger>}\n     */\n    createIntegerColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean  }): Promise<Models.ColumnInteger>;\n    /**\n     * Create an integer column. Optionally, minimum and maximum values can be provided.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {number} min - Minimum value\n     * @param {number} max - Maximum value\n     * @param {number} xdefault - Default value. Cannot be set when column is required.\n     * @param {boolean} array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnInteger>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createIntegerColumn(databaseId: string, tableId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean): Promise<Models.ColumnInteger>;\n    createIntegerColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (number)?, (number)?, (number)?, (boolean)?]    \n    ): Promise<Models.ColumnInteger> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                min: rest[3] as number,\n                max: rest[4] as number,\n                xdefault: rest[5] as number,\n                array: rest[6] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const min = params.min;\n        const max = params.max;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/integer'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update an integer column. Changing the `default` value will not update already existing rows.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {number} params.xdefault - Default value. Cannot be set when column is required.\n     * @param {number} params.min - Minimum value\n     * @param {number} params.max - Maximum value\n     * @param {string} params.newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnInteger>}\n     */\n    updateIntegerColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string  }): Promise<Models.ColumnInteger>;\n    /**\n     * Update an integer column. Changing the `default` value will not update already existing rows.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {number} xdefault - Default value. Cannot be set when column is required.\n     * @param {number} min - Minimum value\n     * @param {number} max - Maximum value\n     * @param {string} newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnInteger>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateIntegerColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string): Promise<Models.ColumnInteger>;\n    updateIntegerColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (number)?, (number)?, (number)?, (string)?]    \n    ): Promise<Models.ColumnInteger> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: number, min?: number, max?: number, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as number,\n                min: rest[4] as number,\n                max: rest[5] as number,\n                newKey: rest[6] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const min = params.min;\n        const max = params.max;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/integer/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create IP address column.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {string} params.xdefault - Default value. Cannot be set when column is required.\n     * @param {boolean} params.array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnIp>}\n     */\n    createIpColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean  }): Promise<Models.ColumnIp>;\n    /**\n     * Create IP address column.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {string} xdefault - Default value. Cannot be set when column is required.\n     * @param {boolean} array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnIp>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createIpColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean): Promise<Models.ColumnIp>;\n    createIpColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (boolean)?]    \n    ): Promise<Models.ColumnIp> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                array: rest[4] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/ip'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update an ip column. Changing the `default` value will not update already existing rows.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {string} params.xdefault - Default value. Cannot be set when column is required.\n     * @param {string} params.newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnIp>}\n     */\n    updateIpColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string  }): Promise<Models.ColumnIp>;\n    /**\n     * Update an ip column. Changing the `default` value will not update already existing rows.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {string} xdefault - Default value. Cannot be set when column is required.\n     * @param {string} newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnIp>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateIpColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string): Promise<Models.ColumnIp>;\n    updateIpColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (string)?]    \n    ): Promise<Models.ColumnIp> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/ip/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a geometric line column.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the TablesDB service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {any[]} params.xdefault - Default value for column when not provided, two-dimensional array of coordinate pairs, [[longitude, latitude], [longitude, latitude], …], listing the vertices of the line in order. Cannot be set when column is required.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnLine>}\n     */\n    createLineColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[]  }): Promise<Models.ColumnLine>;\n    /**\n     * Create a geometric line column.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the TablesDB service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {any[]} xdefault - Default value for column when not provided, two-dimensional array of coordinate pairs, [[longitude, latitude], [longitude, latitude], …], listing the vertices of the line in order. Cannot be set when column is required.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnLine>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createLineColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[]): Promise<Models.ColumnLine>;\n    createLineColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[] } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (any[])?]    \n    ): Promise<Models.ColumnLine> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as any[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/line'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a line column. Changing the `default` value will not update already existing rows.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the TablesDB service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {any[]} params.xdefault - Default value for column when not provided, two-dimensional array of coordinate pairs, [[longitude, latitude], [longitude, latitude], …], listing the vertices of the line in order. Cannot be set when column is required.\n     * @param {string} params.newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnLine>}\n     */\n    updateLineColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string  }): Promise<Models.ColumnLine>;\n    /**\n     * Update a line column. Changing the `default` value will not update already existing rows.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the TablesDB service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {any[]} xdefault - Default value for column when not provided, two-dimensional array of coordinate pairs, [[longitude, latitude], [longitude, latitude], …], listing the vertices of the line in order. Cannot be set when column is required.\n     * @param {string} newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnLine>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateLineColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string): Promise<Models.ColumnLine>;\n    updateLineColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (any[])?, (string)?]    \n    ): Promise<Models.ColumnLine> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as any[],\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/line/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a geometric point column.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the TablesDB service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {any[]} params.xdefault - Default value for column when not provided, array of two numbers [longitude, latitude], representing a single coordinate. Cannot be set when column is required.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnPoint>}\n     */\n    createPointColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[]  }): Promise<Models.ColumnPoint>;\n    /**\n     * Create a geometric point column.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the TablesDB service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {any[]} xdefault - Default value for column when not provided, array of two numbers [longitude, latitude], representing a single coordinate. Cannot be set when column is required.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnPoint>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createPointColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[]): Promise<Models.ColumnPoint>;\n    createPointColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[] } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (any[])?]    \n    ): Promise<Models.ColumnPoint> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as any[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/point'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a point column. Changing the `default` value will not update already existing rows.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the TablesDB service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {any[]} params.xdefault - Default value for column when not provided, array of two numbers [longitude, latitude], representing a single coordinate. Cannot be set when column is required.\n     * @param {string} params.newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnPoint>}\n     */\n    updatePointColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string  }): Promise<Models.ColumnPoint>;\n    /**\n     * Update a point column. Changing the `default` value will not update already existing rows.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the TablesDB service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {any[]} xdefault - Default value for column when not provided, array of two numbers [longitude, latitude], representing a single coordinate. Cannot be set when column is required.\n     * @param {string} newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnPoint>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePointColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string): Promise<Models.ColumnPoint>;\n    updatePointColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (any[])?, (string)?]    \n    ): Promise<Models.ColumnPoint> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as any[],\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/point/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a geometric polygon column.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the TablesDB service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {any[]} params.xdefault - Default value for column when not provided, three-dimensional array where the outer array holds one or more linear rings, [[[longitude, latitude], …], …], the first ring is the exterior boundary, any additional rings are interior holes, and each ring must start and end with the same coordinate pair. Cannot be set when column is required.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnPolygon>}\n     */\n    createPolygonColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[]  }): Promise<Models.ColumnPolygon>;\n    /**\n     * Create a geometric polygon column.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the TablesDB service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {any[]} xdefault - Default value for column when not provided, three-dimensional array where the outer array holds one or more linear rings, [[[longitude, latitude], …], …], the first ring is the exterior boundary, any additional rings are interior holes, and each ring must start and end with the same coordinate pair. Cannot be set when column is required.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnPolygon>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createPolygonColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[]): Promise<Models.ColumnPolygon>;\n    createPolygonColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[] } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (any[])?]    \n    ): Promise<Models.ColumnPolygon> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as any[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/polygon'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a polygon column. Changing the `default` value will not update already existing rows.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the TablesDB service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {any[]} params.xdefault - Default value for column when not provided, three-dimensional array where the outer array holds one or more linear rings, [[[longitude, latitude], …], …], the first ring is the exterior boundary, any additional rings are interior holes, and each ring must start and end with the same coordinate pair. Cannot be set when column is required.\n     * @param {string} params.newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnPolygon>}\n     */\n    updatePolygonColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string  }): Promise<Models.ColumnPolygon>;\n    /**\n     * Update a polygon column. Changing the `default` value will not update already existing rows.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the TablesDB service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {any[]} xdefault - Default value for column when not provided, three-dimensional array where the outer array holds one or more linear rings, [[[longitude, latitude], …], …], the first ring is the exterior boundary, any additional rings are interior holes, and each ring must start and end with the same coordinate pair. Cannot be set when column is required.\n     * @param {string} newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnPolygon>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePolygonColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string): Promise<Models.ColumnPolygon>;\n    updatePolygonColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (any[])?, (string)?]    \n    ): Promise<Models.ColumnPolygon> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: any[], newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as any[],\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/polygon/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create relationship column. [Learn more about relationship columns](https://appwrite.io/docs/databases-relationships#relationship-columns).\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.relatedTableId - Related Table ID.\n     * @param {RelationshipType} params.type - Relation type\n     * @param {boolean} params.twoWay - Is Two Way?\n     * @param {string} params.key - Column Key.\n     * @param {string} params.twoWayKey - Two Way Column Key.\n     * @param {RelationMutate} params.onDelete - Constraints option\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnRelationship>}\n     */\n    createRelationshipColumn(params: { databaseId: string, tableId: string, relatedTableId: string, type: RelationshipType, twoWay?: boolean, key?: string, twoWayKey?: string, onDelete?: RelationMutate  }): Promise<Models.ColumnRelationship>;\n    /**\n     * Create relationship column. [Learn more about relationship columns](https://appwrite.io/docs/databases-relationships#relationship-columns).\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} relatedTableId - Related Table ID.\n     * @param {RelationshipType} type - Relation type\n     * @param {boolean} twoWay - Is Two Way?\n     * @param {string} key - Column Key.\n     * @param {string} twoWayKey - Two Way Column Key.\n     * @param {RelationMutate} onDelete - Constraints option\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnRelationship>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createRelationshipColumn(databaseId: string, tableId: string, relatedTableId: string, type: RelationshipType, twoWay?: boolean, key?: string, twoWayKey?: string, onDelete?: RelationMutate): Promise<Models.ColumnRelationship>;\n    createRelationshipColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, relatedTableId: string, type: RelationshipType, twoWay?: boolean, key?: string, twoWayKey?: string, onDelete?: RelationMutate } | string,\n        ...rest: [(string)?, (string)?, (RelationshipType)?, (boolean)?, (string)?, (string)?, (RelationMutate)?]    \n    ): Promise<Models.ColumnRelationship> {\n        let params: { databaseId: string, tableId: string, relatedTableId: string, type: RelationshipType, twoWay?: boolean, key?: string, twoWayKey?: string, onDelete?: RelationMutate };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, relatedTableId: string, type: RelationshipType, twoWay?: boolean, key?: string, twoWayKey?: string, onDelete?: RelationMutate };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                relatedTableId: rest[1] as string,\n                type: rest[2] as RelationshipType,\n                twoWay: rest[3] as boolean,\n                key: rest[4] as string,\n                twoWayKey: rest[5] as string,\n                onDelete: rest[6] as RelationMutate            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const relatedTableId = params.relatedTableId;\n        const type = params.type;\n        const twoWay = params.twoWay;\n        const key = params.key;\n        const twoWayKey = params.twoWayKey;\n        const onDelete = params.onDelete;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof relatedTableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"relatedTableId\"');\n        }\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/relationship'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof relatedTableId !== 'undefined') {\n            payload['relatedTableId'] = relatedTableId;\n        }\n        if (typeof type !== 'undefined') {\n            payload['type'] = type;\n        }\n        if (typeof twoWay !== 'undefined') {\n            payload['twoWay'] = twoWay;\n        }\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof twoWayKey !== 'undefined') {\n            payload['twoWayKey'] = twoWayKey;\n        }\n        if (typeof onDelete !== 'undefined') {\n            payload['onDelete'] = onDelete;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a string column.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.key - Column Key.\n     * @param {number} params.size - Column size for text columns, in number of characters.\n     * @param {boolean} params.required - Is column required?\n     * @param {string} params.xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {boolean} params.array - Is column an array?\n     * @param {boolean} params.encrypt - Toggle encryption for the column. Encryption enhances security by not storing any plain text values in the database. However, encrypted columns cannot be queried.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnString>}\n     */\n    createStringColumn(params: { databaseId: string, tableId: string, key: string, size: number, required: boolean, xdefault?: string, array?: boolean, encrypt?: boolean  }): Promise<Models.ColumnString>;\n    /**\n     * Create a string column.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} key - Column Key.\n     * @param {number} size - Column size for text columns, in number of characters.\n     * @param {boolean} required - Is column required?\n     * @param {string} xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {boolean} array - Is column an array?\n     * @param {boolean} encrypt - Toggle encryption for the column. Encryption enhances security by not storing any plain text values in the database. However, encrypted columns cannot be queried.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnString>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createStringColumn(databaseId: string, tableId: string, key: string, size: number, required: boolean, xdefault?: string, array?: boolean, encrypt?: boolean): Promise<Models.ColumnString>;\n    createStringColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, size: number, required: boolean, xdefault?: string, array?: boolean, encrypt?: boolean } | string,\n        ...rest: [(string)?, (string)?, (number)?, (boolean)?, (string)?, (boolean)?, (boolean)?]    \n    ): Promise<Models.ColumnString> {\n        let params: { databaseId: string, tableId: string, key: string, size: number, required: boolean, xdefault?: string, array?: boolean, encrypt?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, size: number, required: boolean, xdefault?: string, array?: boolean, encrypt?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                size: rest[2] as number,\n                required: rest[3] as boolean,\n                xdefault: rest[4] as string,\n                array: rest[5] as boolean,\n                encrypt: rest[6] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const size = params.size;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const array = params.array;\n        const encrypt = params.encrypt;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof size === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"size\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/string'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof size !== 'undefined') {\n            payload['size'] = size;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        if (typeof encrypt !== 'undefined') {\n            payload['encrypt'] = encrypt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a string column. Changing the `default` value will not update already existing rows.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {string} params.xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {number} params.size - Maximum size of the string column.\n     * @param {string} params.newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnString>}\n     */\n    updateStringColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, size?: number, newKey?: string  }): Promise<Models.ColumnString>;\n    /**\n     * Update a string column. Changing the `default` value will not update already existing rows.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {string} xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {number} size - Maximum size of the string column.\n     * @param {string} newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnString>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateStringColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, size?: number, newKey?: string): Promise<Models.ColumnString>;\n    updateStringColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, size?: number, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (number)?, (string)?]    \n    ): Promise<Models.ColumnString> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, size?: number, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, size?: number, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                size: rest[4] as number,\n                newKey: rest[5] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const size = params.size;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/string/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof size !== 'undefined') {\n            payload['size'] = size;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a URL column.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {string} params.xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {boolean} params.array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnUrl>}\n     */\n    createUrlColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean  }): Promise<Models.ColumnUrl>;\n    /**\n     * Create a URL column.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {string} xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {boolean} array - Is column an array?\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnUrl>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createUrlColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean): Promise<Models.ColumnUrl>;\n    createUrlColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (boolean)?]    \n    ): Promise<Models.ColumnUrl> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, array?: boolean };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                array: rest[4] as boolean            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const array = params.array;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/url'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update an url column. Changing the `default` value will not update already existing rows.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {boolean} params.required - Is column required?\n     * @param {string} params.xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {string} params.newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnUrl>}\n     */\n    updateUrlColumn(params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string  }): Promise<Models.ColumnUrl>;\n    /**\n     * Update an url column. Changing the `default` value will not update already existing rows.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {boolean} required - Is column required?\n     * @param {string} xdefault - Default value for column when not provided. Cannot be set when column is required.\n     * @param {string} newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnUrl>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateUrlColumn(databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string): Promise<Models.ColumnUrl>;\n    updateUrlColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (boolean)?, (string)?, (string)?]    \n    ): Promise<Models.ColumnUrl> {\n        let params: { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, required: boolean, xdefault?: string, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                required: rest[2] as boolean,\n                xdefault: rest[3] as string,\n                newKey: rest[4] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const required = params.required;\n        const xdefault = params.xdefault;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/url/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get column by ID.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    getColumn(params: { databaseId: string, tableId: string, key: string  }): Promise<{}>;\n    /**\n     * Get column by ID.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getColumn(databaseId: string, tableId: string, key: string): Promise<{}>;\n    getColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<{}> {\n        let params: { databaseId: string, tableId: string, key: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Deletes a column.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteColumn(params: { databaseId: string, tableId: string, key: string  }): Promise<{}>;\n    /**\n     * Deletes a column.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteColumn(databaseId: string, tableId: string, key: string): Promise<{}>;\n    deleteColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<{}> {\n        let params: { databaseId: string, tableId: string, key: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update relationship column. [Learn more about relationship columns](https://appwrite.io/docs/databases-relationships#relationship-columns).\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.key - Column Key.\n     * @param {RelationMutate} params.onDelete - Constraints option\n     * @param {string} params.newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnRelationship>}\n     */\n    updateRelationshipColumn(params: { databaseId: string, tableId: string, key: string, onDelete?: RelationMutate, newKey?: string  }): Promise<Models.ColumnRelationship>;\n    /**\n     * Update relationship column. [Learn more about relationship columns](https://appwrite.io/docs/databases-relationships#relationship-columns).\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} key - Column Key.\n     * @param {RelationMutate} onDelete - Constraints option\n     * @param {string} newKey - New Column Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnRelationship>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateRelationshipColumn(databaseId: string, tableId: string, key: string, onDelete?: RelationMutate, newKey?: string): Promise<Models.ColumnRelationship>;\n    updateRelationshipColumn(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, onDelete?: RelationMutate, newKey?: string } | string,\n        ...rest: [(string)?, (string)?, (RelationMutate)?, (string)?]    \n    ): Promise<Models.ColumnRelationship> {\n        let params: { databaseId: string, tableId: string, key: string, onDelete?: RelationMutate, newKey?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, onDelete?: RelationMutate, newKey?: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                onDelete: rest[2] as RelationMutate,\n                newKey: rest[3] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const onDelete = params.onDelete;\n        const newKey = params.newKey;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/columns/{key}/relationship'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof onDelete !== 'undefined') {\n            payload['onDelete'] = onDelete;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List indexes on the table.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following columns: key, type, status, attributes, error\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnIndexList>}\n     */\n    listIndexes(params: { databaseId: string, tableId: string, queries?: string[]  }): Promise<Models.ColumnIndexList>;\n    /**\n     * List indexes on the table.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following columns: key, type, status, attributes, error\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnIndexList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listIndexes(databaseId: string, tableId: string, queries?: string[]): Promise<Models.ColumnIndexList>;\n    listIndexes(\n        paramsOrFirst: { databaseId: string, tableId: string, queries?: string[] } | string,\n        ...rest: [(string)?, (string[])?]    \n    ): Promise<Models.ColumnIndexList> {\n        let params: { databaseId: string, tableId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, queries?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                queries: rest[1] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const queries = params.queries;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/indexes'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Creates an index on the columns listed. Your index should include all the columns you will query in a single request.\n     * Type can be `key`, `fulltext`, or `unique`.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.key - Index Key.\n     * @param {IndexType} params.type - Index type.\n     * @param {string[]} params.columns - Array of columns to index. Maximum of 100 columns are allowed, each 32 characters long.\n     * @param {string[]} params.orders - Array of index orders. Maximum of 100 orders are allowed.\n     * @param {number[]} params.lengths - Length of index. Maximum of 100\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnIndex>}\n     */\n    createIndex(params: { databaseId: string, tableId: string, key: string, type: IndexType, columns: string[], orders?: string[], lengths?: number[]  }): Promise<Models.ColumnIndex>;\n    /**\n     * Creates an index on the columns listed. Your index should include all the columns you will query in a single request.\n     * Type can be `key`, `fulltext`, or `unique`.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} key - Index Key.\n     * @param {IndexType} type - Index type.\n     * @param {string[]} columns - Array of columns to index. Maximum of 100 columns are allowed, each 32 characters long.\n     * @param {string[]} orders - Array of index orders. Maximum of 100 orders are allowed.\n     * @param {number[]} lengths - Length of index. Maximum of 100\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnIndex>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createIndex(databaseId: string, tableId: string, key: string, type: IndexType, columns: string[], orders?: string[], lengths?: number[]): Promise<Models.ColumnIndex>;\n    createIndex(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string, type: IndexType, columns: string[], orders?: string[], lengths?: number[] } | string,\n        ...rest: [(string)?, (string)?, (IndexType)?, (string[])?, (string[])?, (number[])?]    \n    ): Promise<Models.ColumnIndex> {\n        let params: { databaseId: string, tableId: string, key: string, type: IndexType, columns: string[], orders?: string[], lengths?: number[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string, type: IndexType, columns: string[], orders?: string[], lengths?: number[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string,\n                type: rest[2] as IndexType,\n                columns: rest[3] as string[],\n                orders: rest[4] as string[],\n                lengths: rest[5] as number[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n        const type = params.type;\n        const columns = params.columns;\n        const orders = params.orders;\n        const lengths = params.lengths;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n        if (typeof columns === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"columns\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/indexes'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof type !== 'undefined') {\n            payload['type'] = type;\n        }\n        if (typeof columns !== 'undefined') {\n            payload['columns'] = columns;\n        }\n        if (typeof orders !== 'undefined') {\n            payload['orders'] = orders;\n        }\n        if (typeof lengths !== 'undefined') {\n            payload['lengths'] = lengths;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get index by ID.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.key - Index Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnIndex>}\n     */\n    getIndex(params: { databaseId: string, tableId: string, key: string  }): Promise<Models.ColumnIndex>;\n    /**\n     * Get index by ID.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} key - Index Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ColumnIndex>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getIndex(databaseId: string, tableId: string, key: string): Promise<Models.ColumnIndex>;\n    getIndex(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<Models.ColumnIndex> {\n        let params: { databaseId: string, tableId: string, key: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/indexes/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete an index.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.key - Index Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteIndex(params: { databaseId: string, tableId: string, key: string  }): Promise<{}>;\n    /**\n     * Delete an index.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} key - Index Key.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteIndex(databaseId: string, tableId: string, key: string): Promise<{}>;\n    deleteIndex(\n        paramsOrFirst: { databaseId: string, tableId: string, key: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<{}> {\n        let params: { databaseId: string, tableId: string, key: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, key: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                key: rest[1] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const key = params.key;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/indexes/{key}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{key}', key);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a list of all the user's rows in a given table. You can use the query params to filter your results.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the TableDB service [server integration](https://appwrite.io/docs/server/tablesdbdb#tablesdbCreate).\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.RowList<Row>>}\n     */\n    listRows<Row extends Models.Row = Models.DefaultRow>(params: { databaseId: string, tableId: string, queries?: string[]  }): Promise<Models.RowList<Row>>;\n    /**\n     * Get a list of all the user's rows in a given table. You can use the query params to filter your results.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the TableDB service [server integration](https://appwrite.io/docs/server/tablesdbdb#tablesdbCreate).\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.RowList<Row>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listRows<Row extends Models.Row = Models.DefaultRow>(databaseId: string, tableId: string, queries?: string[]): Promise<Models.RowList<Row>>;\n    listRows<Row extends Models.Row = Models.DefaultRow>(\n        paramsOrFirst: { databaseId: string, tableId: string, queries?: string[] } | string,\n        ...rest: [(string)?, (string[])?]    \n    ): Promise<Models.RowList<Row>> {\n        let params: { databaseId: string, tableId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, queries?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                queries: rest[1] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const queries = params.queries;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/rows'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new Row. Before using this route, you should create a new table resource using either a [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreateTable) API or directly from your database console.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate). Make sure to define columns before creating rows.\n     * @param {string} params.rowId - Row ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Omit<Row, keyof Models.Row>} params.data - Row data as JSON object.\n     * @param {string[]} params.permissions - An array of permissions strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Row>}\n     */\n    createRow<Row extends Models.Row = Models.DefaultRow>(params: { databaseId: string, tableId: string, rowId: string, data: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Omit<Row, keyof Models.Row>, permissions?: string[]  }): Promise<Row>;\n    /**\n     * Create a new Row. Before using this route, you should create a new table resource using either a [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreateTable) API or directly from your database console.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate). Make sure to define columns before creating rows.\n     * @param {string} rowId - Row ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Omit<Row, keyof Models.Row>} data - Row data as JSON object.\n     * @param {string[]} permissions - An array of permissions strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Row>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createRow<Row extends Models.Row = Models.DefaultRow>(databaseId: string, tableId: string, rowId: string, data: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Omit<Row, keyof Models.Row>, permissions?: string[]): Promise<Row>;\n    createRow<Row extends Models.Row = Models.DefaultRow>(\n        paramsOrFirst: { databaseId: string, tableId: string, rowId: string, data: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Omit<Row, keyof Models.Row>, permissions?: string[] } | string,\n        ...rest: [(string)?, (string)?, (Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Omit<Row, keyof Models.Row>)?, (string[])?]    \n    ): Promise<Row> {\n        let params: { databaseId: string, tableId: string, rowId: string, data: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Omit<Row, keyof Models.Row>, permissions?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, rowId: string, data: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Omit<Row, keyof Models.Row>, permissions?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                rowId: rest[1] as string,\n                data: rest[2] as Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Omit<Row, keyof Models.Row>,\n                permissions: rest[3] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const rowId = params.rowId;\n        const data = params.data;\n        const permissions = params.permissions;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof rowId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"rowId\"');\n        }\n        if (typeof data === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"data\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/rows'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof rowId !== 'undefined') {\n            payload['rowId'] = rowId;\n        }\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create new Rows. Before using this route, you should create a new table resource using either a [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreateTable) API or directly from your database console.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate). Make sure to define columns before creating rows.\n     * @param {object[]} params.rows - Array of rows data as JSON objects.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.RowList<Row>>}\n     */\n    createRows<Row extends Models.Row = Models.DefaultRow>(params: { databaseId: string, tableId: string, rows: object[]  }): Promise<Models.RowList<Row>>;\n    /**\n     * Create new Rows. Before using this route, you should create a new table resource using either a [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreateTable) API or directly from your database console.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate). Make sure to define columns before creating rows.\n     * @param {object[]} rows - Array of rows data as JSON objects.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.RowList<Row>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createRows<Row extends Models.Row = Models.DefaultRow>(databaseId: string, tableId: string, rows: object[]): Promise<Models.RowList<Row>>;\n    createRows<Row extends Models.Row = Models.DefaultRow>(\n        paramsOrFirst: { databaseId: string, tableId: string, rows: object[] } | string,\n        ...rest: [(string)?, (object[])?]    \n    ): Promise<Models.RowList<Row>> {\n        let params: { databaseId: string, tableId: string, rows: object[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, rows: object[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                rows: rest[1] as object[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const rows = params.rows;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof rows === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"rows\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/rows'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof rows !== 'undefined') {\n            payload['rows'] = rows;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create or update Rows. Before using this route, you should create a new table resource using either a [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreateTable) API or directly from your database console.\n     * \n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {object[]} params.rows - Array of row data as JSON objects. May contain partial rows.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.RowList<Row>>}\n     */\n    upsertRows<Row extends Models.Row = Models.DefaultRow>(params: { databaseId: string, tableId: string, rows: object[]  }): Promise<Models.RowList<Row>>;\n    /**\n     * Create or update Rows. Before using this route, you should create a new table resource using either a [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreateTable) API or directly from your database console.\n     * \n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {object[]} rows - Array of row data as JSON objects. May contain partial rows.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.RowList<Row>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    upsertRows<Row extends Models.Row = Models.DefaultRow>(databaseId: string, tableId: string, rows: object[]): Promise<Models.RowList<Row>>;\n    upsertRows<Row extends Models.Row = Models.DefaultRow>(\n        paramsOrFirst: { databaseId: string, tableId: string, rows: object[] } | string,\n        ...rest: [(string)?, (object[])?]    \n    ): Promise<Models.RowList<Row>> {\n        let params: { databaseId: string, tableId: string, rows: object[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, rows: object[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                rows: rest[1] as object[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const rows = params.rows;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof rows === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"rows\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/rows'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof rows !== 'undefined') {\n            payload['rows'] = rows;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update all rows that match your queries, if no queries are submitted then all rows are updated. You can pass only specific fields to be updated.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {object} params.data - Row data as JSON object. Include only column and value pairs to be updated.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.RowList<Row>>}\n     */\n    updateRows<Row extends Models.Row = Models.DefaultRow>(params: { databaseId: string, tableId: string, data?: object, queries?: string[]  }): Promise<Models.RowList<Row>>;\n    /**\n     * Update all rows that match your queries, if no queries are submitted then all rows are updated. You can pass only specific fields to be updated.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {object} data - Row data as JSON object. Include only column and value pairs to be updated.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.RowList<Row>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateRows<Row extends Models.Row = Models.DefaultRow>(databaseId: string, tableId: string, data?: object, queries?: string[]): Promise<Models.RowList<Row>>;\n    updateRows<Row extends Models.Row = Models.DefaultRow>(\n        paramsOrFirst: { databaseId: string, tableId: string, data?: object, queries?: string[] } | string,\n        ...rest: [(string)?, (object)?, (string[])?]    \n    ): Promise<Models.RowList<Row>> {\n        let params: { databaseId: string, tableId: string, data?: object, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, data?: object, queries?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                data: rest[1] as object,\n                queries: rest[2] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const data = params.data;\n        const queries = params.queries;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/rows'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Bulk delete rows using queries, if no queries are passed then all rows are deleted.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.RowList<Row>>}\n     */\n    deleteRows<Row extends Models.Row = Models.DefaultRow>(params: { databaseId: string, tableId: string, queries?: string[]  }): Promise<Models.RowList<Row>>;\n    /**\n     * Bulk delete rows using queries, if no queries are passed then all rows are deleted.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.RowList<Row>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteRows<Row extends Models.Row = Models.DefaultRow>(databaseId: string, tableId: string, queries?: string[]): Promise<Models.RowList<Row>>;\n    deleteRows<Row extends Models.Row = Models.DefaultRow>(\n        paramsOrFirst: { databaseId: string, tableId: string, queries?: string[] } | string,\n        ...rest: [(string)?, (string[])?]    \n    ): Promise<Models.RowList<Row>> {\n        let params: { databaseId: string, tableId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, queries?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                queries: rest[1] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const queries = params.queries;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/rows'.replace('{databaseId}', databaseId).replace('{tableId}', tableId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a row by its unique ID. This endpoint response returns a JSON object with the row data.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.rowId - Row ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Row>}\n     */\n    getRow<Row extends Models.Row = Models.DefaultRow>(params: { databaseId: string, tableId: string, rowId: string, queries?: string[]  }): Promise<Row>;\n    /**\n     * Get a row by its unique ID. This endpoint response returns a JSON object with the row data.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} rowId - Row ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Row>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getRow<Row extends Models.Row = Models.DefaultRow>(databaseId: string, tableId: string, rowId: string, queries?: string[]): Promise<Row>;\n    getRow<Row extends Models.Row = Models.DefaultRow>(\n        paramsOrFirst: { databaseId: string, tableId: string, rowId: string, queries?: string[] } | string,\n        ...rest: [(string)?, (string)?, (string[])?]    \n    ): Promise<Row> {\n        let params: { databaseId: string, tableId: string, rowId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, rowId: string, queries?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                rowId: rest[1] as string,\n                queries: rest[2] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const rowId = params.rowId;\n        const queries = params.queries;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof rowId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"rowId\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/rows/{rowId}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{rowId}', rowId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create or update a Row. Before using this route, you should create a new table resource using either a [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreateTable) API or directly from your database console.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.rowId - Row ID.\n     * @param {Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>} params.data - Row data as JSON object. Include all required columns of the row to be created or updated.\n     * @param {string[]} params.permissions - An array of permissions strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Row>}\n     */\n    upsertRow<Row extends Models.Row = Models.DefaultRow>(params: { databaseId: string, tableId: string, rowId: string, data?: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>, permissions?: string[]  }): Promise<Row>;\n    /**\n     * Create or update a Row. Before using this route, you should create a new table resource using either a [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreateTable) API or directly from your database console.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} rowId - Row ID.\n     * @param {Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>} data - Row data as JSON object. Include all required columns of the row to be created or updated.\n     * @param {string[]} permissions - An array of permissions strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Row>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    upsertRow<Row extends Models.Row = Models.DefaultRow>(databaseId: string, tableId: string, rowId: string, data?: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>, permissions?: string[]): Promise<Row>;\n    upsertRow<Row extends Models.Row = Models.DefaultRow>(\n        paramsOrFirst: { databaseId: string, tableId: string, rowId: string, data?: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>, permissions?: string[] } | string,\n        ...rest: [(string)?, (string)?, (Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>)?, (string[])?]    \n    ): Promise<Row> {\n        let params: { databaseId: string, tableId: string, rowId: string, data?: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>, permissions?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, rowId: string, data?: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>, permissions?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                rowId: rest[1] as string,\n                data: rest[2] as Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>,\n                permissions: rest[3] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const rowId = params.rowId;\n        const data = params.data;\n        const permissions = params.permissions;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof rowId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"rowId\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/rows/{rowId}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{rowId}', rowId);\n        const payload: Payload = {};\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a row by its unique ID. Using the patch method you can pass only specific fields that will get updated.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.rowId - Row ID.\n     * @param {Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>} params.data - Row data as JSON object. Include only columns and value pairs to be updated.\n     * @param {string[]} params.permissions - An array of permissions strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Row>}\n     */\n    updateRow<Row extends Models.Row = Models.DefaultRow>(params: { databaseId: string, tableId: string, rowId: string, data?: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>, permissions?: string[]  }): Promise<Row>;\n    /**\n     * Update a row by its unique ID. Using the patch method you can pass only specific fields that will get updated.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} rowId - Row ID.\n     * @param {Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>} data - Row data as JSON object. Include only columns and value pairs to be updated.\n     * @param {string[]} permissions - An array of permissions strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).\n     * @throws {AppwriteException}\n     * @returns {Promise<Row>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateRow<Row extends Models.Row = Models.DefaultRow>(databaseId: string, tableId: string, rowId: string, data?: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>, permissions?: string[]): Promise<Row>;\n    updateRow<Row extends Models.Row = Models.DefaultRow>(\n        paramsOrFirst: { databaseId: string, tableId: string, rowId: string, data?: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>, permissions?: string[] } | string,\n        ...rest: [(string)?, (string)?, (Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>)?, (string[])?]    \n    ): Promise<Row> {\n        let params: { databaseId: string, tableId: string, rowId: string, data?: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>, permissions?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, rowId: string, data?: Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>, permissions?: string[] };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                rowId: rest[1] as string,\n                data: rest[2] as Row extends Models.DefaultRow ? Partial<Models.Row> & Record<string, any> : Partial<Models.Row> & Partial<Omit<Row, keyof Models.Row>>,\n                permissions: rest[3] as string[]            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const rowId = params.rowId;\n        const data = params.data;\n        const permissions = params.permissions;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof rowId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"rowId\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/rows/{rowId}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{rowId}', rowId);\n        const payload: Payload = {};\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a row by its unique ID.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} params.rowId - Row ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteRow(params: { databaseId: string, tableId: string, rowId: string  }): Promise<{}>;\n    /**\n     * Delete a row by its unique ID.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/tablesdb#tablesDBCreate).\n     * @param {string} rowId - Row ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteRow(databaseId: string, tableId: string, rowId: string): Promise<{}>;\n    deleteRow(\n        paramsOrFirst: { databaseId: string, tableId: string, rowId: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<{}> {\n        let params: { databaseId: string, tableId: string, rowId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, rowId: string };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                rowId: rest[1] as string            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const rowId = params.rowId;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof rowId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"rowId\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/rows/{rowId}'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{rowId}', rowId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Decrement a specific column of a row by a given value.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.rowId - Row ID.\n     * @param {string} params.column - Column key.\n     * @param {number} params.value - Value to increment the column by. The value must be a number.\n     * @param {number} params.min - Minimum value for the column. If the current value is lesser than this value, an exception will be thrown.\n     * @throws {AppwriteException}\n     * @returns {Promise<Row>}\n     */\n    decrementRowColumn<Row extends Models.Row = Models.DefaultRow>(params: { databaseId: string, tableId: string, rowId: string, column: string, value?: number, min?: number  }): Promise<Row>;\n    /**\n     * Decrement a specific column of a row by a given value.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} rowId - Row ID.\n     * @param {string} column - Column key.\n     * @param {number} value - Value to increment the column by. The value must be a number.\n     * @param {number} min - Minimum value for the column. If the current value is lesser than this value, an exception will be thrown.\n     * @throws {AppwriteException}\n     * @returns {Promise<Row>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    decrementRowColumn<Row extends Models.Row = Models.DefaultRow>(databaseId: string, tableId: string, rowId: string, column: string, value?: number, min?: number): Promise<Row>;\n    decrementRowColumn<Row extends Models.Row = Models.DefaultRow>(\n        paramsOrFirst: { databaseId: string, tableId: string, rowId: string, column: string, value?: number, min?: number } | string,\n        ...rest: [(string)?, (string)?, (string)?, (number)?, (number)?]    \n    ): Promise<Row> {\n        let params: { databaseId: string, tableId: string, rowId: string, column: string, value?: number, min?: number };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, rowId: string, column: string, value?: number, min?: number };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                rowId: rest[1] as string,\n                column: rest[2] as string,\n                value: rest[3] as number,\n                min: rest[4] as number            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const rowId = params.rowId;\n        const column = params.column;\n        const value = params.value;\n        const min = params.min;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof rowId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"rowId\"');\n        }\n        if (typeof column === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"column\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/rows/{rowId}/{column}/decrement'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{rowId}', rowId).replace('{column}', column);\n        const payload: Payload = {};\n        if (typeof value !== 'undefined') {\n            payload['value'] = value;\n        }\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Increment a specific column of a row by a given value.\n     *\n     * @param {string} params.databaseId - Database ID.\n     * @param {string} params.tableId - Table ID.\n     * @param {string} params.rowId - Row ID.\n     * @param {string} params.column - Column key.\n     * @param {number} params.value - Value to increment the column by. The value must be a number.\n     * @param {number} params.max - Maximum value for the column. If the current value is greater than this value, an error will be thrown.\n     * @throws {AppwriteException}\n     * @returns {Promise<Row>}\n     */\n    incrementRowColumn<Row extends Models.Row = Models.DefaultRow>(params: { databaseId: string, tableId: string, rowId: string, column: string, value?: number, max?: number  }): Promise<Row>;\n    /**\n     * Increment a specific column of a row by a given value.\n     *\n     * @param {string} databaseId - Database ID.\n     * @param {string} tableId - Table ID.\n     * @param {string} rowId - Row ID.\n     * @param {string} column - Column key.\n     * @param {number} value - Value to increment the column by. The value must be a number.\n     * @param {number} max - Maximum value for the column. If the current value is greater than this value, an error will be thrown.\n     * @throws {AppwriteException}\n     * @returns {Promise<Row>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    incrementRowColumn<Row extends Models.Row = Models.DefaultRow>(databaseId: string, tableId: string, rowId: string, column: string, value?: number, max?: number): Promise<Row>;\n    incrementRowColumn<Row extends Models.Row = Models.DefaultRow>(\n        paramsOrFirst: { databaseId: string, tableId: string, rowId: string, column: string, value?: number, max?: number } | string,\n        ...rest: [(string)?, (string)?, (string)?, (number)?, (number)?]    \n    ): Promise<Row> {\n        let params: { databaseId: string, tableId: string, rowId: string, column: string, value?: number, max?: number };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { databaseId: string, tableId: string, rowId: string, column: string, value?: number, max?: number };\n        } else {\n            params = {\n                databaseId: paramsOrFirst as string,\n                tableId: rest[0] as string,\n                rowId: rest[1] as string,\n                column: rest[2] as string,\n                value: rest[3] as number,\n                max: rest[4] as number            \n            };\n        }\n        \n        const databaseId = params.databaseId;\n        const tableId = params.tableId;\n        const rowId = params.rowId;\n        const column = params.column;\n        const value = params.value;\n        const max = params.max;\n\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof tableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tableId\"');\n        }\n        if (typeof rowId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"rowId\"');\n        }\n        if (typeof column === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"column\"');\n        }\n\n        const apiPath = '/tablesdb/{databaseId}/tables/{tableId}/rows/{rowId}/{column}/increment'.replace('{databaseId}', databaseId).replace('{tableId}', tableId).replace('{rowId}', rowId).replace('{column}', column);\n        const payload: Payload = {};\n        if (typeof value !== 'undefined') {\n            payload['value'] = value;\n        }\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n", "import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\n\nexport class Teams {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Get a list of all the teams in which the current user is a member. You can use the parameters to filter your results.\n     *\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, total, billingPlan\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.TeamList<Preferences>>}\n     */\n    list<Preferences extends Models.Preferences = Models.DefaultPreferences>(params?: { queries?: string[], search?: string  }): Promise<Models.TeamList<Preferences>>;\n    /**\n     * Get a list of all the teams in which the current user is a member. You can use the parameters to filter your results.\n     *\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, total, billingPlan\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.TeamList<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    list<Preferences extends Models.Preferences = Models.DefaultPreferences>(queries?: string[], search?: string): Promise<Models.TeamList<Preferences>>;\n    list<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst?: { queries?: string[], search?: string } | string[],\n        ...rest: [(string)?]    \n    ): Promise<Models.TeamList<Preferences>> {\n        let params: { queries?: string[], search?: string };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { queries?: string[], search?: string };\n        } else {\n            params = {\n                queries: paramsOrFirst as string[],\n                search: rest[0] as string            \n            };\n        }\n        \n        const queries = params.queries;\n        const search = params.search;\n\n\n        const apiPath = '/teams';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. Only the users with the owner role can invite new members, add new owners and delete or update the team.\n     *\n     * @param {string} params.teamId - Team ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.name - Team name. Max length: 128 chars.\n     * @param {string[]} params.roles - Array of strings. Use this param to set the roles in the team for the user who created it. The default role is **owner**. A role can be any string. Learn more about [roles and permissions](https://appwrite.io/docs/permissions). Maximum of 100 roles are allowed, each 32 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Team<Preferences>>}\n     */\n    create<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { teamId: string, name: string, roles?: string[]  }): Promise<Models.Team<Preferences>>;\n    /**\n     * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. Only the users with the owner role can invite new members, add new owners and delete or update the team.\n     *\n     * @param {string} teamId - Team ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} name - Team name. Max length: 128 chars.\n     * @param {string[]} roles - Array of strings. Use this param to set the roles in the team for the user who created it. The default role is **owner**. A role can be any string. Learn more about [roles and permissions](https://appwrite.io/docs/permissions). Maximum of 100 roles are allowed, each 32 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Team<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    create<Preferences extends Models.Preferences = Models.DefaultPreferences>(teamId: string, name: string, roles?: string[]): Promise<Models.Team<Preferences>>;\n    create<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { teamId: string, name: string, roles?: string[] } | string,\n        ...rest: [(string)?, (string[])?]    \n    ): Promise<Models.Team<Preferences>> {\n        let params: { teamId: string, name: string, roles?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { teamId: string, name: string, roles?: string[] };\n        } else {\n            params = {\n                teamId: paramsOrFirst as string,\n                name: rest[0] as string,\n                roles: rest[1] as string[]            \n            };\n        }\n        \n        const teamId = params.teamId;\n        const name = params.name;\n        const roles = params.roles;\n\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/teams';\n        const payload: Payload = {};\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a team by its ID. All team members have read access for this resource.\n     *\n     * @param {string} params.teamId - Team ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Team<Preferences>>}\n     */\n    get<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { teamId: string  }): Promise<Models.Team<Preferences>>;\n    /**\n     * Get a team by its ID. All team members have read access for this resource.\n     *\n     * @param {string} teamId - Team ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Team<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    get<Preferences extends Models.Preferences = Models.DefaultPreferences>(teamId: string): Promise<Models.Team<Preferences>>;\n    get<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { teamId: string } | string    \n    ): Promise<Models.Team<Preferences>> {\n        let params: { teamId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { teamId: string };\n        } else {\n            params = {\n                teamId: paramsOrFirst as string            \n            };\n        }\n        \n        const teamId = params.teamId;\n\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update the team's name by its unique ID.\n     *\n     * @param {string} params.teamId - Team ID.\n     * @param {string} params.name - New team name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Team<Preferences>>}\n     */\n    updateName<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { teamId: string, name: string  }): Promise<Models.Team<Preferences>>;\n    /**\n     * Update the team's name by its unique ID.\n     *\n     * @param {string} teamId - Team ID.\n     * @param {string} name - New team name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Team<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateName<Preferences extends Models.Preferences = Models.DefaultPreferences>(teamId: string, name: string): Promise<Models.Team<Preferences>>;\n    updateName<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { teamId: string, name: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Team<Preferences>> {\n        let params: { teamId: string, name: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { teamId: string, name: string };\n        } else {\n            params = {\n                teamId: paramsOrFirst as string,\n                name: rest[0] as string            \n            };\n        }\n        \n        const teamId = params.teamId;\n        const name = params.name;\n\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a team using its ID. Only team members with the owner role can delete the team.\n     *\n     * @param {string} params.teamId - Team ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    delete(params: { teamId: string  }): Promise<{}>;\n    /**\n     * Delete a team using its ID. Only team members with the owner role can delete the team.\n     *\n     * @param {string} teamId - Team ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    delete(teamId: string): Promise<{}>;\n    delete(\n        paramsOrFirst: { teamId: string } | string    \n    ): Promise<{}> {\n        let params: { teamId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { teamId: string };\n        } else {\n            params = {\n                teamId: paramsOrFirst as string            \n            };\n        }\n        \n        const teamId = params.teamId;\n\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to list a team's members using the team's ID. All team members have read access to this endpoint. Hide sensitive attributes from the response by toggling membership privacy in the Console.\n     *\n     * @param {string} params.teamId - Team ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, teamId, invited, joined, confirm, roles\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MembershipList>}\n     */\n    listMemberships(params: { teamId: string, queries?: string[], search?: string  }): Promise<Models.MembershipList>;\n    /**\n     * Use this endpoint to list a team's members using the team's ID. All team members have read access to this endpoint. Hide sensitive attributes from the response by toggling membership privacy in the Console.\n     *\n     * @param {string} teamId - Team ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, teamId, invited, joined, confirm, roles\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MembershipList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listMemberships(teamId: string, queries?: string[], search?: string): Promise<Models.MembershipList>;\n    listMemberships(\n        paramsOrFirst: { teamId: string, queries?: string[], search?: string } | string,\n        ...rest: [(string[])?, (string)?]    \n    ): Promise<Models.MembershipList> {\n        let params: { teamId: string, queries?: string[], search?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { teamId: string, queries?: string[], search?: string };\n        } else {\n            params = {\n                teamId: paramsOrFirst as string,\n                queries: rest[0] as string[],\n                search: rest[1] as string            \n            };\n        }\n        \n        const teamId = params.teamId;\n        const queries = params.queries;\n        const search = params.search;\n\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Invite a new member to join your team. Provide an ID for existing users, or invite unregistered users using an email or phone number. If initiated from a Client SDK, Appwrite will send an email or sms with a link to join the team to the invited user, and an account will be created for them if one doesn't exist. If initiated from a Server SDK, the new member will be added automatically to the team.\n     * \n     * You only need to provide one of a user ID, email, or phone number. Appwrite will prioritize accepting the user ID > email > phone number if you provide more than one of these parameters.\n     * \n     * Use the `url` parameter to redirect the user from the invitation email to your app. After the user is redirected, use the [Update Team Membership Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus) endpoint to allow the user to accept the invitation to the team. \n     * \n     * Please note that to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) Appwrite will accept the only redirect URLs under the domains you have added as a platform on the Appwrite Console.\n     * \n     *\n     * @param {string} params.teamId - Team ID.\n     * @param {string[]} params.roles - Array of strings. Use this param to set the user roles in the team. A role can be any string. Learn more about [roles and permissions](https://appwrite.io/docs/permissions). Maximum of 100 roles are allowed, each 32 characters long.\n     * @param {string} params.email - Email of the new team member.\n     * @param {string} params.userId - ID of the user to be added to a team.\n     * @param {string} params.phone - Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @param {string} params.url - URL to redirect the user back to your app from the invitation email. This parameter is not required when an API key is supplied. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n     * @param {string} params.name - Name of the new team member. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Membership>}\n     */\n    createMembership(params: { teamId: string, roles: string[], email?: string, userId?: string, phone?: string, url?: string, name?: string  }): Promise<Models.Membership>;\n    /**\n     * Invite a new member to join your team. Provide an ID for existing users, or invite unregistered users using an email or phone number. If initiated from a Client SDK, Appwrite will send an email or sms with a link to join the team to the invited user, and an account will be created for them if one doesn't exist. If initiated from a Server SDK, the new member will be added automatically to the team.\n     * \n     * You only need to provide one of a user ID, email, or phone number. Appwrite will prioritize accepting the user ID > email > phone number if you provide more than one of these parameters.\n     * \n     * Use the `url` parameter to redirect the user from the invitation email to your app. After the user is redirected, use the [Update Team Membership Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus) endpoint to allow the user to accept the invitation to the team. \n     * \n     * Please note that to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) Appwrite will accept the only redirect URLs under the domains you have added as a platform on the Appwrite Console.\n     * \n     *\n     * @param {string} teamId - Team ID.\n     * @param {string[]} roles - Array of strings. Use this param to set the user roles in the team. A role can be any string. Learn more about [roles and permissions](https://appwrite.io/docs/permissions). Maximum of 100 roles are allowed, each 32 characters long.\n     * @param {string} email - Email of the new team member.\n     * @param {string} userId - ID of the user to be added to a team.\n     * @param {string} phone - Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @param {string} url - URL to redirect the user back to your app from the invitation email. This parameter is not required when an API key is supplied. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.\n     * @param {string} name - Name of the new team member. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Membership>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createMembership(teamId: string, roles: string[], email?: string, userId?: string, phone?: string, url?: string, name?: string): Promise<Models.Membership>;\n    createMembership(\n        paramsOrFirst: { teamId: string, roles: string[], email?: string, userId?: string, phone?: string, url?: string, name?: string } | string,\n        ...rest: [(string[])?, (string)?, (string)?, (string)?, (string)?, (string)?]    \n    ): Promise<Models.Membership> {\n        let params: { teamId: string, roles: string[], email?: string, userId?: string, phone?: string, url?: string, name?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { teamId: string, roles: string[], email?: string, userId?: string, phone?: string, url?: string, name?: string };\n        } else {\n            params = {\n                teamId: paramsOrFirst as string,\n                roles: rest[0] as string[],\n                email: rest[1] as string,\n                userId: rest[2] as string,\n                phone: rest[3] as string,\n                url: rest[4] as string,\n                name: rest[5] as string            \n            };\n        }\n        \n        const teamId = params.teamId;\n        const roles = params.roles;\n        const email = params.email;\n        const userId = params.userId;\n        const phone = params.phone;\n        const url = params.url;\n        const name = params.name;\n\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof roles === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"roles\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a team member by the membership unique id. All team members have read access for this resource. Hide sensitive attributes from the response by toggling membership privacy in the Console.\n     *\n     * @param {string} params.teamId - Team ID.\n     * @param {string} params.membershipId - Membership ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Membership>}\n     */\n    getMembership(params: { teamId: string, membershipId: string  }): Promise<Models.Membership>;\n    /**\n     * Get a team member by the membership unique id. All team members have read access for this resource. Hide sensitive attributes from the response by toggling membership privacy in the Console.\n     *\n     * @param {string} teamId - Team ID.\n     * @param {string} membershipId - Membership ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Membership>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getMembership(teamId: string, membershipId: string): Promise<Models.Membership>;\n    getMembership(\n        paramsOrFirst: { teamId: string, membershipId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Membership> {\n        let params: { teamId: string, membershipId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { teamId: string, membershipId: string };\n        } else {\n            params = {\n                teamId: paramsOrFirst as string,\n                membershipId: rest[0] as string            \n            };\n        }\n        \n        const teamId = params.teamId;\n        const membershipId = params.membershipId;\n\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Modify the roles of a team member. Only team members with the owner role have access to this endpoint. Learn more about [roles and permissions](https://appwrite.io/docs/permissions).\n     * \n     *\n     * @param {string} params.teamId - Team ID.\n     * @param {string} params.membershipId - Membership ID.\n     * @param {string[]} params.roles - An array of strings. Use this param to set the user's roles in the team. A role can be any string. Learn more about [roles and permissions](https://appwrite.io/docs/permissions). Maximum of 100 roles are allowed, each 32 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Membership>}\n     */\n    updateMembership(params: { teamId: string, membershipId: string, roles: string[]  }): Promise<Models.Membership>;\n    /**\n     * Modify the roles of a team member. Only team members with the owner role have access to this endpoint. Learn more about [roles and permissions](https://appwrite.io/docs/permissions).\n     * \n     *\n     * @param {string} teamId - Team ID.\n     * @param {string} membershipId - Membership ID.\n     * @param {string[]} roles - An array of strings. Use this param to set the user's roles in the team. A role can be any string. Learn more about [roles and permissions](https://appwrite.io/docs/permissions). Maximum of 100 roles are allowed, each 32 characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Membership>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateMembership(teamId: string, membershipId: string, roles: string[]): Promise<Models.Membership>;\n    updateMembership(\n        paramsOrFirst: { teamId: string, membershipId: string, roles: string[] } | string,\n        ...rest: [(string)?, (string[])?]    \n    ): Promise<Models.Membership> {\n        let params: { teamId: string, membershipId: string, roles: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { teamId: string, membershipId: string, roles: string[] };\n        } else {\n            params = {\n                teamId: paramsOrFirst as string,\n                membershipId: rest[0] as string,\n                roles: rest[1] as string[]            \n            };\n        }\n        \n        const teamId = params.teamId;\n        const membershipId = params.membershipId;\n        const roles = params.roles;\n\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n        if (typeof roles === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"roles\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.\n     *\n     * @param {string} params.teamId - Team ID.\n     * @param {string} params.membershipId - Membership ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteMembership(params: { teamId: string, membershipId: string  }): Promise<{}>;\n    /**\n     * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.\n     *\n     * @param {string} teamId - Team ID.\n     * @param {string} membershipId - Membership ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteMembership(teamId: string, membershipId: string): Promise<{}>;\n    deleteMembership(\n        paramsOrFirst: { teamId: string, membershipId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<{}> {\n        let params: { teamId: string, membershipId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { teamId: string, membershipId: string };\n        } else {\n            params = {\n                teamId: paramsOrFirst as string,\n                membershipId: rest[0] as string            \n            };\n        }\n        \n        const teamId = params.teamId;\n        const membershipId = params.membershipId;\n\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email received by the user.\n     * \n     * If the request is successful, a session for the user is automatically created.\n     * \n     *\n     * @param {string} params.teamId - Team ID.\n     * @param {string} params.membershipId - Membership ID.\n     * @param {string} params.userId - User ID.\n     * @param {string} params.secret - Secret key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Membership>}\n     */\n    updateMembershipStatus(params: { teamId: string, membershipId: string, userId: string, secret: string  }): Promise<Models.Membership>;\n    /**\n     * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email received by the user.\n     * \n     * If the request is successful, a session for the user is automatically created.\n     * \n     *\n     * @param {string} teamId - Team ID.\n     * @param {string} membershipId - Membership ID.\n     * @param {string} userId - User ID.\n     * @param {string} secret - Secret key.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Membership>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateMembershipStatus(teamId: string, membershipId: string, userId: string, secret: string): Promise<Models.Membership>;\n    updateMembershipStatus(\n        paramsOrFirst: { teamId: string, membershipId: string, userId: string, secret: string } | string,\n        ...rest: [(string)?, (string)?, (string)?]    \n    ): Promise<Models.Membership> {\n        let params: { teamId: string, membershipId: string, userId: string, secret: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { teamId: string, membershipId: string, userId: string, secret: string };\n        } else {\n            params = {\n                teamId: paramsOrFirst as string,\n                membershipId: rest[0] as string,\n                userId: rest[1] as string,\n                secret: rest[2] as string            \n            };\n        }\n        \n        const teamId = params.teamId;\n        const membershipId = params.membershipId;\n        const userId = params.userId;\n        const secret = params.secret;\n\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}/status'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the team's shared preferences by its unique ID. If a preference doesn't need to be shared by all team members, prefer storing them in [user preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).\n     *\n     * @param {string} params.teamId - Team ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Preferences>}\n     */\n    getPrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { teamId: string  }): Promise<Preferences>;\n    /**\n     * Get the team's shared preferences by its unique ID. If a preference doesn't need to be shared by all team members, prefer storing them in [user preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).\n     *\n     * @param {string} teamId - Team ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Preferences>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getPrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(teamId: string): Promise<Preferences>;\n    getPrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { teamId: string } | string    \n    ): Promise<Preferences> {\n        let params: { teamId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { teamId: string };\n        } else {\n            params = {\n                teamId: paramsOrFirst as string            \n            };\n        }\n        \n        const teamId = params.teamId;\n\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        const apiPath = '/teams/{teamId}/prefs'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update the team's preferences by its unique ID. The object you pass is stored as is and replaces any previous value. The maximum allowed prefs size is 64kB and throws an error if exceeded.\n     *\n     * @param {string} params.teamId - Team ID.\n     * @param {object} params.prefs - Prefs key-value JSON object.\n     * @throws {AppwriteException}\n     * @returns {Promise<Preferences>}\n     */\n    updatePrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { teamId: string, prefs: object  }): Promise<Preferences>;\n    /**\n     * Update the team's preferences by its unique ID. The object you pass is stored as is and replaces any previous value. The maximum allowed prefs size is 64kB and throws an error if exceeded.\n     *\n     * @param {string} teamId - Team ID.\n     * @param {object} prefs - Prefs key-value JSON object.\n     * @throws {AppwriteException}\n     * @returns {Promise<Preferences>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(teamId: string, prefs: object): Promise<Preferences>;\n    updatePrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { teamId: string, prefs: object } | string,\n        ...rest: [(object)?]    \n    ): Promise<Preferences> {\n        let params: { teamId: string, prefs: object };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { teamId: string, prefs: object };\n        } else {\n            params = {\n                teamId: paramsOrFirst as string,\n                prefs: rest[0] as object            \n            };\n        }\n        \n        const teamId = params.teamId;\n        const prefs = params.prefs;\n\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n\n        const apiPath = '/teams/{teamId}/prefs'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n", "import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\n\nexport class Tokens {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * List all the tokens created for a specific file or bucket. You can use the query params to filter your results.\n     *\n     * @param {string} params.bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} params.fileId - File unique ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: expire\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ResourceTokenList>}\n     */\n    list(params: { bucketId: string, fileId: string, queries?: string[]  }): Promise<Models.ResourceTokenList>;\n    /**\n     * List all the tokens created for a specific file or bucket. You can use the query params to filter your results.\n     *\n     * @param {string} bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} fileId - File unique ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: expire\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ResourceTokenList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    list(bucketId: string, fileId: string, queries?: string[]): Promise<Models.ResourceTokenList>;\n    list(\n        paramsOrFirst: { bucketId: string, fileId: string, queries?: string[] } | string,\n        ...rest: [(string)?, (string[])?]    \n    ): Promise<Models.ResourceTokenList> {\n        let params: { bucketId: string, fileId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { bucketId: string, fileId: string, queries?: string[] };\n        } else {\n            params = {\n                bucketId: paramsOrFirst as string,\n                fileId: rest[0] as string,\n                queries: rest[1] as string[]            \n            };\n        }\n        \n        const bucketId = params.bucketId;\n        const fileId = params.fileId;\n        const queries = params.queries;\n\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/tokens/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new token. A token is linked to a file. Token can be passed as a request URL search parameter.\n     *\n     * @param {string} params.bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} params.fileId - File unique ID.\n     * @param {string} params.expire - Token expiry date\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ResourceToken>}\n     */\n    createFileToken(params: { bucketId: string, fileId: string, expire?: string  }): Promise<Models.ResourceToken>;\n    /**\n     * Create a new token. A token is linked to a file. Token can be passed as a request URL search parameter.\n     *\n     * @param {string} bucketId - Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).\n     * @param {string} fileId - File unique ID.\n     * @param {string} expire - Token expiry date\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ResourceToken>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createFileToken(bucketId: string, fileId: string, expire?: string): Promise<Models.ResourceToken>;\n    createFileToken(\n        paramsOrFirst: { bucketId: string, fileId: string, expire?: string } | string,\n        ...rest: [(string)?, (string)?]    \n    ): Promise<Models.ResourceToken> {\n        let params: { bucketId: string, fileId: string, expire?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { bucketId: string, fileId: string, expire?: string };\n        } else {\n            params = {\n                bucketId: paramsOrFirst as string,\n                fileId: rest[0] as string,\n                expire: rest[1] as string            \n            };\n        }\n        \n        const bucketId = params.bucketId;\n        const fileId = params.fileId;\n        const expire = params.expire;\n\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        const apiPath = '/tokens/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n        if (typeof expire !== 'undefined') {\n            payload['expire'] = expire;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a token by its unique ID.\n     *\n     * @param {string} params.tokenId - Token ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ResourceToken>}\n     */\n    get(params: { tokenId: string  }): Promise<Models.ResourceToken>;\n    /**\n     * Get a token by its unique ID.\n     *\n     * @param {string} tokenId - Token ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ResourceToken>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    get(tokenId: string): Promise<Models.ResourceToken>;\n    get(\n        paramsOrFirst: { tokenId: string } | string    \n    ): Promise<Models.ResourceToken> {\n        let params: { tokenId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { tokenId: string };\n        } else {\n            params = {\n                tokenId: paramsOrFirst as string            \n            };\n        }\n        \n        const tokenId = params.tokenId;\n\n        if (typeof tokenId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tokenId\"');\n        }\n\n        const apiPath = '/tokens/{tokenId}'.replace('{tokenId}', tokenId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a token by its unique ID. Use this endpoint to update a token's expiry date.\n     *\n     * @param {string} params.tokenId - Token unique ID.\n     * @param {string} params.expire - File token expiry date\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ResourceToken>}\n     */\n    update(params: { tokenId: string, expire?: string  }): Promise<Models.ResourceToken>;\n    /**\n     * Update a token by its unique ID. Use this endpoint to update a token's expiry date.\n     *\n     * @param {string} tokenId - Token unique ID.\n     * @param {string} expire - File token expiry date\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ResourceToken>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    update(tokenId: string, expire?: string): Promise<Models.ResourceToken>;\n    update(\n        paramsOrFirst: { tokenId: string, expire?: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.ResourceToken> {\n        let params: { tokenId: string, expire?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { tokenId: string, expire?: string };\n        } else {\n            params = {\n                tokenId: paramsOrFirst as string,\n                expire: rest[0] as string            \n            };\n        }\n        \n        const tokenId = params.tokenId;\n        const expire = params.expire;\n\n        if (typeof tokenId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tokenId\"');\n        }\n\n        const apiPath = '/tokens/{tokenId}'.replace('{tokenId}', tokenId);\n        const payload: Payload = {};\n        if (typeof expire !== 'undefined') {\n            payload['expire'] = expire;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a token by its unique ID.\n     *\n     * @param {string} params.tokenId - Token ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    delete(params: { tokenId: string  }): Promise<{}>;\n    /**\n     * Delete a token by its unique ID.\n     *\n     * @param {string} tokenId - Token ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    delete(tokenId: string): Promise<{}>;\n    delete(\n        paramsOrFirst: { tokenId: string } | string    \n    ): Promise<{}> {\n        let params: { tokenId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { tokenId: string };\n        } else {\n            params = {\n                tokenId: paramsOrFirst as string            \n            };\n        }\n        \n        const tokenId = params.tokenId;\n\n        if (typeof tokenId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"tokenId\"');\n        }\n\n        const apiPath = '/tokens/{tokenId}'.replace('{tokenId}', tokenId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n", "import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\nimport { PasswordHash } from '../enums/password-hash';\nimport { AuthenticatorType } from '../enums/authenticator-type';\nimport { MessagingProviderType } from '../enums/messaging-provider-type';\n\nexport class Users {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Get a list of all the project's users. You can use the query params to filter your results.\n     *\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, email, phone, status, passwordUpdate, registration, emailVerification, phoneVerification, labels\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.UserList<Preferences>>}\n     */\n    list<Preferences extends Models.Preferences = Models.DefaultPreferences>(params?: { queries?: string[], search?: string  }): Promise<Models.UserList<Preferences>>;\n    /**\n     * Get a list of all the project's users. You can use the query params to filter your results.\n     *\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, email, phone, status, passwordUpdate, registration, emailVerification, phoneVerification, labels\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.UserList<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    list<Preferences extends Models.Preferences = Models.DefaultPreferences>(queries?: string[], search?: string): Promise<Models.UserList<Preferences>>;\n    list<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst?: { queries?: string[], search?: string } | string[],\n        ...rest: [(string)?]    \n    ): Promise<Models.UserList<Preferences>> {\n        let params: { queries?: string[], search?: string };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { queries?: string[], search?: string };\n        } else {\n            params = {\n                queries: paramsOrFirst as string[],\n                search: rest[0] as string            \n            };\n        }\n        \n        const queries = params.queries;\n        const search = params.search;\n\n\n        const apiPath = '/users';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new user.\n     *\n     * @param {string} params.userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.email - User email.\n     * @param {string} params.phone - Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @param {string} params.password - Plain text user password. Must be at least 8 chars.\n     * @param {string} params.name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    create<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, email?: string, phone?: string, password?: string, name?: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Create a new user.\n     *\n     * @param {string} userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} email - User email.\n     * @param {string} phone - Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.\n     * @param {string} password - Plain text user password. Must be at least 8 chars.\n     * @param {string} name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    create<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, email?: string, phone?: string, password?: string, name?: string): Promise<Models.User<Preferences>>;\n    create<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, email?: string, phone?: string, password?: string, name?: string } | string,\n        ...rest: [(string)?, (string)?, (string)?, (string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, email?: string, phone?: string, password?: string, name?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, email?: string, phone?: string, password?: string, name?: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                email: rest[0] as string,\n                phone: rest[1] as string,\n                password: rest[2] as string,\n                name: rest[3] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const email = params.email;\n        const phone = params.phone;\n        const password = params.password;\n        const name = params.name;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new user. Password provided must be hashed with the [Argon2](https://en.wikipedia.org/wiki/Argon2) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} params.userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.email - User email.\n     * @param {string} params.password - User password hashed using Argon2.\n     * @param {string} params.name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    createArgon2User<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, email: string, password: string, name?: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Create a new user. Password provided must be hashed with the [Argon2](https://en.wikipedia.org/wiki/Argon2) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} email - User email.\n     * @param {string} password - User password hashed using Argon2.\n     * @param {string} name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createArgon2User<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, email: string, password: string, name?: string): Promise<Models.User<Preferences>>;\n    createArgon2User<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, email: string, password: string, name?: string } | string,\n        ...rest: [(string)?, (string)?, (string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, email: string, password: string, name?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, email: string, password: string, name?: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                email: rest[0] as string,\n                password: rest[1] as string,\n                name: rest[2] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const email = params.email;\n        const password = params.password;\n        const name = params.name;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/users/argon2';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new user. Password provided must be hashed with the [Bcrypt](https://en.wikipedia.org/wiki/Bcrypt) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} params.userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.email - User email.\n     * @param {string} params.password - User password hashed using Bcrypt.\n     * @param {string} params.name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    createBcryptUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, email: string, password: string, name?: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Create a new user. Password provided must be hashed with the [Bcrypt](https://en.wikipedia.org/wiki/Bcrypt) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} email - User email.\n     * @param {string} password - User password hashed using Bcrypt.\n     * @param {string} name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createBcryptUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, email: string, password: string, name?: string): Promise<Models.User<Preferences>>;\n    createBcryptUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, email: string, password: string, name?: string } | string,\n        ...rest: [(string)?, (string)?, (string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, email: string, password: string, name?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, email: string, password: string, name?: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                email: rest[0] as string,\n                password: rest[1] as string,\n                name: rest[2] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const email = params.email;\n        const password = params.password;\n        const name = params.name;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/users/bcrypt';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get identities for all users.\n     *\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, provider, providerUid, providerEmail, providerAccessTokenExpiry\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.IdentityList>}\n     */\n    listIdentities(params?: { queries?: string[], search?: string  }): Promise<Models.IdentityList>;\n    /**\n     * Get identities for all users.\n     *\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, provider, providerUid, providerEmail, providerAccessTokenExpiry\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.IdentityList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listIdentities(queries?: string[], search?: string): Promise<Models.IdentityList>;\n    listIdentities(\n        paramsOrFirst?: { queries?: string[], search?: string } | string[],\n        ...rest: [(string)?]    \n    ): Promise<Models.IdentityList> {\n        let params: { queries?: string[], search?: string };\n        \n        if (!paramsOrFirst || (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { queries?: string[], search?: string };\n        } else {\n            params = {\n                queries: paramsOrFirst as string[],\n                search: rest[0] as string            \n            };\n        }\n        \n        const queries = params.queries;\n        const search = params.search;\n\n\n        const apiPath = '/users/identities';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete an identity by its unique ID.\n     *\n     * @param {string} params.identityId - Identity ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteIdentity(params: { identityId: string  }): Promise<{}>;\n    /**\n     * Delete an identity by its unique ID.\n     *\n     * @param {string} identityId - Identity ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteIdentity(identityId: string): Promise<{}>;\n    deleteIdentity(\n        paramsOrFirst: { identityId: string } | string    \n    ): Promise<{}> {\n        let params: { identityId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { identityId: string };\n        } else {\n            params = {\n                identityId: paramsOrFirst as string            \n            };\n        }\n        \n        const identityId = params.identityId;\n\n        if (typeof identityId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identityId\"');\n        }\n\n        const apiPath = '/users/identities/{identityId}'.replace('{identityId}', identityId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new user. Password provided must be hashed with the [MD5](https://en.wikipedia.org/wiki/MD5) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} params.userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.email - User email.\n     * @param {string} params.password - User password hashed using MD5.\n     * @param {string} params.name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    createMD5User<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, email: string, password: string, name?: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Create a new user. Password provided must be hashed with the [MD5](https://en.wikipedia.org/wiki/MD5) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} email - User email.\n     * @param {string} password - User password hashed using MD5.\n     * @param {string} name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createMD5User<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, email: string, password: string, name?: string): Promise<Models.User<Preferences>>;\n    createMD5User<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, email: string, password: string, name?: string } | string,\n        ...rest: [(string)?, (string)?, (string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, email: string, password: string, name?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, email: string, password: string, name?: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                email: rest[0] as string,\n                password: rest[1] as string,\n                name: rest[2] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const email = params.email;\n        const password = params.password;\n        const name = params.name;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/users/md5';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new user. Password provided must be hashed with the [PHPass](https://www.openwall.com/phpass/) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} params.userId - User ID. Choose a custom ID or pass the string `ID.unique()`to auto generate it. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.email - User email.\n     * @param {string} params.password - User password hashed using PHPass.\n     * @param {string} params.name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    createPHPassUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, email: string, password: string, name?: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Create a new user. Password provided must be hashed with the [PHPass](https://www.openwall.com/phpass/) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} userId - User ID. Choose a custom ID or pass the string `ID.unique()`to auto generate it. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} email - User email.\n     * @param {string} password - User password hashed using PHPass.\n     * @param {string} name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createPHPassUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, email: string, password: string, name?: string): Promise<Models.User<Preferences>>;\n    createPHPassUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, email: string, password: string, name?: string } | string,\n        ...rest: [(string)?, (string)?, (string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, email: string, password: string, name?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, email: string, password: string, name?: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                email: rest[0] as string,\n                password: rest[1] as string,\n                name: rest[2] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const email = params.email;\n        const password = params.password;\n        const name = params.name;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/users/phpass';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new user. Password provided must be hashed with the [Scrypt](https://github.com/Tarsnap/scrypt) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} params.userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.email - User email.\n     * @param {string} params.password - User password hashed using Scrypt.\n     * @param {string} params.passwordSalt - Optional salt used to hash password.\n     * @param {number} params.passwordCpu - Optional CPU cost used to hash password.\n     * @param {number} params.passwordMemory - Optional memory cost used to hash password.\n     * @param {number} params.passwordParallel - Optional parallelization cost used to hash password.\n     * @param {number} params.passwordLength - Optional hash length used to hash password.\n     * @param {string} params.name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    createScryptUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, email: string, password: string, passwordSalt: string, passwordCpu: number, passwordMemory: number, passwordParallel: number, passwordLength: number, name?: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Create a new user. Password provided must be hashed with the [Scrypt](https://github.com/Tarsnap/scrypt) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} email - User email.\n     * @param {string} password - User password hashed using Scrypt.\n     * @param {string} passwordSalt - Optional salt used to hash password.\n     * @param {number} passwordCpu - Optional CPU cost used to hash password.\n     * @param {number} passwordMemory - Optional memory cost used to hash password.\n     * @param {number} passwordParallel - Optional parallelization cost used to hash password.\n     * @param {number} passwordLength - Optional hash length used to hash password.\n     * @param {string} name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createScryptUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, email: string, password: string, passwordSalt: string, passwordCpu: number, passwordMemory: number, passwordParallel: number, passwordLength: number, name?: string): Promise<Models.User<Preferences>>;\n    createScryptUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, email: string, password: string, passwordSalt: string, passwordCpu: number, passwordMemory: number, passwordParallel: number, passwordLength: number, name?: string } | string,\n        ...rest: [(string)?, (string)?, (string)?, (number)?, (number)?, (number)?, (number)?, (string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, email: string, password: string, passwordSalt: string, passwordCpu: number, passwordMemory: number, passwordParallel: number, passwordLength: number, name?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, email: string, password: string, passwordSalt: string, passwordCpu: number, passwordMemory: number, passwordParallel: number, passwordLength: number, name?: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                email: rest[0] as string,\n                password: rest[1] as string,\n                passwordSalt: rest[2] as string,\n                passwordCpu: rest[3] as number,\n                passwordMemory: rest[4] as number,\n                passwordParallel: rest[5] as number,\n                passwordLength: rest[6] as number,\n                name: rest[7] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const email = params.email;\n        const password = params.password;\n        const passwordSalt = params.passwordSalt;\n        const passwordCpu = params.passwordCpu;\n        const passwordMemory = params.passwordMemory;\n        const passwordParallel = params.passwordParallel;\n        const passwordLength = params.passwordLength;\n        const name = params.name;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof passwordSalt === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSalt\"');\n        }\n        if (typeof passwordCpu === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordCpu\"');\n        }\n        if (typeof passwordMemory === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordMemory\"');\n        }\n        if (typeof passwordParallel === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordParallel\"');\n        }\n        if (typeof passwordLength === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordLength\"');\n        }\n\n        const apiPath = '/users/scrypt';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof passwordSalt !== 'undefined') {\n            payload['passwordSalt'] = passwordSalt;\n        }\n        if (typeof passwordCpu !== 'undefined') {\n            payload['passwordCpu'] = passwordCpu;\n        }\n        if (typeof passwordMemory !== 'undefined') {\n            payload['passwordMemory'] = passwordMemory;\n        }\n        if (typeof passwordParallel !== 'undefined') {\n            payload['passwordParallel'] = passwordParallel;\n        }\n        if (typeof passwordLength !== 'undefined') {\n            payload['passwordLength'] = passwordLength;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new user. Password provided must be hashed with the [Scrypt Modified](https://gist.github.com/Meldiron/eecf84a0225eccb5a378d45bb27462cc) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} params.userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.email - User email.\n     * @param {string} params.password - User password hashed using Scrypt Modified.\n     * @param {string} params.passwordSalt - Salt used to hash password.\n     * @param {string} params.passwordSaltSeparator - Salt separator used to hash password.\n     * @param {string} params.passwordSignerKey - Signer key used to hash password.\n     * @param {string} params.name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    createScryptModifiedUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, email: string, password: string, passwordSalt: string, passwordSaltSeparator: string, passwordSignerKey: string, name?: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Create a new user. Password provided must be hashed with the [Scrypt Modified](https://gist.github.com/Meldiron/eecf84a0225eccb5a378d45bb27462cc) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} email - User email.\n     * @param {string} password - User password hashed using Scrypt Modified.\n     * @param {string} passwordSalt - Salt used to hash password.\n     * @param {string} passwordSaltSeparator - Salt separator used to hash password.\n     * @param {string} passwordSignerKey - Signer key used to hash password.\n     * @param {string} name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createScryptModifiedUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, email: string, password: string, passwordSalt: string, passwordSaltSeparator: string, passwordSignerKey: string, name?: string): Promise<Models.User<Preferences>>;\n    createScryptModifiedUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, email: string, password: string, passwordSalt: string, passwordSaltSeparator: string, passwordSignerKey: string, name?: string } | string,\n        ...rest: [(string)?, (string)?, (string)?, (string)?, (string)?, (string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, email: string, password: string, passwordSalt: string, passwordSaltSeparator: string, passwordSignerKey: string, name?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, email: string, password: string, passwordSalt: string, passwordSaltSeparator: string, passwordSignerKey: string, name?: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                email: rest[0] as string,\n                password: rest[1] as string,\n                passwordSalt: rest[2] as string,\n                passwordSaltSeparator: rest[3] as string,\n                passwordSignerKey: rest[4] as string,\n                name: rest[5] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const email = params.email;\n        const password = params.password;\n        const passwordSalt = params.passwordSalt;\n        const passwordSaltSeparator = params.passwordSaltSeparator;\n        const passwordSignerKey = params.passwordSignerKey;\n        const name = params.name;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof passwordSalt === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSalt\"');\n        }\n        if (typeof passwordSaltSeparator === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSaltSeparator\"');\n        }\n        if (typeof passwordSignerKey === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSignerKey\"');\n        }\n\n        const apiPath = '/users/scrypt-modified';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof passwordSalt !== 'undefined') {\n            payload['passwordSalt'] = passwordSalt;\n        }\n        if (typeof passwordSaltSeparator !== 'undefined') {\n            payload['passwordSaltSeparator'] = passwordSaltSeparator;\n        }\n        if (typeof passwordSignerKey !== 'undefined') {\n            payload['passwordSignerKey'] = passwordSignerKey;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a new user. Password provided must be hashed with the [SHA](https://en.wikipedia.org/wiki/Secure_Hash_Algorithm) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} params.userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} params.email - User email.\n     * @param {string} params.password - User password hashed using SHA.\n     * @param {PasswordHash} params.passwordVersion - Optional SHA version used to hash password. Allowed values are: 'sha1', 'sha224', 'sha256', 'sha384', 'sha512/224', 'sha512/256', 'sha512', 'sha3-224', 'sha3-256', 'sha3-384', 'sha3-512'\n     * @param {string} params.name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    createSHAUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, email: string, password: string, passwordVersion?: PasswordHash, name?: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Create a new user. Password provided must be hashed with the [SHA](https://en.wikipedia.org/wiki/Secure_Hash_Algorithm) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {string} email - User email.\n     * @param {string} password - User password hashed using SHA.\n     * @param {PasswordHash} passwordVersion - Optional SHA version used to hash password. Allowed values are: 'sha1', 'sha224', 'sha256', 'sha384', 'sha512/224', 'sha512/256', 'sha512', 'sha3-224', 'sha3-256', 'sha3-384', 'sha3-512'\n     * @param {string} name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createSHAUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, email: string, password: string, passwordVersion?: PasswordHash, name?: string): Promise<Models.User<Preferences>>;\n    createSHAUser<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, email: string, password: string, passwordVersion?: PasswordHash, name?: string } | string,\n        ...rest: [(string)?, (string)?, (PasswordHash)?, (string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, email: string, password: string, passwordVersion?: PasswordHash, name?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, email: string, password: string, passwordVersion?: PasswordHash, name?: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                email: rest[0] as string,\n                password: rest[1] as string,\n                passwordVersion: rest[2] as PasswordHash,\n                name: rest[3] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const email = params.email;\n        const password = params.password;\n        const passwordVersion = params.passwordVersion;\n        const name = params.name;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/users/sha';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof passwordVersion !== 'undefined') {\n            payload['passwordVersion'] = passwordVersion;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a user by its unique ID.\n     *\n     * @param {string} params.userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    get<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Get a user by its unique ID.\n     *\n     * @param {string} userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    get<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string): Promise<Models.User<Preferences>>;\n    get<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string } | string    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string            \n            };\n        }\n        \n        const userId = params.userId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a user by its unique ID, thereby releasing it's ID. Since ID is released and can be reused, all user-related resources like documents or storage files should be deleted before user deletion. If you want to keep ID reserved, use the [updateStatus](https://appwrite.io/docs/server/users#usersUpdateStatus) endpoint instead.\n     *\n     * @param {string} params.userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    delete(params: { userId: string  }): Promise<{}>;\n    /**\n     * Delete a user by its unique ID, thereby releasing it's ID. Since ID is released and can be reused, all user-related resources like documents or storage files should be deleted before user deletion. If you want to keep ID reserved, use the [updateStatus](https://appwrite.io/docs/server/users#usersUpdateStatus) endpoint instead.\n     *\n     * @param {string} userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    delete(userId: string): Promise<{}>;\n    delete(\n        paramsOrFirst: { userId: string } | string    \n    ): Promise<{}> {\n        let params: { userId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string            \n            };\n        }\n        \n        const userId = params.userId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update the user email by its unique ID.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string} params.email - User email.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updateEmail<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, email: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Update the user email by its unique ID.\n     *\n     * @param {string} userId - User ID.\n     * @param {string} email - User email.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateEmail<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, email: string): Promise<Models.User<Preferences>>;\n    updateEmail<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, email: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, email: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, email: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                email: rest[0] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const email = params.email;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        const apiPath = '/users/{userId}/email'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Use this endpoint to create a JSON Web Token for user by its unique ID. You can use the resulting JWT to authenticate on behalf of the user. The JWT secret will become invalid if the session it uses gets deleted.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string} params.sessionId - Session ID. Use the string 'recent' to use the most recent session. Defaults to the most recent session.\n     * @param {number} params.duration - Time in seconds before JWT expires. Default duration is 900 seconds, and maximum is 3600 seconds.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Jwt>}\n     */\n    createJWT(params: { userId: string, sessionId?: string, duration?: number  }): Promise<Models.Jwt>;\n    /**\n     * Use this endpoint to create a JSON Web Token for user by its unique ID. You can use the resulting JWT to authenticate on behalf of the user. The JWT secret will become invalid if the session it uses gets deleted.\n     *\n     * @param {string} userId - User ID.\n     * @param {string} sessionId - Session ID. Use the string 'recent' to use the most recent session. Defaults to the most recent session.\n     * @param {number} duration - Time in seconds before JWT expires. Default duration is 900 seconds, and maximum is 3600 seconds.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Jwt>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createJWT(userId: string, sessionId?: string, duration?: number): Promise<Models.Jwt>;\n    createJWT(\n        paramsOrFirst: { userId: string, sessionId?: string, duration?: number } | string,\n        ...rest: [(string)?, (number)?]    \n    ): Promise<Models.Jwt> {\n        let params: { userId: string, sessionId?: string, duration?: number };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, sessionId?: string, duration?: number };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                sessionId: rest[0] as string,\n                duration: rest[1] as number            \n            };\n        }\n        \n        const userId = params.userId;\n        const sessionId = params.sessionId;\n        const duration = params.duration;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/jwts'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof sessionId !== 'undefined') {\n            payload['sessionId'] = sessionId;\n        }\n        if (typeof duration !== 'undefined') {\n            payload['duration'] = duration;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update the user labels by its unique ID. \n     * \n     * Labels can be used to grant access to resources. While teams are a way for user's to share access to a resource, labels can be defined by the developer to grant access without an invitation. See the [Permissions docs](https://appwrite.io/docs/permissions) for more info.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string[]} params.labels - Array of user labels. Replaces the previous labels. Maximum of 1000 labels are allowed, each up to 36 alphanumeric characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updateLabels<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, labels: string[]  }): Promise<Models.User<Preferences>>;\n    /**\n     * Update the user labels by its unique ID. \n     * \n     * Labels can be used to grant access to resources. While teams are a way for user's to share access to a resource, labels can be defined by the developer to grant access without an invitation. See the [Permissions docs](https://appwrite.io/docs/permissions) for more info.\n     *\n     * @param {string} userId - User ID.\n     * @param {string[]} labels - Array of user labels. Replaces the previous labels. Maximum of 1000 labels are allowed, each up to 36 alphanumeric characters long.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateLabels<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, labels: string[]): Promise<Models.User<Preferences>>;\n    updateLabels<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, labels: string[] } | string,\n        ...rest: [(string[])?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, labels: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, labels: string[] };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                labels: rest[0] as string[]            \n            };\n        }\n        \n        const userId = params.userId;\n        const labels = params.labels;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof labels === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"labels\"');\n        }\n\n        const apiPath = '/users/{userId}/labels'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof labels !== 'undefined') {\n            payload['labels'] = labels;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the user activity logs list by its unique ID.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     */\n    listLogs(params: { userId: string, queries?: string[]  }): Promise<Models.LogList>;\n    /**\n     * Get the user activity logs list by its unique ID.\n     *\n     * @param {string} userId - User ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Only supported methods are limit and offset\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listLogs(userId: string, queries?: string[]): Promise<Models.LogList>;\n    listLogs(\n        paramsOrFirst: { userId: string, queries?: string[] } | string,\n        ...rest: [(string[])?]    \n    ): Promise<Models.LogList> {\n        let params: { userId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, queries?: string[] };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                queries: rest[0] as string[]            \n            };\n        }\n        \n        const userId = params.userId;\n        const queries = params.queries;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/logs'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the user membership list by its unique ID.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, teamId, invited, joined, confirm, roles\n     * @param {string} params.search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MembershipList>}\n     */\n    listMemberships(params: { userId: string, queries?: string[], search?: string  }): Promise<Models.MembershipList>;\n    /**\n     * Get the user membership list by its unique ID.\n     *\n     * @param {string} userId - User ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, teamId, invited, joined, confirm, roles\n     * @param {string} search - Search term to filter your list results. Max length: 256 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MembershipList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listMemberships(userId: string, queries?: string[], search?: string): Promise<Models.MembershipList>;\n    listMemberships(\n        paramsOrFirst: { userId: string, queries?: string[], search?: string } | string,\n        ...rest: [(string[])?, (string)?]    \n    ): Promise<Models.MembershipList> {\n        let params: { userId: string, queries?: string[], search?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, queries?: string[], search?: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                queries: rest[0] as string[],\n                search: rest[1] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const queries = params.queries;\n        const search = params.search;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/memberships'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Enable or disable MFA on a user account.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {boolean} params.mfa - Enable or disable MFA.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Users.updateMFA` instead.\n     */\n    updateMfa<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, mfa: boolean  }): Promise<Models.User<Preferences>>;\n    /**\n     * Enable or disable MFA on a user account.\n     *\n     * @param {string} userId - User ID.\n     * @param {boolean} mfa - Enable or disable MFA.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateMfa<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, mfa: boolean): Promise<Models.User<Preferences>>;\n    updateMfa<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, mfa: boolean } | string,\n        ...rest: [(boolean)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, mfa: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, mfa: boolean };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                mfa: rest[0] as boolean            \n            };\n        }\n        \n        const userId = params.userId;\n        const mfa = params.mfa;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof mfa === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"mfa\"');\n        }\n\n        const apiPath = '/users/{userId}/mfa'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof mfa !== 'undefined') {\n            payload['mfa'] = mfa;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Enable or disable MFA on a user account.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {boolean} params.mfa - Enable or disable MFA.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updateMFA<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, mfa: boolean  }): Promise<Models.User<Preferences>>;\n    /**\n     * Enable or disable MFA on a user account.\n     *\n     * @param {string} userId - User ID.\n     * @param {boolean} mfa - Enable or disable MFA.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateMFA<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, mfa: boolean): Promise<Models.User<Preferences>>;\n    updateMFA<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, mfa: boolean } | string,\n        ...rest: [(boolean)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, mfa: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, mfa: boolean };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                mfa: rest[0] as boolean            \n            };\n        }\n        \n        const userId = params.userId;\n        const mfa = params.mfa;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof mfa === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"mfa\"');\n        }\n\n        const apiPath = '/users/{userId}/mfa'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof mfa !== 'undefined') {\n            payload['mfa'] = mfa;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete an authenticator app.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {AuthenticatorType} params.type - Type of authenticator.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Users.deleteMFAAuthenticator` instead.\n     */\n    deleteMfaAuthenticator(params: { userId: string, type: AuthenticatorType  }): Promise<{}>;\n    /**\n     * Delete an authenticator app.\n     *\n     * @param {string} userId - User ID.\n     * @param {AuthenticatorType} type - Type of authenticator.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteMfaAuthenticator(userId: string, type: AuthenticatorType): Promise<{}>;\n    deleteMfaAuthenticator(\n        paramsOrFirst: { userId: string, type: AuthenticatorType } | string,\n        ...rest: [(AuthenticatorType)?]    \n    ): Promise<{}> {\n        let params: { userId: string, type: AuthenticatorType };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, type: AuthenticatorType };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                type: rest[0] as AuthenticatorType            \n            };\n        }\n        \n        const userId = params.userId;\n        const type = params.type;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        const apiPath = '/users/{userId}/mfa/authenticators/{type}'.replace('{userId}', userId).replace('{type}', type);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete an authenticator app.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {AuthenticatorType} params.type - Type of authenticator.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteMFAAuthenticator(params: { userId: string, type: AuthenticatorType  }): Promise<{}>;\n    /**\n     * Delete an authenticator app.\n     *\n     * @param {string} userId - User ID.\n     * @param {AuthenticatorType} type - Type of authenticator.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteMFAAuthenticator(userId: string, type: AuthenticatorType): Promise<{}>;\n    deleteMFAAuthenticator(\n        paramsOrFirst: { userId: string, type: AuthenticatorType } | string,\n        ...rest: [(AuthenticatorType)?]    \n    ): Promise<{}> {\n        let params: { userId: string, type: AuthenticatorType };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, type: AuthenticatorType };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                type: rest[0] as AuthenticatorType            \n            };\n        }\n        \n        const userId = params.userId;\n        const type = params.type;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        const apiPath = '/users/{userId}/mfa/authenticators/{type}'.replace('{userId}', userId).replace('{type}', type);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List the factors available on the account to be used as a MFA challange.\n     *\n     * @param {string} params.userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaFactors>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Users.listMFAFactors` instead.\n     */\n    listMfaFactors(params: { userId: string  }): Promise<Models.MfaFactors>;\n    /**\n     * List the factors available on the account to be used as a MFA challange.\n     *\n     * @param {string} userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaFactors>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listMfaFactors(userId: string): Promise<Models.MfaFactors>;\n    listMfaFactors(\n        paramsOrFirst: { userId: string } | string    \n    ): Promise<Models.MfaFactors> {\n        let params: { userId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string            \n            };\n        }\n        \n        const userId = params.userId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/mfa/factors'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List the factors available on the account to be used as a MFA challange.\n     *\n     * @param {string} params.userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaFactors>}\n     */\n    listMFAFactors(params: { userId: string  }): Promise<Models.MfaFactors>;\n    /**\n     * List the factors available on the account to be used as a MFA challange.\n     *\n     * @param {string} userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaFactors>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listMFAFactors(userId: string): Promise<Models.MfaFactors>;\n    listMFAFactors(\n        paramsOrFirst: { userId: string } | string    \n    ): Promise<Models.MfaFactors> {\n        let params: { userId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string            \n            };\n        }\n        \n        const userId = params.userId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/mfa/factors'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get recovery codes that can be used as backup for MFA flow by User ID. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.\n     *\n     * @param {string} params.userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Users.getMFARecoveryCodes` instead.\n     */\n    getMfaRecoveryCodes(params: { userId: string  }): Promise<Models.MfaRecoveryCodes>;\n    /**\n     * Get recovery codes that can be used as backup for MFA flow by User ID. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.\n     *\n     * @param {string} userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getMfaRecoveryCodes(userId: string): Promise<Models.MfaRecoveryCodes>;\n    getMfaRecoveryCodes(\n        paramsOrFirst: { userId: string } | string    \n    ): Promise<Models.MfaRecoveryCodes> {\n        let params: { userId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string            \n            };\n        }\n        \n        const userId = params.userId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get recovery codes that can be used as backup for MFA flow by User ID. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.\n     *\n     * @param {string} params.userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     */\n    getMFARecoveryCodes(params: { userId: string  }): Promise<Models.MfaRecoveryCodes>;\n    /**\n     * Get recovery codes that can be used as backup for MFA flow by User ID. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.\n     *\n     * @param {string} userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getMFARecoveryCodes(userId: string): Promise<Models.MfaRecoveryCodes>;\n    getMFARecoveryCodes(\n        paramsOrFirst: { userId: string } | string    \n    ): Promise<Models.MfaRecoveryCodes> {\n        let params: { userId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string            \n            };\n        }\n        \n        const userId = params.userId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Regenerate recovery codes that can be used as backup for MFA flow by User ID. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.\n     *\n     * @param {string} params.userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Users.updateMFARecoveryCodes` instead.\n     */\n    updateMfaRecoveryCodes(params: { userId: string  }): Promise<Models.MfaRecoveryCodes>;\n    /**\n     * Regenerate recovery codes that can be used as backup for MFA flow by User ID. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.\n     *\n     * @param {string} userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateMfaRecoveryCodes(userId: string): Promise<Models.MfaRecoveryCodes>;\n    updateMfaRecoveryCodes(\n        paramsOrFirst: { userId: string } | string    \n    ): Promise<Models.MfaRecoveryCodes> {\n        let params: { userId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string            \n            };\n        }\n        \n        const userId = params.userId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Regenerate recovery codes that can be used as backup for MFA flow by User ID. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.\n     *\n     * @param {string} params.userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     */\n    updateMFARecoveryCodes(params: { userId: string  }): Promise<Models.MfaRecoveryCodes>;\n    /**\n     * Regenerate recovery codes that can be used as backup for MFA flow by User ID. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.\n     *\n     * @param {string} userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateMFARecoveryCodes(userId: string): Promise<Models.MfaRecoveryCodes>;\n    updateMFARecoveryCodes(\n        paramsOrFirst: { userId: string } | string    \n    ): Promise<Models.MfaRecoveryCodes> {\n        let params: { userId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string            \n            };\n        }\n        \n        const userId = params.userId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Generate recovery codes used as backup for MFA flow for User ID. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method by client SDK.\n     *\n     * @param {string} params.userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     * @deprecated This API has been deprecated since 1.8.0. Please use `Users.createMFARecoveryCodes` instead.\n     */\n    createMfaRecoveryCodes(params: { userId: string  }): Promise<Models.MfaRecoveryCodes>;\n    /**\n     * Generate recovery codes used as backup for MFA flow for User ID. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method by client SDK.\n     *\n     * @param {string} userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createMfaRecoveryCodes(userId: string): Promise<Models.MfaRecoveryCodes>;\n    createMfaRecoveryCodes(\n        paramsOrFirst: { userId: string } | string    \n    ): Promise<Models.MfaRecoveryCodes> {\n        let params: { userId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string            \n            };\n        }\n        \n        const userId = params.userId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Generate recovery codes used as backup for MFA flow for User ID. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method by client SDK.\n     *\n     * @param {string} params.userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     */\n    createMFARecoveryCodes(params: { userId: string  }): Promise<Models.MfaRecoveryCodes>;\n    /**\n     * Generate recovery codes used as backup for MFA flow for User ID. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method by client SDK.\n     *\n     * @param {string} userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createMFARecoveryCodes(userId: string): Promise<Models.MfaRecoveryCodes>;\n    createMFARecoveryCodes(\n        paramsOrFirst: { userId: string } | string    \n    ): Promise<Models.MfaRecoveryCodes> {\n        let params: { userId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string            \n            };\n        }\n        \n        const userId = params.userId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update the user name by its unique ID.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string} params.name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updateName<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, name: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Update the user name by its unique ID.\n     *\n     * @param {string} userId - User ID.\n     * @param {string} name - User name. Max length: 128 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateName<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, name: string): Promise<Models.User<Preferences>>;\n    updateName<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, name: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, name: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, name: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                name: rest[0] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const name = params.name;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        const apiPath = '/users/{userId}/name'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update the user password by its unique ID.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string} params.password - New user password. Must be at least 8 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updatePassword<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, password: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Update the user password by its unique ID.\n     *\n     * @param {string} userId - User ID.\n     * @param {string} password - New user password. Must be at least 8 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePassword<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, password: string): Promise<Models.User<Preferences>>;\n    updatePassword<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, password: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, password: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, password: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                password: rest[0] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const password = params.password;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        const apiPath = '/users/{userId}/password'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update the user phone by its unique ID.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string} params.number - User phone number.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updatePhone<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, number: string  }): Promise<Models.User<Preferences>>;\n    /**\n     * Update the user phone by its unique ID.\n     *\n     * @param {string} userId - User ID.\n     * @param {string} number - User phone number.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePhone<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, number: string): Promise<Models.User<Preferences>>;\n    updatePhone<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, number: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, number: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, number: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                number: rest[0] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const number = params.number;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof number === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"number\"');\n        }\n\n        const apiPath = '/users/{userId}/phone'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof number !== 'undefined') {\n            payload['number'] = number;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the user preferences by its unique ID.\n     *\n     * @param {string} params.userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Preferences>}\n     */\n    getPrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string  }): Promise<Preferences>;\n    /**\n     * Get the user preferences by its unique ID.\n     *\n     * @param {string} userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Preferences>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getPrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string): Promise<Preferences>;\n    getPrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string } | string    \n    ): Promise<Preferences> {\n        let params: { userId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string            \n            };\n        }\n        \n        const userId = params.userId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/prefs'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update the user preferences by its unique ID. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {object} params.prefs - Prefs key-value JSON object.\n     * @throws {AppwriteException}\n     * @returns {Promise<Preferences>}\n     */\n    updatePrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, prefs: object  }): Promise<Preferences>;\n    /**\n     * Update the user preferences by its unique ID. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.\n     *\n     * @param {string} userId - User ID.\n     * @param {object} prefs - Prefs key-value JSON object.\n     * @throws {AppwriteException}\n     * @returns {Promise<Preferences>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, prefs: object): Promise<Preferences>;\n    updatePrefs<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, prefs: object } | string,\n        ...rest: [(object)?]    \n    ): Promise<Preferences> {\n        let params: { userId: string, prefs: object };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, prefs: object };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                prefs: rest[0] as object            \n            };\n        }\n        \n        const userId = params.userId;\n        const prefs = params.prefs;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n\n        const apiPath = '/users/{userId}/prefs'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get the user sessions list by its unique ID.\n     *\n     * @param {string} params.userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.SessionList>}\n     */\n    listSessions(params: { userId: string  }): Promise<Models.SessionList>;\n    /**\n     * Get the user sessions list by its unique ID.\n     *\n     * @param {string} userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.SessionList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listSessions(userId: string): Promise<Models.SessionList>;\n    listSessions(\n        paramsOrFirst: { userId: string } | string    \n    ): Promise<Models.SessionList> {\n        let params: { userId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string            \n            };\n        }\n        \n        const userId = params.userId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/sessions'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Creates a session for a user. Returns an immediately usable session object.\n     * \n     * If you want to generate a token for a custom authentication flow, use the [POST /users/{userId}/tokens](https://appwrite.io/docs/server/users#createToken) endpoint.\n     *\n     * @param {string} params.userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    createSession(params: { userId: string  }): Promise<Models.Session>;\n    /**\n     * Creates a session for a user. Returns an immediately usable session object.\n     * \n     * If you want to generate a token for a custom authentication flow, use the [POST /users/{userId}/tokens](https://appwrite.io/docs/server/users#createToken) endpoint.\n     *\n     * @param {string} userId - User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createSession(userId: string): Promise<Models.Session>;\n    createSession(\n        paramsOrFirst: { userId: string } | string    \n    ): Promise<Models.Session> {\n        let params: { userId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string            \n            };\n        }\n        \n        const userId = params.userId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/sessions'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete all user's sessions by using the user's unique ID.\n     *\n     * @param {string} params.userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteSessions(params: { userId: string  }): Promise<{}>;\n    /**\n     * Delete all user's sessions by using the user's unique ID.\n     *\n     * @param {string} userId - User ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteSessions(userId: string): Promise<{}>;\n    deleteSessions(\n        paramsOrFirst: { userId: string } | string    \n    ): Promise<{}> {\n        let params: { userId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string            \n            };\n        }\n        \n        const userId = params.userId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/sessions'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a user sessions by its unique ID.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string} params.sessionId - Session ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteSession(params: { userId: string, sessionId: string  }): Promise<{}>;\n    /**\n     * Delete a user sessions by its unique ID.\n     *\n     * @param {string} userId - User ID.\n     * @param {string} sessionId - Session ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteSession(userId: string, sessionId: string): Promise<{}>;\n    deleteSession(\n        paramsOrFirst: { userId: string, sessionId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<{}> {\n        let params: { userId: string, sessionId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, sessionId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                sessionId: rest[0] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const sessionId = params.sessionId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n        const apiPath = '/users/{userId}/sessions/{sessionId}'.replace('{userId}', userId).replace('{sessionId}', sessionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update the user status by its unique ID. Use this endpoint as an alternative to deleting a user if you want to keep user's ID reserved.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {boolean} params.status - User Status. To activate the user pass `true` and to block the user pass `false`.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updateStatus<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, status: boolean  }): Promise<Models.User<Preferences>>;\n    /**\n     * Update the user status by its unique ID. Use this endpoint as an alternative to deleting a user if you want to keep user's ID reserved.\n     *\n     * @param {string} userId - User ID.\n     * @param {boolean} status - User Status. To activate the user pass `true` and to block the user pass `false`.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateStatus<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, status: boolean): Promise<Models.User<Preferences>>;\n    updateStatus<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, status: boolean } | string,\n        ...rest: [(boolean)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, status: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, status: boolean };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                status: rest[0] as boolean            \n            };\n        }\n        \n        const userId = params.userId;\n        const status = params.status;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof status === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"status\"');\n        }\n\n        const apiPath = '/users/{userId}/status'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof status !== 'undefined') {\n            payload['status'] = status;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * List the messaging targets that are associated with a user.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string[]} params.queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, providerId, identifier, providerType\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.TargetList>}\n     */\n    listTargets(params: { userId: string, queries?: string[]  }): Promise<Models.TargetList>;\n    /**\n     * List the messaging targets that are associated with a user.\n     *\n     * @param {string} userId - User ID.\n     * @param {string[]} queries - Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, providerId, identifier, providerType\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.TargetList>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    listTargets(userId: string, queries?: string[]): Promise<Models.TargetList>;\n    listTargets(\n        paramsOrFirst: { userId: string, queries?: string[] } | string,\n        ...rest: [(string[])?]    \n    ): Promise<Models.TargetList> {\n        let params: { userId: string, queries?: string[] };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, queries?: string[] };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                queries: rest[0] as string[]            \n            };\n        }\n        \n        const userId = params.userId;\n        const queries = params.queries;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/targets'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Create a messaging target.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string} params.targetId - Target ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {MessagingProviderType} params.providerType - The target provider type. Can be one of the following: `email`, `sms` or `push`.\n     * @param {string} params.identifier - The target identifier (token, email, phone etc.)\n     * @param {string} params.providerId - Provider ID. Message will be sent to this target from the specified provider ID. If no provider ID is set the first setup provider will be used.\n     * @param {string} params.name - Target name. Max length: 128 chars. For example: My Awesome App Galaxy S23.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Target>}\n     */\n    createTarget(params: { userId: string, targetId: string, providerType: MessagingProviderType, identifier: string, providerId?: string, name?: string  }): Promise<Models.Target>;\n    /**\n     * Create a messaging target.\n     *\n     * @param {string} userId - User ID.\n     * @param {string} targetId - Target ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.\n     * @param {MessagingProviderType} providerType - The target provider type. Can be one of the following: `email`, `sms` or `push`.\n     * @param {string} identifier - The target identifier (token, email, phone etc.)\n     * @param {string} providerId - Provider ID. Message will be sent to this target from the specified provider ID. If no provider ID is set the first setup provider will be used.\n     * @param {string} name - Target name. Max length: 128 chars. For example: My Awesome App Galaxy S23.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Target>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createTarget(userId: string, targetId: string, providerType: MessagingProviderType, identifier: string, providerId?: string, name?: string): Promise<Models.Target>;\n    createTarget(\n        paramsOrFirst: { userId: string, targetId: string, providerType: MessagingProviderType, identifier: string, providerId?: string, name?: string } | string,\n        ...rest: [(string)?, (MessagingProviderType)?, (string)?, (string)?, (string)?]    \n    ): Promise<Models.Target> {\n        let params: { userId: string, targetId: string, providerType: MessagingProviderType, identifier: string, providerId?: string, name?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, targetId: string, providerType: MessagingProviderType, identifier: string, providerId?: string, name?: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                targetId: rest[0] as string,\n                providerType: rest[1] as MessagingProviderType,\n                identifier: rest[2] as string,\n                providerId: rest[3] as string,\n                name: rest[4] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const targetId = params.targetId;\n        const providerType = params.providerType;\n        const identifier = params.identifier;\n        const providerId = params.providerId;\n        const name = params.name;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n        if (typeof providerType === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerType\"');\n        }\n        if (typeof identifier === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identifier\"');\n        }\n\n        const apiPath = '/users/{userId}/targets'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof targetId !== 'undefined') {\n            payload['targetId'] = targetId;\n        }\n        if (typeof providerType !== 'undefined') {\n            payload['providerType'] = providerType;\n        }\n        if (typeof identifier !== 'undefined') {\n            payload['identifier'] = identifier;\n        }\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Get a user's push notification target by ID.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string} params.targetId - Target ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Target>}\n     */\n    getTarget(params: { userId: string, targetId: string  }): Promise<Models.Target>;\n    /**\n     * Get a user's push notification target by ID.\n     *\n     * @param {string} userId - User ID.\n     * @param {string} targetId - Target ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Target>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    getTarget(userId: string, targetId: string): Promise<Models.Target>;\n    getTarget(\n        paramsOrFirst: { userId: string, targetId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<Models.Target> {\n        let params: { userId: string, targetId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, targetId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                targetId: rest[0] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const targetId = params.targetId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n        const apiPath = '/users/{userId}/targets/{targetId}'.replace('{userId}', userId).replace('{targetId}', targetId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n        }\n\n        return this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update a messaging target.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string} params.targetId - Target ID.\n     * @param {string} params.identifier - The target identifier (token, email, phone etc.)\n     * @param {string} params.providerId - Provider ID. Message will be sent to this target from the specified provider ID. If no provider ID is set the first setup provider will be used.\n     * @param {string} params.name - Target name. Max length: 128 chars. For example: My Awesome App Galaxy S23.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Target>}\n     */\n    updateTarget(params: { userId: string, targetId: string, identifier?: string, providerId?: string, name?: string  }): Promise<Models.Target>;\n    /**\n     * Update a messaging target.\n     *\n     * @param {string} userId - User ID.\n     * @param {string} targetId - Target ID.\n     * @param {string} identifier - The target identifier (token, email, phone etc.)\n     * @param {string} providerId - Provider ID. Message will be sent to this target from the specified provider ID. If no provider ID is set the first setup provider will be used.\n     * @param {string} name - Target name. Max length: 128 chars. For example: My Awesome App Galaxy S23.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Target>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateTarget(userId: string, targetId: string, identifier?: string, providerId?: string, name?: string): Promise<Models.Target>;\n    updateTarget(\n        paramsOrFirst: { userId: string, targetId: string, identifier?: string, providerId?: string, name?: string } | string,\n        ...rest: [(string)?, (string)?, (string)?, (string)?]    \n    ): Promise<Models.Target> {\n        let params: { userId: string, targetId: string, identifier?: string, providerId?: string, name?: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, targetId: string, identifier?: string, providerId?: string, name?: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                targetId: rest[0] as string,\n                identifier: rest[1] as string,\n                providerId: rest[2] as string,\n                name: rest[3] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const targetId = params.targetId;\n        const identifier = params.identifier;\n        const providerId = params.providerId;\n        const name = params.name;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n        const apiPath = '/users/{userId}/targets/{targetId}'.replace('{userId}', userId).replace('{targetId}', targetId);\n        const payload: Payload = {};\n        if (typeof identifier !== 'undefined') {\n            payload['identifier'] = identifier;\n        }\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Delete a messaging target.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {string} params.targetId - Target ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    deleteTarget(params: { userId: string, targetId: string  }): Promise<{}>;\n    /**\n     * Delete a messaging target.\n     *\n     * @param {string} userId - User ID.\n     * @param {string} targetId - Target ID.\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    deleteTarget(userId: string, targetId: string): Promise<{}>;\n    deleteTarget(\n        paramsOrFirst: { userId: string, targetId: string } | string,\n        ...rest: [(string)?]    \n    ): Promise<{}> {\n        let params: { userId: string, targetId: string };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, targetId: string };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                targetId: rest[0] as string            \n            };\n        }\n        \n        const userId = params.userId;\n        const targetId = params.targetId;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n        const apiPath = '/users/{userId}/targets/{targetId}'.replace('{userId}', userId).replace('{targetId}', targetId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Returns a token with a secret key for creating a session. Use the user ID and secret and submit a request to the [PUT /account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process.\n     * \n     *\n     * @param {string} params.userId - User ID.\n     * @param {number} params.length - Token length in characters. The default length is 6 characters\n     * @param {number} params.expire - Token expiration period in seconds. The default expiration is 15 minutes.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    createToken(params: { userId: string, length?: number, expire?: number  }): Promise<Models.Token>;\n    /**\n     * Returns a token with a secret key for creating a session. Use the user ID and secret and submit a request to the [PUT /account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process.\n     * \n     *\n     * @param {string} userId - User ID.\n     * @param {number} length - Token length in characters. The default length is 6 characters\n     * @param {number} expire - Token expiration period in seconds. The default expiration is 15 minutes.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    createToken(userId: string, length?: number, expire?: number): Promise<Models.Token>;\n    createToken(\n        paramsOrFirst: { userId: string, length?: number, expire?: number } | string,\n        ...rest: [(number)?, (number)?]    \n    ): Promise<Models.Token> {\n        let params: { userId: string, length?: number, expire?: number };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, length?: number, expire?: number };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                length: rest[0] as number,\n                expire: rest[1] as number            \n            };\n        }\n        \n        const userId = params.userId;\n        const length = params.length;\n        const expire = params.expire;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        const apiPath = '/users/{userId}/tokens'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof length !== 'undefined') {\n            payload['length'] = length;\n        }\n        if (typeof expire !== 'undefined') {\n            payload['expire'] = expire;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update the user email verification status by its unique ID.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {boolean} params.emailVerification - User email verification status.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updateEmailVerification<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, emailVerification: boolean  }): Promise<Models.User<Preferences>>;\n    /**\n     * Update the user email verification status by its unique ID.\n     *\n     * @param {string} userId - User ID.\n     * @param {boolean} emailVerification - User email verification status.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updateEmailVerification<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, emailVerification: boolean): Promise<Models.User<Preferences>>;\n    updateEmailVerification<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, emailVerification: boolean } | string,\n        ...rest: [(boolean)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, emailVerification: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, emailVerification: boolean };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                emailVerification: rest[0] as boolean            \n            };\n        }\n        \n        const userId = params.userId;\n        const emailVerification = params.emailVerification;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof emailVerification === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"emailVerification\"');\n        }\n\n        const apiPath = '/users/{userId}/verification'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof emailVerification !== 'undefined') {\n            payload['emailVerification'] = emailVerification;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n\n    /**\n     * Update the user phone verification status by its unique ID.\n     *\n     * @param {string} params.userId - User ID.\n     * @param {boolean} params.phoneVerification - User phone verification status.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    updatePhoneVerification<Preferences extends Models.Preferences = Models.DefaultPreferences>(params: { userId: string, phoneVerification: boolean  }): Promise<Models.User<Preferences>>;\n    /**\n     * Update the user phone verification status by its unique ID.\n     *\n     * @param {string} userId - User ID.\n     * @param {boolean} phoneVerification - User phone verification status.\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     * @deprecated Use the object parameter style method for a better developer experience.\n     */\n    updatePhoneVerification<Preferences extends Models.Preferences = Models.DefaultPreferences>(userId: string, phoneVerification: boolean): Promise<Models.User<Preferences>>;\n    updatePhoneVerification<Preferences extends Models.Preferences = Models.DefaultPreferences>(\n        paramsOrFirst: { userId: string, phoneVerification: boolean } | string,\n        ...rest: [(boolean)?]    \n    ): Promise<Models.User<Preferences>> {\n        let params: { userId: string, phoneVerification: boolean };\n        \n        if ((paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst))) {\n            params = (paramsOrFirst || {}) as { userId: string, phoneVerification: boolean };\n        } else {\n            params = {\n                userId: paramsOrFirst as string,\n                phoneVerification: rest[0] as boolean            \n            };\n        }\n        \n        const userId = params.userId;\n        const phoneVerification = params.phoneVerification;\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof phoneVerification === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phoneVerification\"');\n        }\n\n        const apiPath = '/users/{userId}/verification/phone'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof phoneVerification !== 'undefined') {\n            payload['phoneVerification'] = phoneVerification;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n", "/**\n * Helper class to generate permission strings for resources.\n */\nexport class Permission {\n    /**\n     * Generate read permission string for the provided role.\n     *\n     * @param {string} role\n     * @returns {string}\n     */\n    static read = (role: string): string => {\n        return `read(\"${role}\")`;\n    }\n\n    /**\n     * Generate write permission string for the provided role.\n     *\n     * This is an alias of update, delete, and possibly create.\n     * Don't use write in combination with update, delete, or create.\n     *\n     * @param {string} role\n     * @returns {string}\n     */\n    static write = (role: string): string => {\n        return `write(\"${role}\")`;\n    }\n\n    /**\n     * Generate create permission string for the provided role.\n     *\n     * @param {string} role\n     * @returns {string}\n     */\n    static create = (role: string): string => {\n        return `create(\"${role}\")`;\n    }\n\n    /**\n     * Generate update permission string for the provided role.\n     *\n     * @param {string} role\n     * @returns {string}\n     */\n    static update = (role: string): string => {\n        return `update(\"${role}\")`;\n    }\n\n    /**\n     * Generate delete permission string for the provided role.\n     *\n     * @param {string} role\n     * @returns {string}\n     */\n    static delete = (role: string): string => {\n        return `delete(\"${role}\")`;\n    }\n}\n", "/**\n * Helper class to generate role strings for `Permission`.\n */\nexport class Role {\n\n    /**\n     * Grants access to anyone.\n     * \n     * This includes authenticated and unauthenticated users.\n     * \n     * @returns {string}\n     */\n    public static any(): string {\n        return 'any'\n    }\n\n    /**\n     * Grants access to a specific user by user ID.\n     * \n     * You can optionally pass verified or unverified for\n     * `status` to target specific types of users.\n     *\n     * @param {string} id \n     * @param {string} status \n     * @returns {string}\n     */\n    public static user(id: string, status: string = ''): string {\n        if (status === '') {\n            return `user:${id}`\n        }\n        return `user:${id}/${status}`\n    }\n\n    /**\n     * Grants access to any authenticated or anonymous user.\n     * \n     * You can optionally pass verified or unverified for\n     * `status` to target specific types of users.\n     * \n     * @param {string} status \n     * @returns {string}\n     */\n    public static users(status: string = ''): string {\n        if (status === '') {\n            return 'users'\n        }\n        return `users/${status}`\n    }\n\n    /**\n     * Grants access to any guest user without a session.\n     * \n     * Authenticated users don't have access to this role.\n     * \n     * @returns {string}\n     */\n    public static guests(): string {\n        return 'guests'\n    }\n\n    /**\n     * Grants access to a team by team ID.\n     * \n     * You can optionally pass a role for `role` to target\n     * team members with the specified role.\n     * \n     * @param {string} id \n     * @param {string} role \n     * @returns {string}\n     */\n    public static team(id: string, role: string = ''): string {\n        if (role === '') {\n            return `team:${id}`\n        }\n        return `team:${id}/${role}`\n    }\n\n    /**\n     * Grants access to a specific member of a team.\n     * \n     * When the member is removed from the team, they will\n     * no longer have access.\n     * \n     * @param {string} id \n     * @returns {string}\n     */\n    public static member(id: string): string {\n        return `member:${id}`\n    }\n\n    /**\n     * Grants access to a user with the specified label.\n     * \n     * @param {string} name \n     * @returns  {string}\n     */\n    public static label(name: string): string {\n        return `label:${name}`\n    }\n}", "/**\n * Helper class to generate ID strings for resources.\n */\nexport class ID {\n    /**\n     * Generate an hex ID based on timestamp.\n     * Recreated from https://www.php.net/manual/en/function.uniqid.php\n     *\n     * @returns {string}\n     */\n    static #hexTimestamp(): string {\n        const now = new Date();\n        const sec = Math.floor(now.getTime() / 1000);\n        const msec = now.getMilliseconds();\n\n        // Convert to hexadecimal\n        const hexTimestamp = sec.toString(16) + msec.toString(16).padStart(5, '0');\n        return hexTimestamp;\n    }\n\n    /**\n     * Uses the provided ID as the ID for the resource.\n     *\n     * @param {string} id\n     * @returns {string}\n     */\n    public static custom(id: string): string {\n        return id\n    }\n\n    /**\n     * Have Appwrite generate a unique ID for you.\n     * \n     * @param {number} padding. Default is 7.\n     * @returns {string}\n     */\n    public static unique(padding: number = 7): string {\n        // Generate a unique ID with padding to have a longer ID\n        const baseId = ID.#hexTimestamp();\n        let randomPadding = '';\n        for (let i = 0; i < padding; i++) {\n            const randomHexDigit = Math.floor(Math.random() * 16).toString(16);\n            randomPadding += randomHexDigit;\n        }\n        return baseId + randomPadding;\n    }\n}\n", "export enum AuthenticatorType {\n    Totp = 'totp',\n}", "export enum AuthenticationFactor {\n    Email = 'email',\n    Phone = 'phone',\n    Totp = 'totp',\n    Recoverycode = 'recoverycode',\n}", "export enum OAuthProvider {\n    Amazon = 'amazon',\n    Apple = 'apple',\n    Auth0 = 'auth0',\n    Authentik = 'authentik',\n    Autodesk = 'autodesk',\n    Bitbucket = 'bitbucket',\n    Bitly = 'bitly',\n    Box = 'box',\n    Dailymotion = 'dailymotion',\n    Discord = 'discord',\n    Disqus = 'disqus',\n    Dropbox = 'dropbox',\n    Etsy = 'etsy',\n    Facebook = 'facebook',\n    Figma = 'figma',\n    Github = 'github',\n    Gitlab = 'gitlab',\n    Google = 'google',\n    Linkedin = 'linkedin',\n    Microsoft = 'microsoft',\n    Notion = 'notion',\n    Oidc = 'oidc',\n    Okta = 'okta',\n    Paypal = 'paypal',\n    PaypalSandbox = 'paypalSandbox',\n    Podio = 'podio',\n    Salesforce = 'salesforce',\n    Slack = 'slack',\n    Spotify = 'spotify',\n    Stripe = 'stripe',\n    Tradeshift = 'tradeshift',\n    TradeshiftBox = 'tradeshiftBox',\n    Twitch = 'twitch',\n    Wordpress = 'wordpress',\n    Yahoo = 'yahoo',\n    Yammer = 'yammer',\n    Yandex = 'yandex',\n    Zoho = 'zoho',\n    Zoom = 'zoom',\n    Mock = 'mock',\n}", "export enum Browser {\n    AvantBrowser = 'aa',\n    AndroidWebViewBeta = 'an',\n    GoogleChrome = 'ch',\n    GoogleChromeIOS = 'ci',\n    GoogleChromeMobile = 'cm',\n    Chromium = 'cr',\n    MozillaFirefox = 'ff',\n    Safari = 'sf',\n    MobileSafari = 'mf',\n    MicrosoftEdge = 'ps',\n    MicrosoftEdgeIOS = 'oi',\n    OperaMini = 'om',\n    Opera = 'op',\n    OperaNext = 'on',\n}", "export enum CreditCard {\n    AmericanExpress = 'amex',\n    Argencard = 'argencard',\n    Cabal = 'cabal',\n    Cencosud = 'cencosud',\n    DinersClub = 'diners',\n    Discover = 'discover',\n    Elo = 'elo',\n    Hipercard = 'hipercard',\n    JCB = 'jcb',\n    Mastercard = 'mastercard',\n    Naranja = 'naranja',\n    TarjetaShopping = 'targeta-shopping',\n    UnionPay = 'unionpay',\n    Visa = 'visa',\n    MIR = 'mir',\n    Maestro = 'maestro',\n    Rupay = 'rupay',\n}", "export enum Flag {\n    Afghanistan = 'af',\n    Angola = 'ao',\n    Albania = 'al',\n    Andorra = 'ad',\n    UnitedArabEmirates = 'ae',\n    Argentina = 'ar',\n    Armenia = 'am',\n    AntiguaAndBarbuda = 'ag',\n    Australia = 'au',\n    Austria = 'at',\n    Azerbaijan = 'az',\n    Burundi = 'bi',\n    Belgium = 'be',\n    Benin = 'bj',\n    BurkinaFaso = 'bf',\n    Bangladesh = 'bd',\n    Bulgaria = 'bg',\n    Bahrain = 'bh',\n    Bahamas = 'bs',\n    BosniaAndHerzegovina = 'ba',\n    Belarus = 'by',\n    Belize = 'bz',\n    Bolivia = 'bo',\n    Brazil = 'br',\n    Barbados = 'bb',\n    BruneiDarussalam = 'bn',\n    Bhutan = 'bt',\n    Botswana = 'bw',\n    CentralAfricanRepublic = 'cf',\n    Canada = 'ca',\n    Switzerland = 'ch',\n    Chile = 'cl',\n    China = 'cn',\n    CoteDIvoire = 'ci',\n    Cameroon = 'cm',\n    DemocraticRepublicOfTheCongo = 'cd',\n    RepublicOfTheCongo = 'cg',\n    Colombia = 'co',\n    Comoros = 'km',\n    CapeVerde = 'cv',\n    CostaRica = 'cr',\n    Cuba = 'cu',\n    Cyprus = 'cy',\n    CzechRepublic = 'cz',\n    Germany = 'de',\n    Djibouti = 'dj',\n    Dominica = 'dm',\n    Denmark = 'dk',\n    DominicanRepublic = 'do',\n    Algeria = 'dz',\n    Ecuador = 'ec',\n    Egypt = 'eg',\n    Eritrea = 'er',\n    Spain = 'es',\n    Estonia = 'ee',\n    Ethiopia = 'et',\n    Finland = 'fi',\n    Fiji = 'fj',\n    France = 'fr',\n    MicronesiaFederatedStatesOf = 'fm',\n    Gabon = 'ga',\n    UnitedKingdom = 'gb',\n    Georgia = 'ge',\n    Ghana = 'gh',\n    Guinea = 'gn',\n    Gambia = 'gm',\n    GuineaBissau = 'gw',\n    EquatorialGuinea = 'gq',\n    Greece = 'gr',\n    Grenada = 'gd',\n    Guatemala = 'gt',\n    Guyana = 'gy',\n    Honduras = 'hn',\n    Croatia = 'hr',\n    Haiti = 'ht',\n    Hungary = 'hu',\n    Indonesia = 'id',\n    India = 'in',\n    Ireland = 'ie',\n    IranIslamicRepublicOf = 'ir',\n    Iraq = 'iq',\n    Iceland = 'is',\n    Israel = 'il',\n    Italy = 'it',\n    Jamaica = 'jm',\n    Jordan = 'jo',\n    Japan = 'jp',\n    Kazakhstan = 'kz',\n    Kenya = 'ke',\n    Kyrgyzstan = 'kg',\n    Cambodia = 'kh',\n    Kiribati = 'ki',\n    SaintKittsAndNevis = 'kn',\n    SouthKorea = 'kr',\n    Kuwait = 'kw',\n    LaoPeopleSDemocraticRepublic = 'la',\n    Lebanon = 'lb',\n    Liberia = 'lr',\n    Libya = 'ly',\n    SaintLucia = 'lc',\n    Liechtenstein = 'li',\n    SriLanka = 'lk',\n    Lesotho = 'ls',\n    Lithuania = 'lt',\n    Luxembourg = 'lu',\n    Latvia = 'lv',\n    Morocco = 'ma',\n    Monaco = 'mc',\n    Moldova = 'md',\n    Madagascar = 'mg',\n    Maldives = 'mv',\n    Mexico = 'mx',\n    MarshallIslands = 'mh',\n    NorthMacedonia = 'mk',\n    Mali = 'ml',\n    Malta = 'mt',\n    Myanmar = 'mm',\n    Montenegro = 'me',\n    Mongolia = 'mn',\n    Mozambique = 'mz',\n    Mauritania = 'mr',\n    Mauritius = 'mu',\n    Malawi = 'mw',\n    Malaysia = 'my',\n    Namibia = 'na',\n    Niger = 'ne',\n    Nigeria = 'ng',\n    Nicaragua = 'ni',\n    Netherlands = 'nl',\n    Norway = 'no',\n    Nepal = 'np',\n    Nauru = 'nr',\n    NewZealand = 'nz',\n    Oman = 'om',\n    Pakistan = 'pk',\n    Panama = 'pa',\n    Peru = 'pe',\n    Philippines = 'ph',\n    Palau = 'pw',\n    PapuaNewGuinea = 'pg',\n    Poland = 'pl',\n    FrenchPolynesia = 'pf',\n    NorthKorea = 'kp',\n    Portugal = 'pt',\n    Paraguay = 'py',\n    Qatar = 'qa',\n    Romania = 'ro',\n    Russia = 'ru',\n    Rwanda = 'rw',\n    SaudiArabia = 'sa',\n    Sudan = 'sd',\n    Senegal = 'sn',\n    Singapore = 'sg',\n    SolomonIslands = 'sb',\n    SierraLeone = 'sl',\n    ElSalvador = 'sv',\n    SanMarino = 'sm',\n    Somalia = 'so',\n    Serbia = 'rs',\n    SouthSudan = 'ss',\n    SaoTomeAndPrincipe = 'st',\n    Suriname = 'sr',\n    Slovakia = 'sk',\n    Slovenia = 'si',\n    Sweden = 'se',\n    Eswatini = 'sz',\n    Seychelles = 'sc',\n    Syria = 'sy',\n    Chad = 'td',\n    Togo = 'tg',\n    Thailand = 'th',\n    Tajikistan = 'tj',\n    Turkmenistan = 'tm',\n    TimorLeste = 'tl',\n    Tonga = 'to',\n    TrinidadAndTobago = 'tt',\n    Tunisia = 'tn',\n    Turkey = 'tr',\n    Tuvalu = 'tv',\n    Tanzania = 'tz',\n    Uganda = 'ug',\n    Ukraine = 'ua',\n    Uruguay = 'uy',\n    UnitedStates = 'us',\n    Uzbekistan = 'uz',\n    VaticanCity = 'va',\n    SaintVincentAndTheGrenadines = 'vc',\n    Venezuela = 've',\n    Vietnam = 'vn',\n    Vanuatu = 'vu',\n    Samoa = 'ws',\n    Yemen = 'ye',\n    SouthAfrica = 'za',\n    Zambia = 'zm',\n    Zimbabwe = 'zw',\n}", "export enum RelationshipType {\n    OneToOne = 'oneToOne',\n    ManyToOne = 'manyToOne',\n    ManyToMany = 'manyToMany',\n    OneToMany = 'oneToMany',\n}", "export enum RelationMutate {\n    Cascade = 'cascade',\n    Restrict = 'restrict',\n    SetNull = 'setNull',\n}", "export enum IndexType {\n    Key = 'key',\n    Fulltext = 'fulltext',\n    Unique = 'unique',\n    Spatial = 'spatial',\n}", "export enum Runtime {\n    Node145 = 'node-14.5',\n    Node160 = 'node-16.0',\n    Node180 = 'node-18.0',\n    Node190 = 'node-19.0',\n    Node200 = 'node-20.0',\n    Node210 = 'node-21.0',\n    Node22 = 'node-22',\n    Php80 = 'php-8.0',\n    Php81 = 'php-8.1',\n    Php82 = 'php-8.2',\n    Php83 = 'php-8.3',\n    Ruby30 = 'ruby-3.0',\n    Ruby31 = 'ruby-3.1',\n    Ruby32 = 'ruby-3.2',\n    Ruby33 = 'ruby-3.3',\n    Python38 = 'python-3.8',\n    Python39 = 'python-3.9',\n    Python310 = 'python-3.10',\n    Python311 = 'python-3.11',\n    Python312 = 'python-3.12',\n    Pythonml311 = 'python-ml-3.11',\n    Pythonml312 = 'python-ml-3.12',\n    Deno121 = 'deno-1.21',\n    Deno124 = 'deno-1.24',\n    Deno135 = 'deno-1.35',\n    Deno140 = 'deno-1.40',\n    Deno146 = 'deno-1.46',\n    Deno20 = 'deno-2.0',\n    Dart215 = 'dart-2.15',\n    Dart216 = 'dart-2.16',\n    Dart217 = 'dart-2.17',\n    Dart218 = 'dart-2.18',\n    Dart219 = 'dart-2.19',\n    Dart30 = 'dart-3.0',\n    Dart31 = 'dart-3.1',\n    Dart33 = 'dart-3.3',\n    Dart35 = 'dart-3.5',\n    Dart38 = 'dart-3.8',\n    Dotnet60 = 'dotnet-6.0',\n    Dotnet70 = 'dotnet-7.0',\n    Dotnet80 = 'dotnet-8.0',\n    Java80 = 'java-8.0',\n    Java110 = 'java-11.0',\n    Java170 = 'java-17.0',\n    Java180 = 'java-18.0',\n    Java210 = 'java-21.0',\n    Java22 = 'java-22',\n    Swift55 = 'swift-5.5',\n    Swift58 = 'swift-5.8',\n    Swift59 = 'swift-5.9',\n    Swift510 = 'swift-5.10',\n    Kotlin16 = 'kotlin-1.6',\n    Kotlin18 = 'kotlin-1.8',\n    Kotlin19 = 'kotlin-1.9',\n    Kotlin20 = 'kotlin-2.0',\n    Cpp17 = 'cpp-17',\n    Cpp20 = 'cpp-20',\n    Bun10 = 'bun-1.0',\n    Bun11 = 'bun-1.1',\n    Go123 = 'go-1.23',\n    Static1 = 'static-1',\n    Flutter324 = 'flutter-3.24',\n    Flutter327 = 'flutter-3.27',\n    Flutter329 = 'flutter-3.29',\n    Flutter332 = 'flutter-3.32',\n}", "export enum VCSDeploymentType {\n    Branch = 'branch',\n    Commit = 'commit',\n    Tag = 'tag',\n}", "export enum DeploymentDownloadType {\n    Source = 'source',\n    Output = 'output',\n}", "export enum ExecutionMethod {\n    GET = 'GET',\n    POST = 'POST',\n    PUT = 'PUT',\n    PATCH = 'PATCH',\n    DELETE = 'DELETE',\n    OPTIONS = 'OPTIONS',\n    HEAD = 'HEAD',\n}", "export enum Name {\n    V1database = 'v1-database',\n    V1deletes = 'v1-deletes',\n    V1audits = 'v1-audits',\n    V1mails = 'v1-mails',\n    V1functions = 'v1-functions',\n    V1statsresources = 'v1-stats-resources',\n    V1statsusage = 'v1-stats-usage',\n    V1webhooks = 'v1-webhooks',\n    V1certificates = 'v1-certificates',\n    V1builds = 'v1-builds',\n    V1messaging = 'v1-messaging',\n    V1migrations = 'v1-migrations',\n}", "export enum MessagePriority {\n    Normal = 'normal',\n    High = 'high',\n}", "export enum SmtpEncryption {\n    None = 'none',\n    Ssl = 'ssl',\n    Tls = 'tls',\n}", "export enum Framework {\n    Analog = 'analog',\n    Angular = 'angular',\n    Nextjs = 'nextjs',\n    React = 'react',\n    Nuxt = 'nuxt',\n    Vue = 'vue',\n    Sveltekit = 'sveltekit',\n    Astro = 'astro',\n    Remix = 'remix',\n    Lynx = 'lynx',\n    Flutter = 'flutter',\n    Reactnative = 'react-native',\n    Vite = 'vite',\n    Other = 'other',\n}", "export enum BuildRuntime {\n    Node145 = 'node-14.5',\n    Node160 = 'node-16.0',\n    Node180 = 'node-18.0',\n    Node190 = 'node-19.0',\n    Node200 = 'node-20.0',\n    Node210 = 'node-21.0',\n    Node22 = 'node-22',\n    Php80 = 'php-8.0',\n    Php81 = 'php-8.1',\n    Php82 = 'php-8.2',\n    Php83 = 'php-8.3',\n    Ruby30 = 'ruby-3.0',\n    Ruby31 = 'ruby-3.1',\n    Ruby32 = 'ruby-3.2',\n    Ruby33 = 'ruby-3.3',\n    Python38 = 'python-3.8',\n    Python39 = 'python-3.9',\n    Python310 = 'python-3.10',\n    Python311 = 'python-3.11',\n    Python312 = 'python-3.12',\n    Pythonml311 = 'python-ml-3.11',\n    Pythonml312 = 'python-ml-3.12',\n    Deno121 = 'deno-1.21',\n    Deno124 = 'deno-1.24',\n    Deno135 = 'deno-1.35',\n    Deno140 = 'deno-1.40',\n    Deno146 = 'deno-1.46',\n    Deno20 = 'deno-2.0',\n    Dart215 = 'dart-2.15',\n    Dart216 = 'dart-2.16',\n    Dart217 = 'dart-2.17',\n    Dart218 = 'dart-2.18',\n    Dart219 = 'dart-2.19',\n    Dart30 = 'dart-3.0',\n    Dart31 = 'dart-3.1',\n    Dart33 = 'dart-3.3',\n    Dart35 = 'dart-3.5',\n    Dart38 = 'dart-3.8',\n    Dotnet60 = 'dotnet-6.0',\n    Dotnet70 = 'dotnet-7.0',\n    Dotnet80 = 'dotnet-8.0',\n    Java80 = 'java-8.0',\n    Java110 = 'java-11.0',\n    Java170 = 'java-17.0',\n    Java180 = 'java-18.0',\n    Java210 = 'java-21.0',\n    Java22 = 'java-22',\n    Swift55 = 'swift-5.5',\n    Swift58 = 'swift-5.8',\n    Swift59 = 'swift-5.9',\n    Swift510 = 'swift-5.10',\n    Kotlin16 = 'kotlin-1.6',\n    Kotlin18 = 'kotlin-1.8',\n    Kotlin19 = 'kotlin-1.9',\n    Kotlin20 = 'kotlin-2.0',\n    Cpp17 = 'cpp-17',\n    Cpp20 = 'cpp-20',\n    Bun10 = 'bun-1.0',\n    Bun11 = 'bun-1.1',\n    Go123 = 'go-1.23',\n    Static1 = 'static-1',\n    Flutter324 = 'flutter-3.24',\n    Flutter327 = 'flutter-3.27',\n    Flutter329 = 'flutter-3.29',\n    Flutter332 = 'flutter-3.32',\n}", "export enum Adapter {\n    Static = 'static',\n    Ssr = 'ssr',\n}", "export enum Compression {\n    None = 'none',\n    Gzip = 'gzip',\n    Zstd = 'zstd',\n}", "export enum ImageGravity {\n    Center = 'center',\n    Topleft = 'top-left',\n    Top = 'top',\n    Topright = 'top-right',\n    Left = 'left',\n    Right = 'right',\n    Bottomleft = 'bottom-left',\n    Bottom = 'bottom',\n    Bottomright = 'bottom-right',\n}", "export enum ImageFormat {\n    Jpg = 'jpg',\n    Jpeg = 'jpeg',\n    Png = 'png',\n    Webp = 'webp',\n    Heic = 'heic',\n    Avif = 'avif',\n    Gif = 'gif',\n}", "export enum PasswordHash {\n    Sha1 = 'sha1',\n    Sha224 = 'sha224',\n    Sha256 = 'sha256',\n    Sha384 = 'sha384',\n    Sha512224 = 'sha512/224',\n    Sha512256 = 'sha512/256',\n    Sha512 = 'sha512',\n    Sha3224 = 'sha3-224',\n    Sha3256 = 'sha3-256',\n    Sha3384 = 'sha3-384',\n    Sha3512 = 'sha3-512',\n}", "export enum MessagingProviderType {\n    Email = 'email',\n    Sms = 'sms',\n    Push = 'push',\n}"],
  "mappings": "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",
  "names": ["o", "e", "t", "i", "a", "h", "_Query", "_Client", "a", "_a", "_a", "i", "AuthenticatorType", "AuthenticationFactor", "OAuthProvider", "Browser", "CreditCard", "Flag", "RelationshipType", "RelationMutate", "IndexType", "Runtime", "VCSDeploymentType", "DeploymentDownloadType", "ExecutionMethod", "Name", "MessagePriority", "SmtpEncryption", "Framework", "BuildRuntime", "Adapter", "Compression", "ImageGravity", "ImageFormat", "PasswordHash", "MessagingProviderType"]
}
