var I=Object.defineProperty;var g=(u,t,e)=>t in u?I(u,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):u[t]=e;var m=(u,t,e)=>g(u,typeof t!="symbol"?t+"":t,e);import{D as A,A as f,I as d,Q as i,C as w}from"./zxdJXzVg.js";const n={DJAMMS_USERS:"djamms_users",PLAYER_INSTANCES:"player_instances",PLAYLISTS:"playlists",ACTIVE_QUEUES:"active_queues",USER_ACTIVITY:"user_activity"};class v{constructor(t,e){m(this,"client");m(this,"databases");m(this,"account");m(this,"databaseId");this.client=t,this.databases=new A(t),this.account=new f(t),this.databaseId=e}async ensureUserInDJAMMS(){try{const t=await this.account.get();let e=null;try{e=await this.getUser(t.$id)}catch(a){if(a.code!==404)throw a}return e?await this.updateUser(t.$id,{lastLoginAt:new Date().toISOString(),isActive:!0}):await this.createUserFromAuth(t)}catch(t){throw console.error("Failed to ensure user in DJAMMS:",t),t}}async createUserFromAuth(t){var c,S,l;const e=this.determineUserRole(t.email),a=this.shouldAutoApprove(t);let s=(c=t.prefs)==null?void 0:c.venue_id;s||(s=`venue-${Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}`,console.log("DJAMMS: createUserFromAuth - generating venue_id:",s)),t.email,t.name||t.email.split("@")[0],(S=t.prefs)!=null&&S.avatar||`${t.email}`;const r={email:t.email,name:t.name||t.email.split("@")[0],avatar:((l=t.prefs)==null?void 0:l.avatar)||`https://api.dicebear.com/7.x/avataaars/svg?seed=${t.email}`,venue_id:s,userRole:e,devApproved:a,isActive:!0,createdAt:t.$createdAt||new Date().toISOString(),lastLoginAt:new Date().toISOString()},o=await this.databases.createDocument(this.databaseId,n.DJAMMS_USERS,t.$id,r);return console.log(`✅ Created DJAMMS user: ${t.email} (role: ${e}, approved: ${a})`),o}async updateUser(t,e){return await this.databases.updateDocument(this.databaseId,n.DJAMMS_USERS,t,e)}determineUserRole(t){const e=["admin@djamms.app","admin@systemvirtue.com"],a=["dev@djamms.app","developer@djamms.app","dev@systemvirtue.com","djammsdemo@gmail.com"],s=["@djamms.app"];if(e.includes(t.toLowerCase()))return"admin";if(a.includes(t.toLowerCase()))return"developer";for(const r of s)if(t.toLowerCase().includes(r))return"admin";return"user"}shouldAutoApprove(t){const e=this.determineUserRole(t.email);if(e==="admin"||e==="developer"||t.emailVerification)return!0;const a=["@djamms.com","@gmail.com","@outlook.com","@yahoo.com","@hotmail.com"];for(const s of a)if(t.email.toLowerCase().includes(s))return!0;return!1}async createUser(t){const e={email:t.email,name:t.name,avatar:t.avatar,devApproved:!1,userRole:t.userRole||"user",isActive:!0,createdAt:new Date().toISOString(),lastLoginAt:new Date().toISOString()};return await this.databases.createDocument(this.databaseId,n.DJAMMS_USERS,d.unique(),e)}async getUser(t){try{return await this.databases.getDocument(this.databaseId,n.DJAMMS_USERS,t)}catch(e){if(e.code===404)return null;throw e}}async approveUser(t){return await this.databases.updateDocument(this.databaseId,n.DJAMMS_USERS,t,{devApproved:!0,lastLoginAt:new Date().toISOString()})}async getOrCreatePlayerInstance(t,e="player"){const a=await this.getUser(t);if(!(a!=null&&a.devApproved))throw new Error("User not approved for player access");try{const l=await this.databases.listDocuments(this.databaseId,n.PLAYER_INSTANCES,[i.equal("userId",t),i.equal("instanceType",e),i.equal("isActive",!0),i.limit(1)]);if(l.documents.length>0){const y=l.documents[0];return await this.updateInstanceActivity(y.$id)}}catch{console.log("No existing instance found, creating new one...")}const s=`play-${t}-${Date.now()}`,r={isPlaying:!1,isPaused:!1,currentVideoId:null,currentTitle:null,currentChannelTitle:null,currentThumbnail:null,currentPosition:0,totalDuration:0,volume:80,playerStatus:"ready"},o={autoplay:!0,shuffle:!1,repeat:"off",defaultVolume:80,showNotifications:!0,darkMode:!0,kioskMode:e==="kiosk"},c={userId:t,instanceId:s,instanceType:e,isActive:!0,playerState:JSON.stringify(r),settings:JSON.stringify(o),createdAt:new Date().toISOString(),lastActiveAt:new Date().toISOString(),lastUpdated:new Date().toISOString()},S=await this.databases.createDocument(this.databaseId,n.PLAYER_INSTANCES,d.unique(),c);return console.log(`✅ Created new ${e} instance for user ${t}: ${s}`),await this.initializeActiveQueue(s),S}async getPlayerInstance(t){try{const e=await this.databases.listDocuments(this.databaseId,n.PLAYER_INSTANCES,[i.equal("userId",t),i.equal("isActive",!0),i.limit(1)]);return e.documents.length===0?null:e.documents[0]}catch(e){return console.error("Failed to get player instance:",e),null}}async updatePlayerState(t,e){const a=await this.databases.listDocuments(this.databaseId,n.PLAYER_INSTANCES,[i.equal("instanceId",t),i.limit(1)]);if(a.documents.length===0)throw new Error(`Player instance not found: ${t}`);const s=a.documents[0],o={...typeof s.playerState=="string"?JSON.parse(s.playerState):s.playerState,...e};return await this.databases.updateDocument(this.databaseId,n.PLAYER_INSTANCES,s.$id,{playerState:JSON.stringify(o),lastActiveAt:new Date().toISOString(),lastUpdated:new Date().toISOString()})}async updateInstanceActivity(t){return await this.databases.updateDocument(this.databaseId,n.PLAYER_INSTANCES,t,{lastActiveAt:new Date().toISOString()})}async createPlaylist(t,e){var r;const a={name:t.name,description:t.description,ownerId:e,visibility:t.visibility||"private",tracks:JSON.stringify(t.tracks||[]),trackCount:((r=t.tracks)==null?void 0:r.length)||0,totalDuration:0,tags:JSON.stringify(t.tags||[]),category:t.category||"user",isDefault:!1,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return await this.databases.createDocument(this.databaseId,n.PLAYLISTS,d.unique(),a)}async getPlaylist(t){try{return await this.databases.getDocument(this.databaseId,n.PLAYLISTS,t)}catch(e){if(e.code===404)return null;throw e}}async getUserPlaylists(t){return(await this.databases.listDocuments(this.databaseId,n.PLAYLISTS,[i.equal("ownerId",t),i.orderDesc("updatedAt"),i.limit(100)])).documents}async getPublicPlaylists(){return(await this.databases.listDocuments(this.databaseId,n.PLAYLISTS,[i.equal("visibility","public"),i.orderDesc("updatedAt"),i.limit(50)])).documents}async getDefaultPlaylist(){try{const t=await this.databases.listDocuments(this.databaseId,n.PLAYLISTS,[i.equal("is_default",!0),i.equal("category","system"),i.limit(1)]);return t.documents.length===0?null:t.documents[0]}catch(t){return console.error("Failed to get default playlist:",t),null}}async initializeActiveQueue(t){const e=await this.getDefaultPlaylist(),a=(e==null?void 0:e.$id)||"fallback",s={instanceId:t,sourcePlaylistId:a,memoryPlaylist:JSON.stringify([]),currentTrackIndex:0,priorityQueue:JSON.stringify([]),isShuffled:!1,shuffleSeed:Math.floor(Math.random()*1e6),lastUpdated:new Date().toISOString()};try{const c=await this.databases.listDocuments(this.databaseId,n.ACTIVE_QUEUES,[i.equal("instanceId",t),i.limit(1)]);if(c.documents.length>0)return c.documents[0]}catch{console.log("No existing queue found, creating new one...")}const o=await this.databases.createDocument(this.databaseId,n.ACTIVE_QUEUES,d.unique(),s);return e&&await this.loadPlaylistIntoQueue(t,e),o}async getActiveQueue(t){try{const e=await this.databases.listDocuments(this.databaseId,n.ACTIVE_QUEUES,[i.equal("instanceId",t),i.limit(1)]);return e.documents.length===0?null:e.documents[0]}catch(e){return console.error("Failed to get active queue:",e),null}}async addToPriorityQueue(t,e,a){const s=await this.getActiveQueue(t);if(!s)throw new Error("Active queue not found");const r=typeof s.priorityQueue=="string"?JSON.parse(s.priorityQueue):s.priorityQueue,o={$id:d.unique(),videoId:e.videoId,title:e.title,channelTitle:e.channelTitle,thumbnail:e.thumbnail,duration:e.duration,requestedBy:a,priority:e.priority||r.length+1,timestamp:new Date().toISOString()};r.push(o),await this.databases.updateDocument(this.databaseId,n.ACTIVE_QUEUES,s.$id,{priorityQueue:JSON.stringify(r),lastUpdated:new Date().toISOString()})}async loadPlaylistIntoQueue(t,e){const a=typeof e.tracks=="string"?JSON.parse(e.tracks):e.tracks,s=a.map((o,c)=>({videoId:o.videoId,title:o.title,channelTitle:o.channelTitle,thumbnail:o.thumbnail,duration:o.duration,playCount:0,lastPlayedAt:void 0,shuffleOrder:c,isActive:!0})),r=await this.getActiveQueue(t);r&&(await this.databases.updateDocument(this.databaseId,n.ACTIVE_QUEUES,r.$id,{sourcePlaylistId:e.$id,memoryPlaylist:JSON.stringify(s),lastUpdated:new Date().toISOString()}),console.log(`✅ Loaded ${a.length} tracks from playlist "${e.name}" into queue`))}async recordPlayHistory(t,e,a){const s={userId:t,activityType:"play_history",referenceId:e,metadata:JSON.stringify(a),timestamp:new Date().toISOString()};await this.databases.createDocument(this.databaseId,n.USER_ACTIVITY,d.unique(),s)}async addFavorite(t,e,a){const s={userId:t,activityType:"favorite",referenceId:e,metadata:JSON.stringify(a),timestamp:new Date().toISOString()};await this.databases.createDocument(this.databaseId,n.USER_ACTIVITY,d.unique(),s)}async getUserActivity(t,e){const a=[i.equal("userId",t),i.orderDesc("timestamp"),i.limit(100)];return e&&a.push(i.equal("activityType",e)),(await this.databases.listDocuments(this.databaseId,n.USER_ACTIVITY,a)).documents}async healthCheck(){try{const t=Object.values(n);for(const e of t)await this.databases.listDocuments(this.databaseId,e,[i.limit(1)]);return{status:"healthy",collections:t,timestamp:new Date().toISOString()}}catch(t){throw new Error(`Health check failed: ${t.message}`)}}}const b="https://syd.cloud.appwrite.io/v1",D="68cc86c3002b27e13947",E="68cc92d30024e1b6eeb6";let p=null,h=null;function P(){return h||(h=new w().setEndpoint(b).setProject(D)),h}function _(){if(!p){const u=P();p=new v(u,E)}return p}export{_ as g};
